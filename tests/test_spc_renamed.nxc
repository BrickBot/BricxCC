#include "spmem.h"

int foo[] = {1, 2, 3, 4, 5, 6}; // good code
int bar = 34; // good code
int * pFoo; // good code
char ch = '\n';
/*
__initialize_global_data:
	MVI __signed_stack_001Testing, foo
	MVI (__signed_stack_001Testing), 1
	INC __signed_stack_001Testing
	MVI (__signed_stack_001Testing), 2
	INC __signed_stack_001Testing
	MVI (__signed_stack_001Testing), 3
	INC __signed_stack_001Testing
	MVI (__signed_stack_001Testing), 4
	INC __signed_stack_001Testing
	MVI (__signed_stack_001Testing), 5
	INC __signed_stack_001Testing
	MVI (__signed_stack_001Testing), 6
	MVI bar, 34
	MVI pFoo, 0
	MVI ch, 10
	MVI __ArrHelper__main_76_0, 0
	RET
*/

// structs are not working yet
// arrays of more than one dimension are not working yet
// reference types are also not working as true references yet

// pointer syntax in functions not working yet
// char * Bogus(const char * ch);

int Foo(int x);
void Testing(int x, int y);
task two();
task three();

task main()
{
  long * ptr;
  long x;
  @0x0C = 2; // good code
/*
	MVI __D0main, 2
	MOV 0x0C, __D0main
*/
  Timer0 = 2; // good code
/*
	MVI __D0main, 2
	MOV 0x0C, __D0main
*/
  x = @0x1F; // good code
/*
	MOV __D0main, 0x1F
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  x = SystemClock; // good code
/*
	MOV __D0main, 0x1F
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  x = SystemClock + Timer0 * Foo(SerialInByte); // good code
/*
	MOV __D0main, 0x1F
	MOV __signed_stack_001main, __D0main
	MOV __D0main, 0x0C
	MOV __signed_stack_002main, __D0main
	MOV __D0main, 0x11
	MOV __Foo_7qG2_x_7qG2_000, __D0main
	CALL Foo
	MOV __D0main, __D0Foo
	MUL __D0main, __signed_stack_002main
	ADD __D0main, __signed_stack_001main
*/
  int data[] = {0, 1, 2, 3, 4}; // good code
/*
	MVI __signed_stack_001main, __main_7qG2_data_7qG2_000
	MVI (__signed_stack_001main), 0
	INC __signed_stack_001main
	MVI (__signed_stack_001main), 1
	INC __signed_stack_001main
	MVI (__signed_stack_001main), 2
	INC __signed_stack_001main
	MVI (__signed_stack_001main), 3
	INC __signed_stack_001main
	MVI (__signed_stack_001main), 4
*/
  ptr = &x; // good code
/*
	MVI __D0main, __main_7qG2_x_7qG2_000
	MOV __main_7qG2_ptr_7qG2_000, __D0main
*/
  *ptr = 23; // good code
/*
	MVI __D0main, 23
	MOV (__main_7qG2_ptr_7qG2_000), __D0main
*/
  *ptr += 23; // good code
/*
	MVI __D0main, 23
	ADD (__main_7qG2_ptr_7qG2_000), __D0main
*/
  x = *ptr; // good code
/*
	MOV __D0main, (__main_7qG2_ptr_7qG2_000)
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  x = *ptr % *ptr++; // good code
/*
	MOV __D0main, (__main_7qG2_ptr_7qG2_000)
	MOV __signed_stack_001main, __D0main
	MOV __D0main, (__main_7qG2_ptr_7qG2_000)
	INC __main_7qG2_ptr_7qG2_000
	MOV __signed_stack_002main, __signed_stack_001main
	DIV __signed_stack_002main, __D0main
	MUL __signed_stack_002main, __D0main
	SUB __signed_stack_001main, __signed_stack_002main
	MOV __D0main, __signed_stack_001main
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  x = ptr % 4; // good code
/*
	MOV __D0main, __main_7qG2_ptr_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 4
	MOV __signed_stack_002main, __signed_stack_001main
	DIV __signed_stack_002main, __D0main
	MUL __signed_stack_002main, __D0main
	SUB __signed_stack_001main, __signed_stack_002main
	MOV __D0main, __signed_stack_001main
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  x %= 4; // good code
/*
	MVI __D0main, 4
	MOV __signed_stack_001main, __main_7qG2_x_7qG2_000
	DIV __signed_stack_001main, __D0main
	MUL __signed_stack_001main, __D0main
	SUB __main_7qG2_x_7qG2_000, __signed_stack_001main
*/
  x = 80001; // good code
/*
	MVI __D0main, 00001H
	LSL __D0main, 16
	ORI __D0main, 03881H
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  if (5<4) // good code
    x++;
  else
    x--;
/*
	MVI __D0main, 0
	TST __D0main
	JZ __ASM_Label_24
	INC __main_7qG2_x_7qG2_000
	JMP __ASM_Label_25
__ASM_Label_24:
	DEC __main_7qG2_x_7qG2_000
__ASM_Label_25:
*/
  if (x<4) // good code
    x++;
  else
    x--;
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 4
	MOV __signed_stack_002main, __signed_stack_001main
	SUB __signed_stack_002main, __D0main
	MVI __signed_stack_002main, 1
	JN __ASM_Label_28
	MVI __signed_stack_002main, 0
__ASM_Label_28:
	TST __signed_stack_002main
	MVI __D0main, 0
	JZ __ASM_Label_29
	MVI __D0main, 1
__ASM_Label_29:
__ASM_Label_27:
__ASM_Label_26:
	JZ __ASM_Label_30
	INC __main_7qG2_x_7qG2_000
	JMP __ASM_Label_31
__ASM_Label_30:
	DEC __main_7qG2_x_7qG2_000
__ASM_Label_31:
*/


  for (int i=0; i<100; i++)  // good code
    data[i%5] = data[i%5] + i;
/*
	MVI __D0main, 0
	MOV __main_7qG2_i_7qG2_001, __D0main
__ASM_Label_32:
	MOV __D0main, __main_7qG2_i_7qG2_001
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 100
	MOV __signed_stack_002main, __signed_stack_001main
	SUB __signed_stack_002main, __D0main
	MVI __signed_stack_002main, 1
	JN __ASM_Label_40
	MVI __signed_stack_002main, 0
__ASM_Label_40:
	TST __signed_stack_002main
	MVI __D0main, 0
	JZ __ASM_Label_41
	MVI __D0main, 1
__ASM_Label_41:
__ASM_Label_39:
__ASM_Label_38:
	JZ __ASM_Label_33
	JMP __ASM_Label_34
__ASM_Label_35:
	INC __main_7qG2_i_7qG2_001
	JMP __ASM_Label_32
__ASM_Label_34:
	MOV __D0main, __main_7qG2_i_7qG2_001
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 5
	MOV __signed_stack_002main, __signed_stack_001main
	DIV __signed_stack_002main, __D0main
	MUL __signed_stack_002main, __D0main
	SUB __signed_stack_001main, __signed_stack_002main
	MOV __D0main, __signed_stack_001main
__ASM_Label_43:
__ASM_Label_42:
	MOV __signed_stack_001main, __D0main
	MOV __D0main, __main_7qG2_i_7qG2_001
	MOV __signed_stack_002main, __D0main
	MVI __D0main, 5
	MOV __signed_stack_003main, __signed_stack_002main
	DIV __signed_stack_003main, __D0main
	MUL __signed_stack_003main, __D0main
	SUB __signed_stack_002main, __signed_stack_003main
	MOV __D0main, __signed_stack_002main
__ASM_Label_47:
__ASM_Label_46:
	MOV __signed_stack_002main, __D0main
	MVI __signed_stack_003main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_003main, __signed_stack_002main
	MOV __ArrHelper__main_76_0, (__signed_stack_003main)
	MOV __D0main, __ArrHelper__main_76_0
	MOV __signed_stack_002main, __D0main
	MOV __D0main, __main_7qG2_i_7qG2_001
	ADD __D0main, __signed_stack_002main
__ASM_Label_45:
__ASM_Label_44:
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
	JMP __ASM_Label_35
__ASM_Label_33:
*/
  while (true) {  // good code
    x += 5;
    if (x > 1000)
      break;
  }
/*
__ASM_Label_48:
	MVI __D0main, 1
	TST __D0main
	JZ __ASM_Label_49
	MVI __D0main, 5
	ADD __main_7qG2_x_7qG2_000, __D0main
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 1000
	MOV __signed_stack_002main, __signed_stack_001main
	SUB __signed_stack_002main, __D0main
	MVI __signed_stack_002main, 1
	JP __ASM_Label_56
	MVI __signed_stack_002main, 0
__ASM_Label_56:
	TST __signed_stack_002main
	MVI __D0main, 0
	JZ __ASM_Label_57
	MVI __D0main, 1
__ASM_Label_57:
__ASM_Label_55:
__ASM_Label_54:
	JZ __ASM_Label_58
	JMP __ASM_Label_49
__ASM_Label_58:
	JMP __ASM_Label_48
__ASM_Label_49:
*/
  repeat(100) // good code
  {
    x++;
  }
/*
	MVI __D0main, 100
	MOV __signed_stack_001main, __D0main
__ASM_Label_67:
	DEC __signed_stack_001main
	INC __main_7qG2_x_7qG2_000
	TST __signed_stack_001main
	JP __ASM_Label_67
__ASM_Label_68:
*/
  int y=34*2+50-13/40%33; // good code
/*
 	MVI __D0main, 118
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y = x+1-y; // good code
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 1
	ADD __D0main, __signed_stack_001main
	MOV __signed_stack_001main, __D0main
	MOV __D0main, __main_7qG2_y_7qG2_000
	SUB __signed_stack_001main, __D0main
	MOV __D0main, __signed_stack_001main
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y--; // good code
/*
	DEC __main_7qG2_y_7qG2_000
*/
  x *= y; // good code
/*
	MOV __D0main, __main_7qG2_y_7qG2_000
__ASM_Label_68:
__ASM_Label_67:
	MUL __main_7qG2_x_7qG2_000, __D0main
*/
  data[0] = x; // good code
/*
	MVI __D0main, 0
	MOV __signed_stack_001main, __D0main
	MOV __D0main, __main_7qG2_x_7qG2_000
__ASM_Label_72:
__ASM_Label_71:
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
*/
  int i=0; // good code
/*
	MVI __D0main, 0
	MOV __main_7qG2_i_7qG2_000, __D0main
*/
  data[i] = y; // good code
/*
	MOV __D0main, __main_7qG2_i_7qG2_000
	MOV __signed_stack_001main, __D0main
	MOV __D0main, __main_7qG2_y_7qG2_000
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
*/
  data[i+1] = 2; // good code
/*
	MOV __D0main, __main_7qG2_i_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 1
	ADD __D0main, __signed_stack_001main
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 2
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
*/
  data[i+2] = x*4; // good code
/*
	MOV __D0main, __main_7qG2_i_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 2
	ADD __D0main, __signed_stack_001main
	MOV __signed_stack_001main, __D0main
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __signed_stack_002main, __D0main
	MVI __D0main, 4
	MUL __D0main, __signed_stack_002main
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
*/
  data[i+3] = foo[0]+bar; // good code
/*
	MOV __D0main, __main_7qG2_i_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 3
	ADD __D0main, __signed_stack_001main
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 0
	MOV __signed_stack_002main, __D0main
	MVI __signed_stack_003main, foo
	ADD __signed_stack_003main, __signed_stack_002main
	MOV __ArrHelper__main_76_0, (__signed_stack_003main)
	MOV __D0main, __ArrHelper__main_76_0
	MOV __signed_stack_002main, __D0main
	MOV __D0main, bar
	ADD __D0main, __signed_stack_002main
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
*/
  if (x > 50) { // good code
    y++;
  }
  else {
    y--;
  }
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 50
	MOV __signed_stack_002main, __signed_stack_001main
	SUB __signed_stack_002main, __D0main
	MVI __signed_stack_002main, 1
	JP __ASM_Label_95
	MVI __signed_stack_002main, 0
__ASM_Label_95:
	TST __signed_stack_002main
	MVI __D0main, 0
	JZ __ASM_Label_96
	MVI __D0main, 1
__ASM_Label_96:
__ASM_Label_94:
__ASM_Label_93:
	JZ __ASM_Label_97
	INC __main_7qG2_y_7qG2_000
	JMP __ASM_Label_98
__ASM_Label_97:
	DEC __main_7qG2_y_7qG2_000
__ASM_Label_98:
*/
  Testing(x, data[0]); // good code
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __Testing_7qG2_x_7qG2_000, __D0main
	MVI __D0main, 0
	MOV __signed_stack_001main, __D0main
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV __ArrHelper__main_76_0, (__signed_stack_002main)
	MOV __D0main, __ArrHelper__main_76_0
	MOV __Testing_7qG2_y_7qG2_000, __D0main
	CALL Testing
*/
  switch(x) // good code
  {
    case 0:
      i++;
      break;
    case 1:
    case 2:
      i--;
      break;
    case 3: // fall through
      y++;
    case 4:
      data[i] = 23;
      break;
    default:
      data[0] = data[1];
  }
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
__ASM_Label_106:
__ASM_Label_105:
	MOV __signed_stack_001main, __D0main
	SBI __signed_stack_001main, 0
	JZ __ASM_Label_108
	MOV __signed_stack_001main, __D0main
	SBI __signed_stack_001main, 1
	JZ __ASM_Label_109
	MOV __signed_stack_001main, __D0main
	SBI __signed_stack_001main, 2
	JZ __ASM_Label_110
	MOV __signed_stack_001main, __D0main
	SBI __signed_stack_001main, 3
	JZ __ASM_Label_111
	MOV __signed_stack_001main, __D0main
	SBI __signed_stack_001main, 4
	JZ __ASM_Label_112
	JMP __ASM_Label_117
	JMP __ASM_Label_107
__ASM_Label_108:
	INC __main_7qG2_i_7qG2_000
	JMP __ASM_Label_107
__ASM_Label_109:
__ASM_Label_110:
	DEC __main_7qG2_i_7qG2_000
	JMP __ASM_Label_107
__ASM_Label_111:
	INC __main_7qG2_y_7qG2_000
__ASM_Label_112:
	MOV __D0main, __main_7qG2_i_7qG2_000
__ASM_Label_114:
__ASM_Label_113:
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 23
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
	JMP __ASM_Label_107
__ASM_Label_117:
	MVI __D0main, 0
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 1
	MOV __signed_stack_002main, __D0main
	MVI __signed_stack_003main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_003main, __signed_stack_002main
	MOV __ArrHelper__main_76_0, (__signed_stack_003main)
	MOV __D0main, __ArrHelper__main_76_0
__ASM_Label_121:
__ASM_Label_120:
	MVI __signed_stack_002main, __main_7qG2_data_7qG2_000
	ADD __signed_stack_002main, __signed_stack_001main
	MOV (__signed_stack_002main), __D0main
__ASM_Label_107:
*/
  open("r"); // good code
/*
	LOPEN
	MVI __D0main, 0
	JC __ASM_Label_132
	MVI __D0main, 1
__ASM_Label_132:
*/
  x = read(); // good code
/*
	READ __D0main
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  close(); // good code
/*
	LCLOSE
	MVI __D0main, 0
	JC __ASM_Label_135
	MVI __D0main, 1
__ASM_Label_135:
*/
  open("w"); // good code
/*
	LINIT
	MVI __D0main, 0
	JC __ASM_Label_136
	MVI __D0main, 1
__ASM_Label_136:
*/
  write(x); // good code
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	LOG __D0main
*/
  x = stat(); // good code
/*
	LSTAT
	MVI __D0main, 2
	JNZ __ASM_Label_141
	DEC __D0main
	JC __ASM_Label_141
	DEC __D0main
__ASM_Label_141:
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  x = push(y); // good code
/*
	MOV __D0main, __main_7qG2_y_7qG2_000
	PUSH __D0main
	MOV __main_7qG2_x_7qG2_000, __D0main
*/
  y = pop(); // good code
/*
	POP __D0main
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y = sqrt(x); // good code
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	SQRT __D0main
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y = putchar('\n'); // good code
/*
	TRNL
	MVI __D0main, 10
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  // unsupported escapes are output as ' '
  y = putchar('\t'); // good code
/*
	TRSP
	MVI __D0main, 32
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y = putchar('\r'); // good code
/*
	TRCR
	MVI __D0main, 13
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y = putchar('X'); // good code
/*
	TRCH X
	MVI __D0main, 88
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  y = puts("string\\\n \"constant\""); // good code
/*
	TRCH s
	TRCH t
	TRCH r
	TRCH i
	TRCH n
	TRCH g
	TRCH \
	TRNL
	TRSP
	TRCH "
	TRCH c
	TRCH o
	TRCH n
	TRCH s
	TRCH t
	TRCH a
	TRCH n
	TRCH t
	TRCH "
	MVI __D0main, 1
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  // good code
  y = printf("Foo(x) = %d, x = %x, %s", Foo(x), x, "wow\n");
/*
	TRCH F
	TRCH o
	TRCH o
	TRCH (
	TRCH x
	TRCH )
	TRSP
	TRCH =
	TRSP
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __Foo_7qG2_x_7qG2_000, __D0main
	CALL Foo
	MOV __D0main, __D0Foo
	TRND __D0main
	TRCH ,
	TRSP
	TRCH x
	TRSP
	TRCH =
	TRSP
	MOV __D0main, __main_7qG2_x_7qG2_000
	TRNH __D0main
	TRCH ,
	TRSP
	TRCH w
	TRCH o
	TRCH w
	TRNL
	MVI __D0main, 1
	MOV __main_7qG2_y_7qG2_000, __D0main
*/
  // stop the program if boolean expression is true
  Stop(x>5); // good code
/*
	MOV __D0main, __main_7qG2_x_7qG2_000
	MOV __signed_stack_001main, __D0main
	MVI __D0main, 5
	MOV __signed_stack_002main, __signed_stack_001main
	SUB __signed_stack_002main, __D0main
	MVI __signed_stack_002main, 1
	JP __ASM_Label_172
	MVI __signed_stack_002main, 0
__ASM_Label_172:
	TST __signed_stack_002main
	MVI __D0main, 0
	JZ __ASM_Label_173
	MVI __D0main, 1
__ASM_Label_173:
	TST __D0main
	JZ __ASM_Label_174
	HALTALL
__ASM_Label_174:
*/
  start two; // good code
/*
	FORK two
*/
  ExitTo(three); // maybe good code?
/*
	FORK three
	HALTME
*/
  RotateLeft(x); // good code
  RotateRight(x); // good code
/*
	RLC __main_7qG2_x_7qG2_000
	RRC __main_7qG2_x_7qG2_000
*/
  StopProcesses(); // good code
/*
	HALTEX
*/
  Run(4); // good code
/*
	SWITCH 4
*/
  Wait(10); // maybe good code?
/*
	MVI __D0main, 10
	MOV __signed_stack_001main, __D0main
__ASM_Label_177:
	STALL
	DEC __signed_stack_001main
	JP __ASM_Label_177
*/


}

task two() // good code
{
  while(true)
  {
    putchar('x');
  }
}
/*
two:
__ASM_Label_175:
	MVI __D0two, 1
	TST __D0two
	JZ __ASM_Label_176
	TRCH x
	MVI __D0two, 120
	JMP __ASM_Label_175
__ASM_Label_176:
	HALTME
*/

task three() // good code
{
  puts("3");
}
/*
three:
	TRCH 3
	MVI __D0three, 1
	HALTME
*/

int Foo(int x) // good code
{
  return x*x;
}
/*
Foo:
	MOV __D0Foo, __Foo_7qG2_x_7qG2_000
	MOV __signed_stack_001Foo, __D0Foo
	MOV __D0Foo, __Foo_7qG2_x_7qG2_000
	MUL __D0Foo, __signed_stack_001Foo
	RET
	RET
*/

void Testing(int x, int y) // good code
{
  int z = x+y-Foo(x);
  z--;
}
/*
Testing:
__Testing_7qG2_z_7qG2_000 DS 1
	MOV __D0Testing, __Testing_7qG2_x_7qG2_000
	MOV __signed_stack_001Testing, __D0Testing
	MOV __D0Testing, __Testing_7qG2_y_7qG2_000
	ADD __D0Testing, __signed_stack_001Testing
	MOV __signed_stack_001Testing, __D0Testing
	MOV __D0Testing, __Testing_7qG2_x_7qG2_000
__ASM_Label_129:
__ASM_Label_128:
	MOV __Foo_7qG2_x_7qG2_000, __D0Testing
	CALL Foo
	MOV __D0Testing, __D0Foo
	SUB __signed_stack_001Testing, __D0Testing
	MOV __D0Testing, __signed_stack_001Testing
__ASM_Label_127:
__ASM_Label_126:
	MOV __Testing_7qG2_z_7qG2_000, __D0Testing
	DEC __Testing_7qG2_z_7qG2_000
	RET
*/

