struct Ball {
       int centerx;
       int centery;
       int radius;
       int deltax;
       int deltay;
};

#define NUMBALLS 10

void swapdirection(Ball &ball1, Ball &ball2);

int balls_touch(Ball ball1,Ball ball2)
{
   int d;

   d = (ball2.centerx-ball1.centerx)*
       (ball2.centerx-ball1.centerx)+
       (ball2.centery-ball1.centery)*
       (ball2.centery-ball1.centery);

   if (sqrt(d) < ball2.radius + ball1.radius)
      return true;
   else
      return false;
}

void drawballs(Ball balls[])
{
   int i;

   ClearScreen();
   for (i = 0; i < NUMBALLS; i++)
       CircleOut(balls[i].centerx,balls[i].centery,balls[i].radius,false);
}

void moveballs(Ball &balls[])
{
   int i;

   for (i = 0; i < NUMBALLS; i++)
   {
     balls[i].centerx += balls[i].deltax;
     balls[i].centery += balls[i].deltay;

     if (balls[i].centerx + balls[i].radius >= 99)
        balls[i].deltax = -1;
     else if (balls[i].centerx - balls[i].radius <= 0)
        balls[i].deltax = 1;
     if (balls[i].centery + balls[i].radius >= 63)
        balls[i].deltay = -1;
     else if (balls[i].centery - balls[i].radius <= 0)
        balls[i].deltay = 1;
   }
}

void createballs(Ball &balls[])
{
     int i,j;
     bool ok;

     for (i = 0; i < NUMBALLS; i++)
     {
       balls[i].radius = Random(10)+1;
       balls[i].deltax = Random(3) - 1;
       balls[i].deltay = Random(3) - 1;
       balls[i].centerx = Random(100-balls[i].radius*2)+balls[i].radius;
       balls[i].centery = Random(64-balls[i].radius*2)+balls[i].radius;

       ok = true;
       for (j = 0; j < i; j++) {
          if (balls_touch(balls[j],balls[i]))
            ok = false;
       }

       if (!ok)
         i--;
     }
}

void updateballs(Ball &balls[])
{
    int i,j;

    moveballs(balls);

    for (i = 0; i < NUMBALLS-1; i++)
      for (j = i+1; j < NUMBALLS; j++)
      {
        Ball ball1 = balls[i];
        Ball ball2 = balls[j];

        if (balls_touch(ball1,ball2))
        {
           swapdirection(ball1,ball2);
           balls[i] = ball1;
           balls[j] = ball2;
        }
      }
}

task main()
{
     Ball balls[NUMBALLS];

     createballs(balls);
     
     while (true)
     {
        drawballs(balls);
        updateballs(balls);
     }
}

//void swapdirection(ball1, ball2)
void swapdirection(Ball &ball1, Ball &ball2)
{
   int temp;

   temp = ball1.deltax;
   ball1.deltax = ball2.deltax;
   ball2.deltax = temp;

   temp = ball1.deltay;
   ball1.deltay = ball2.deltay;
   ball2.deltay = temp;
}


