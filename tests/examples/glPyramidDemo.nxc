#define sqrt5 2.23607
#define phi ((1.0+sqrt5)*0.5)
#define ratio (3.80423/(4.0*phi))
#define v01  0,  b, -a
#define v02  b,  a,  0
#define v03 -b,  a,  0
#define v04  0,  b,  a
#define v05  0, -b,  a
#define v06 -a,  0,  b
#define v07  0, -b, -a
#define v08  a,  0, -b
#define v09  a,  0,  b
#define v10 -a,  0, -b
#define v11  b, -a,  0
#define v12 -b, -a,  0

int glIcosahedron(int bm, int radius)
{
  float a = (radius/ratio)*0.5;
  float b = (radius/ratio)/(2.0*phi);
  int id = glBeginObject();
    glBegin(bm); // f1
      glAddVertex(v01);
      glAddVertex(v02);
      glAddVertex(v03);
    glEnd();
    glBegin(bm); // f2
      glAddVertex(v04);
      glAddVertex(v03);
      glAddVertex(v02);
    glEnd();
    glBegin(bm); // f3
      glAddVertex(v04);
      glAddVertex(v05);
      glAddVertex(v06);
    glEnd();
    glBegin(bm); // f4
      glAddVertex(v04);
      glAddVertex(v09);
      glAddVertex(v05);
    glEnd();
    glBegin(bm); // f5
      glAddVertex(v01);
      glAddVertex(v07);
      glAddVertex(v08);
    glEnd();
    glBegin(bm); // f6
      glAddVertex(v01);
      glAddVertex(v10);
      glAddVertex(v07);
    glEnd();
    glBegin(bm); // f7
      glAddVertex(v05);
      glAddVertex(v11);
      glAddVertex(v12);
    glEnd();
    glBegin(bm); // f8
      glAddVertex(v07);
      glAddVertex(v12);
      glAddVertex(v11);
    glEnd();
    glBegin(bm); // f9
      glAddVertex(v03);
      glAddVertex(v06);
      glAddVertex(v10);
    glEnd();
    glBegin(bm); // f10
      glAddVertex(v12);
      glAddVertex(v10);
      glAddVertex(v06);
    glEnd();
    glBegin(bm); // f11
      glAddVertex(v02);
      glAddVertex(v08);
      glAddVertex(v09);
    glEnd();
    glBegin(bm); // f12
      glAddVertex(v11);
      glAddVertex(v09);
      glAddVertex(v08);
    glEnd();
    glBegin(bm); // f13
      glAddVertex(v04);
      glAddVertex(v06);
      glAddVertex(v03);
    glEnd();
    glBegin(bm); // f14
      glAddVertex(v04);
      glAddVertex(v02);
      glAddVertex(v09);
    glEnd();
    glBegin(bm); // f15
      glAddVertex(v01);
      glAddVertex(v03);
      glAddVertex(v10);
    glEnd();
    glBegin(bm); // f16
      glAddVertex(v01);
      glAddVertex(v08);
      glAddVertex(v02);
    glEnd();
    glBegin(bm); // f17
      glAddVertex(v07);
      glAddVertex(v10);
      glAddVertex(v12);
    glEnd();
    glBegin(bm); // f18
      glAddVertex(v07);
      glAddVertex(v11);
      glAddVertex(v08);
    glEnd();
    glBegin(bm); // f19
      glAddVertex(v05);
      glAddVertex(v12);
      glAddVertex(v06);
    glEnd();
    glBegin(bm); // f20
      glAddVertex(v05);
      glAddVertex(v09);
      glAddVertex(v11);
    glEnd();
  glEndObject();
  return id;
}

task main()
{
  // Initialize the 3D engine...
  glInit();
  // Create a cube, this is the first object which will be object id 0...
//  glPyramid(GL_POLYGON, 20, 20, 20);
  int id1 = glIcosahedron(GL_POLYGON, 30);
  // Set the main view x-angle...
  glSetAngleX(45);
  glSet(GL_ZOOM_FACTOR, 0);
  glSet(GL_CAMERA_DEPTH, 100);
  while (true)
  {
    // Rotate the main view....
    glAddToAngleY(8);
    glAddToAngleX(4);
    // Setup for rendering...
    glBeginRender();
    // Call the object with id 0...
    glCallObject(id1);
    // Finish, clear the screen, rotate and render the called objects...
    glFinishRender();
//    Wait(MS_20);
  }
}
