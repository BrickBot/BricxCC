<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Swan Specific Features</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="swan specific features">
</OBJECT>

<H2><A NAME="idh_nqc_swanspecific"></A>3.16 Swan Specific Features</H2>

<H3>SetMotorPowerSigned(const int motor, const int &amp;v)Function - Swan</H3>

<P>Set the power of a motor to the specified signed value.</P>

<PRE><CODE>SetMotorPowerSigned(MTR_A, 10);</CODE></PRE>

<P>The motor can be specified using the following constants.</P>

<P><B>Motor ConstantMeaning</B></P>

<P>MTR_Aoutput A</P>

<P>MTR_Boutput B</P>

<P>MTR_Coutput C</P>

<P>MTR_Dvirtual output D</P>

<P>MTR_Evirtual output E</P>

<P>MTR_Fvirtual output F</P>

<P>There are additional constants for the motor power functions and values.</P>

<P><B>Motor Power DirectionMeaning</B></P>

<P>MPD_FWDfoward</P>

<P>MPD_REVreverse</P>

<P>MPD_FLOATfloat</P>

<P>MPD_OFFoff</P>

<P><B>Motor StateMeaning</B></P>

<P>MS_FLOATfloat state</P>

<P>MS_BRAKEbrake state</P>

<P>MS_FWDforward state</P>

<P>MS_REVreverse state</P>

<P><B>Motor Forward PowerMeaning</B></P>

<P>MTR_FWD_POWER_1forward at power level 1</P>

<P>MTR_FWD_POWER_2forward at power level 2</P>

<P>MTR_FWD_POWER_3forward at power level 3</P>

<P>MTR_FWD_POWER_4forward at power level 4</P>

<P>MTR_FWD_POWER_5forward at power level 5</P>

<P>MTR_FWD_POWER_6forward at power level 6</P>

<P>MTR_FWD_POWER_7forward at power level 7</P>

<P>MTR_FWD_POWER_8forward at power level 8</P>

<P><B>Motor Reverse PowerMeaning</B></P>

<P>MTR_REV_POWER_1reverse at power level 1</P>

<P>MTR_REV_POWER_2reverse at power level 2</P>

<P>MTR_REV_POWER_3reverse at power level 3</P>

<P>MTR_REV_POWER_4reverse at power level 4</P>

<P>MTR_REV_POWER_5reverse at power level 5</P>

<P>MTR_REV_POWER_6reverse at power level 6</P>

<P>MTR_REV_POWER_7reverse at power level 7</P>

<P>MTR_REV_POWER_8reverse at power level 8</P>

<P><B>Motor Float PowerMeaning</B></P>

<P>MTR_FLOAT_POWER_1float at power level 1</P>

<P>MTR_FLOAT_POWER_2float at power level 2</P>

<P>MTR_FLOAT_POWER_3float at power level 3</P>

<P>MTR_FLOAT_POWER_4float at power level 4</P>

<P>MTR_FLOAT_POWER_5float at power level 5</P>

<P>MTR_FLOAT_POWER_6float at power level 6</P>

<P>MTR_FLOAT_POWER_7float at power level 7</P>

<P>MTR_FLOAT_POWER_8float at power level 8</P>

<P><B>Motor Brake PowerMeaning</B></P>

<P>MTR_BRAKE_POWER_1brake at power level 1</P>

<P>MTR_BRAKE_POWER_2brake at power level 2</P>

<P>MTR_BRAKE_POWER_3brake at power level 3</P>

<P>MTR_BRAKE_POWER_4brake at power level 4</P>

<P>MTR_BRAKE_POWER_5brake at power level 5</P>

<P>MTR_BRAKE_POWER_6brake at power level 6</P>

<P>MTR_BRAKE_POWER_7brake at power level 7</P>

<P>MTR_BRAKE_POWER_8brake at power level 8</P>

<H3>MotorPowerSigned(const int motor)Value - Swan</H3>

<P>Read the signed power setting of a motor.</P>

<PRE><CODE>x = MotorPowerSigned(MTR_A);</CODE></PRE>

<H3>SetMotorBrakePower(const int motor, const int &amp;v)Function - Swan</H3>

<P>Set the brake power of a motor to the specified value.</P>

<PRE><CODE>SetMotorBrakePower(MTR_A, 10);</CODE></PRE>

<H3>MotorBrakePower(const int motor)Value - Swan</H3>

<P>Read the brake power setting of a motor.</P>

<PRE><CODE>x = MotorBrakePower(MTR_A);</CODE></PRE>

<H3>SetMotorPower8(const int motor, const int &amp;v)Function - Swan</H3>

<P>Set the power of a motor to the specified value (using a scale from 0 to 7).</P>

<PRE><CODE>SetMotorPower8(MTR_A, 7);</CODE></PRE>

<H3>MotorPower8(const int n)Value - Swan</H3>

<P>Read the power setting of a motor (using a scale from 0 to 7).</P>

<PRE><CODE>x = MotorPower8(MTR_A);</CODE></PRE>

<H3>SetMotorPower128(const int motor, const int &amp;v)Function - Swan</H3>

<P>Set the power of a motor to the specified value (using a scale from 0 to 127).</P>

<PRE><CODE>SetMotorPower128(MTR_A, 100);</CODE></PRE>

<H3>MotorPower128(const int n)Value - Swan</H3>

<P>Read the power setting of a motor (using a scale from 0 to 127).</P>

<PRE><CODE>x = MotorPower128(MTR_A);</CODE></PRE>

<H3>SetEventType(const int n, const int &amp;v)Function - Swan</H3>

<P>Set the event type of event n to the type specified by v.</P>

<PRE><CODE>SetEventType(MyEvent, EVENT_TYPE_PRESSED);</CODE></PRE>

<H3>EventType(const int n)Value - Swan</H3>

<P>Read the event type of an event.</P>

<PRE><CODE>x = EventType(MyEvent);</CODE></PRE>

<H3>SetEventSrc(const int n, const int &amp;v)Function - Swan</H3>

<P>Set the event source of event n to the source specified by v.</P>

<PRE><CODE>SetEventSrc(MyEvent, EST_SENSOR_1);</CODE></PRE>

<P><B>Event SourceMeaning</B></P>

<P>EST_SENSOR_1sensor 1 source</P>

<P>EST_SENSOR_2sensor 2 source</P>

<P>EST_SENSOR_3sensor 3 source</P>

<P>EST_TIMER_1timer 1 source</P>

<P>EST_TIMER_2timer 2 source</P>

<P>EST_TIMER_3timer 3 source</P>

<P>EST_TIMER_4timer 4 source</P>

<P>EST_LAST_IR_MSGIR msg source</P>

<P>EST_COUNTER_1counter 1 source</P>

<P>EST_COUNTER_2counter 2 source</P>

<P>EST_COUNTER_3counter 3 source</P>

<P>EST_USER_EVENT_0user event source</P>

<P>EST_USER_EVENT_1user event source</P>

<P>EST_USER_EVENT_2user event source</P>

<P>EST_USER_EVENT_3user event source</P>

<P>EST_USER_EVENT_4user event source</P>

<P>EST_VIRTUAL_MOTORvirtual motor source</P>

<P>EST_VIRTUAL_SENSORvirtual sensor source</P>

<P>EST_WAIT_FOR_MSGIR msg source</P>

<P>EST_INFRARED_STATUSIR msg source</P>

<P>EST_SENSOR_UNUSEDsensor source</P>

<H3>EventSrc(const int n)Value - Swan</H3>

<P>Read the event source of an event.</P>

<PRE><CODE>x = EventSrc(MyEvent);</CODE></PRE>

<P>There are also constants for event states</P>

<P><B>Event SourceMeaning</B></P>

<P>ES_BELOW_LOWERbelow lower threshold</P>

<P>ES_BETWEENbetween lower and upper thresholds</P>

<P>ES_ABOVE_UPPERabove upper threshold</P>

<P>ES_UNDETERMINEDundetermined state</P>

<H3>SetEventCounts(const int n, const int &amp;v)Function - Swan</H3>

<P>Set the event count of event n to the count specified by v.</P>

<PRE><CODE>SetEventCounts(MyEvent, 10);</CODE></PRE>

<H3>EventCounts(const int n)Value - Swan</H3>

<P>Read the event counts of an event.</P>

<PRE><CODE>x = EventCounts(MyEvent);</CODE></PRE>

<H3>ResetMSTimer(const int n)Function - Swan</H3>

<P>Set the specified 1 ms timer back to zero.</P>

<PRE><CODE>ResetMSTimer(T1);</CODE></PRE>

<H3>MSTimer(const int n)Value - Swan</H3>

<P>Read the specified 1 ms timer value.</P>

<PRE><CODE>x = MSTimer(T1); // get the value of timer 1</CODE></PRE>

<H3>WaitMS(const int &amp;v)Function - Swan</H3>

<P>Wait for the specified number of milliseconds.</P>

<PRE><CODE>WaitMS(T1);</CODE></PRE>

<H3>System(const int n)Value - Swan</H3>

<P>Read the specified system value.</P>

<PRE><CODE>x = System(SYS_BATTERY_LEVEL); // get the system value</CODE></PRE>

<H3>SetSystem(const int n, const int &amp;v)Function - Swan</H3>

<P>Set the system item to the specified value.</P>

<P><CODE>SetSystem(</CODE>SYS_OPCODES_PER_TIMESLICE, 10<CODE>);</CODE></P>

<P><B>System ConstantsMeaning</B></P>

<P>SYS_BATTERY_LEVELbattery level</P>

<P>SYS_DEBUG_TASK_MODEdebug task mode</P>

<P>SYS_MEMORY_MAP_ADDRESSmemory map address</P>

<P>SYS_CURRENT_TASKcurrent task</P>

<P>SYS_SERIAL_LINK_STATUSserial link status</P>

<P>SYS_OPCODES_PER_TIMESLICEopcodes per timeslice</P>

<P>SYS_MOTOR_TRANSITION_DELAYmotor transition delay</P>

<P>SYS_SENSOR_REFRESH_RATEsensor refresh rate</P>

<P>SYS_EXPANDED_RC_MESSAGESexpanded remote control messages</P>

<P>SYS_LCD_REFRESH_RATELCD refresh rate</P>

<P>SYS_NO_POWER_DOWN_ON_ACpower down while on AC</P>

<P>SYS_DEFAULT_TASK_STACK_SIZEdefault task size</P>

<P>SYS_TASK_ACQUIRE_PRIORITYtask acquire priority</P>

<P>SYS_TRANSMITTER_RANGEtransmitter range</P>

<P>SYS_FLOAT_DURING_INACTIVE_PWMfloat motors during inactive PWM</P>

<P>SYS_ROT_ERRORS_COUNTrotation sensor errors count</P>

<P>SYS_ROT_DEBOUNCED_GLITCHESrotation sensor debounce glitches</P>

<P>SYS_PREAMBLE_SIZEpreamble size</P>

<P>SYS_UNSOLICITED_MESSAGEunsolicited messages</P>

<P>SYS_EXPANDED_SUBROUTINESexpanded subroutines</P>

<P>SYS_POWER_DOWN_DELAYpower down delay</P>

<P>SYS_WATCH_FORMATwatch format</P>

<P>SYS_SENSOR_MISSED_CONVERSIONSsensor missed conversions</P>

<P>SYS_IGNORE_MESSAGES_CPUignore messages CPU</P>

<P>SYS_COMM_ERRORS_TIMEOUTcount of timeout errors</P>

<P>SYS_COMM_ERRORS_PARITYcount of parity errors</P>

<P>SYS_COMM_ERRORS_FRAMINGcount of framing errors</P>

<P>SYS_COMM_ERRORS_OVERRUNcount of overrun errors</P>

<P>SYS_INTER_CHAR_TIMEOUTinter-character timeout</P>

<P>SYS_TASK_SCHEDULING_PRIORITYtask scheduling priority</P>

<P>SYS_VOLUMEvolume level</P>

<P>SYS_SOUND_PLAYINGsound playing state</P>

<P>SYS_PLAY_SOUNDSenable/disable sound playing</P>

<P>SYS_QUEUED_SOUND_COUNTcount of sounds waiting to be played</P>

<P>SYS_SENSOR_STARTUP_DELAYsensor startup delay</P>

<P>SYS_SENSOR_DELAY_CYCLESsensor delay cycles</P>

<P>SYS_SENSOR_REFRESH_STATEsensor refresh state</P>

<P>SYS_SENSOR_SCAN_COUNTsensor scan count</P>

<P>SYS_DATALOG_SIZEdatalog size</P>

<H3>ImmediateBatteryLevel()Value - Swan</H3>

<P>Read the immediate battery level.</P>

<PRE><CODE>x = ImmediateBatteryLevel();</CODE></PRE>

<H3>DebugTaskMode()Value - Swan</H3>

<P>Read the debug task mode.</P>

<PRE><CODE>x = DebugTaskMode();</CODE></PRE>

<H3>MemoryMapAddress()Value - Swan</H3>

<P>Read the memory map address.</P>

<PRE><CODE>x = MemoryMapAddress();</CODE></PRE>

<H3>CurrentTask()Value - Swan</H3>

<P>Read the current task number.</P>

<PRE><CODE>x = CurrentTask();</CODE></PRE>

<H3>SerialLinkStatus()Value - Swan</H3>

<P>Read the serial link status.</P>

<PRE><CODE>x = SerialLinkStatus();</CODE></PRE>

<P><B>Serial Link Status ConstantsMeaning</B></P>

<P>SLS_WAIT_FOR_MSGwaiting for message</P>

<P>SLS_RECEIVING_MSGreceiving message</P>

<P>SLS_TRANSMITTINGtransmitting</P>

<P>SLS_UNKNOWNunknown</P>

<H3>OpcodesPerTimeslice()Value - Swan</H3>

<P>Read the number of opcodes to execute per timeslice.</P>

<PRE><CODE>x = OpcodesPerTimeslice();</CODE></PRE>

<H3>SetOpcodesPerTimeslice(const int &amp;v)Function - Swan</H3>

<P>Set the system item to the specified value.</P>

<P><CODE>SetOpcodesPerTimeslice(</CODE>10<CODE>);</CODE></P>

<H3>MotorTransitionDelay()Value - Swan</H3>

<P>Read the number of milliseconds to delay when changing motor direction.</P>

<PRE><CODE>x = MotorTransitionDelay();</CODE></PRE>

<H3>SetMotorTransitionDelay(const int &amp;v)Function - Swan</H3>

<P>Set the motor transition delay to the specified value.</P>

<P><CODE>SetMotorTransitionDelay(</CODE>10<CODE>);</CODE></P>

<H3>SensorRefreshRate()Value - Swan</H3>

<P>Read the sensor refresh rate.</P>

<PRE><CODE>x = SensorRefreshRate();</CODE></PRE>

<H3>SetSensorRefreshRate(const int &amp;v)Function - Swan</H3>

<P>Set the sensor refresh rate to the specified value.</P>

<P><CODE>SetSensorRefreshRate(</CODE>10<CODE>);</CODE></P>

<H3>ExpandedRemoteMessages()Value - Swan</H3>

<P>Read a boolean value indicating whether or not to support expanded remote control messages.</P>

<PRE><CODE>x = ExpandedRemoteMessages(); // 0 or 1</CODE></PRE>

<H3>SetExpandedRemoteMessages(const int &amp;v)Function - Swan</H3>

<P>Enable or disable expanded remote control messages.</P>

<P><CODE>SetExpandedRemoteMessages(</CODE>false<CODE>);</CODE></P>

<H3>LCDRefreshRate()Value - Swan</H3>

<P>Read the LCD refresh rate.</P>

<PRE><CODE>x = LCDRefreshRate();</CODE></PRE>

<H3>SetLCDRefreshRate(const int &amp;v)Function - Swan</H3>

<P>Set the LCD refresh rate.</P>

<P><CODE>SetLCDRefreshRate(</CODE>10<CODE>);</CODE></P>

<H3>NoPowerDownOnAC()Value - Swan</H3>

<P>Read a boolean value specifying whether or not to power down while running on AC power.</P>

<PRE><CODE>x = NoPowerDownOnAC();</CODE></PRE>

<H3>SetNoPowerDownOnAC(const int &amp;v)Function - Swan</H3>

<P>Enable or disable power down while running on AC power.</P>

<P><CODE>SetNoPowerDownOnAC(</CODE>false<CODE>);</CODE></P>

<H3>DefaultStackSize()Value - Swan</H3>

<P>Read the default stack size.</P>

<PRE><CODE>x = DefaultStackSize();</CODE></PRE>

<H3>SetDefaultStackSize(const int &amp;v)Function - Swan</H3>

<P>Set the default stack size.</P>

<P><CODE>SetDefaultStackSize(</CODE>10<CODE>);</CODE></P>

<H3>TaskAcquirePriority()Value - Swan</H3>

<P>Read the task acquire priority level.</P>

<PRE><CODE>x = TaskAcquirePriority();</CODE></PRE>

<H3>SetTaskAcquirePriority(const int &amp;v)Function - Swan</H3>

<P>Set the task acquire priority level.</P>

<P><CODE>SetTaskAcquirePriority(</CODE>10<CODE>);</CODE></P>

<H3>TransmitterRange()Value - Swan</H3>

<P>Read the transmitter range value.</P>

<PRE><CODE>x = TransmitterRange();</CODE></PRE>

<H3>FloatDuringInactivePWM()Value - Swan</H3>

<P>Read a boolean value specifying whether or not to float motors during inactive pulse width modulation.</P>

<PRE><CODE>x = FloatDuringInactivePWM();</CODE></PRE>

<H3>SetFloatDuringInactivePWM(const int &amp;v)Function - Swan</H3>

<P>Enable or disable floating the motors during inactive pulse width modulation.</P>

<P><CODE>SetFloatDuringInactivePWM(</CODE>false<CODE>);</CODE></P>

<H3>RotErrorsCount()Value - Swan</H3>

<P>Read the rotation sensor errors count.</P>

<PRE><CODE>x = RotErrorsCount();</CODE></PRE>

<H3>RotDebouncedGlitches()Value - Swan</H3>

<P>Read the rotation sensor debounced glitches.</P>

<PRE><CODE>x = RotDebouncedGlitches();</CODE></PRE>

<H3>SystemPreambleSize()Value - Swan</H3>

<P>Read the system preamble size.</P>

<PRE><CODE>x = SystemPreambleSize();</CODE></PRE>

<H3>SetSystemPreambleSize(const int &amp;v)Function - Swan</H3>

<P>Set the system preamble size.</P>

<P><CODE>SetSystemPreambleSize(</CODE>10<CODE>);</CODE></P>

<H3>UnsolicitedMessages()Value - Swan</H3>

<P>Read a boolean value specifying whether or not to accept unsolicted messages.</P>

<PRE><CODE>x = UnsolicitedMessages();</CODE></PRE>

<H3>ExpandedSubroutines()Value - Swan</H3>

<P>Read a boolean value specifying whether or not to allow an expanded number of subroutines.</P>

<PRE><CODE>x = ExpandedSubroutines();</CODE></PRE>

<H3>SetExpandedSubroutines(const int &amp;v)Function - Swan</H3>

<P>Enable or disable support for an expanded number of subroutines.</P>

<P><CODE>SetExpandedSubroutines(</CODE>false<CODE>);</CODE></P>

<H3>PowerDownDelay()Value - Swan</H3>

<P>Read the power down delay.</P>

<PRE><CODE>x = PowerDownDelay();</CODE></PRE>

<H3>WatchFormat()Value - Swan</H3>

<P>Read the watch format.</P>

<PRE><CODE>x = WatchFormat();</CODE></PRE>

<H3>SetWatchFormat(const int &amp;v)Function - Swan</H3>

<P>Set the watch format.</P>

<P><CODE>SetWatchFormat(</CODE>10<CODE>);</CODE></P>

<P><B>Watch Format ConstantsMeaning</B></P>

<P>FMT_HHMMhours and minutes</P>

<P>FMT_MMSSminutes and seconds</P>

<P>FMT_MSSTENTHSminutes, seconds, and tenths of seconds</P>

<H3>MissedSensorADConversions()Value - Swan</H3>

<P>Read the number of missed sensor analog to digital conversions.</P>

<PRE><CODE>x = MissedSensorADConversions();</CODE></PRE>

<H3>IgnoreMessagesCPU()Value - Swan</H3>

<P>Read a boolean value specifying whether or not to ignore CPU messages.</P>

<PRE><CODE>x = IgnoreMessagesCPU();</CODE></PRE>

<H3>CommErrorsTimeout()Value - Swan</H3>

<P>Read the number of communication timeout errors.</P>

<PRE><CODE>x = CommErrorsTimeout();</CODE></PRE>

<H3>CommErrorsParity()Value - Swan</H3>

<P>Read the number of communication parity errors.</P>

<PRE><CODE>x = CommErrorsParity();</CODE></PRE>

<H3>CommErrorsFraming()Value - Swan</H3>

<P>Read the number of communication framing errors.</P>

<PRE><CODE>x = CommErrorsFraming();</CODE></PRE>

<H3>CommErrorsOverrun()Value - Swan</H3>

<P>Read the number of communication overrun errors.</P>

<PRE><CODE>x = CommErrorsOverrun();</CODE></PRE>

<H3>InterCharTimeout()Value - Swan</H3>

<P>Read the inter-character timeout value.</P>

<PRE><CODE>x = InterCharTimeout();</CODE></PRE>

<H3>SetInterCharTimeout(const int &amp;v)Function - Swan</H3>

<P>Set the inter-character timeout value.</P>

<P><CODE>SetInterCharTimeout(</CODE>10<CODE>);</CODE></P>

<H3>TaskSchedulingPriority()Value - Swan</H3>

<P>Read the task scheduling priority.</P>

<PRE><CODE>x = TaskSchedulingPriority();</CODE></PRE>

<H3>SetTaskSchedulingPriority(const int &amp;v)Function - Swan</H3>

<P>Set the task scheduling priority.</P>

<P><CODE>SetTaskSchedulingPriority(</CODE>10<CODE>);</CODE></P>

<H3>Volume()Value - Swan</H3>

<P>Read the system volume level.</P>

<PRE><CODE>x = Volume();</CODE></PRE>

<H3>SetVolume(const int &amp;v)Function - Swan</H3>

<P>Set the system volume level.  The maximum volume level is MAX_VOLUME.</P>

<P><CODE>SetVolume(</CODE>10<CODE>);</CODE></P>

<H3>SoundActive()Value - Swan</H3>

<P>Read a boolean value specifying whether or not a sound is currently playing.</P>

<PRE><CODE>x = SoundActive();</CODE></PRE>

<H3>PlaySounds()Value - Swan</H3>

<P>Read a boolean value specifying whether or not to allow sound playing.</P>

<PRE><CODE>x = PlaySounds();</CODE></PRE>

<H3>SetPlaySounds(const int &amp;v)Function - Swan</H3>

<P>Enable or disable support for playing sounds.</P>

<P><CODE>SetPlaySounds(</CODE>false<CODE>);</CODE></P>

<H3>QueuedSoundCount()Value - Swan</H3>

<P>Read the number of sounds currently waiting to be played.</P>

<PRE><CODE>x = QueuedSoundCount();</CODE></PRE>

<H3>SensorStartupDelay()Value - Swan</H3>

<P>Read the sensor startup delay.</P>

<PRE><CODE>x = SensorStartupDelay();</CODE></PRE>

<H3>SetSensorStartupDelay(const int &amp;v)Function - Swan</H3>

<P>Set the sensor startup delay.</P>

<P><CODE>SetSensorStartupDelay(</CODE>10<CODE>);</CODE></P>

<H3>SensorDelayCycles()Value - Swan</H3>

<P>Read the number of sensor delay cycles.</P>

<PRE><CODE>x = SensorDelayCycles();</CODE></PRE>

<H3>SensorRefreshState()Value - Swan</H3>

<P>Read the sensor refresh state.</P>

<PRE><CODE>x = SensorRefreshState();</CODE></PRE>

<H3>SensorScanCount()Value - Swan</H3>

<P>Read the sensor scan count.</P>

<PRE><CODE>x = SensorScanCount();</CODE></PRE>

<H3>DatalogSize()Value - Swan</H3>

<P>Read the datalog size.</P>

<PRE><CODE>x = DatalogSize();</CODE></PRE>

<H3>IntrinsicIndGlobal(const int n)Value - Swan</H3>

<P>Access the value of an intrinsic indirectly.</P>

<PRE><CODE>x = IntrinsicIndGlobal(15);</CODE></PRE>

<H3>GlobalVar(const int &amp;n)Value - Swan</H3>

<P>Read or write the value of a global variable (either directly or indirectly).</P>

<PRE><CODE>x = GlobalVar(y);</CODE></PRE>

<H3>StackAddress(const int task)Value - Swan</H3>

<P>Read the stack address of the specified task.</P>

<PRE><CODE>x = StackAddress(1);</CODE></PRE>

<H3>StackSize(const int task)Value - Swan</H3>

<P>Read the size of the stack for the specified task.</P>

<PRE><CODE>x = StackSize(1);</CODE></PRE>

<H3>ClearAll(const int &amp;v)Function - Swan</H3>

<P>Clear the specified items.  The constants can be added together to clear multiple items at once.</P>

<P><CODE>ClearAll(</CODE>CLR_TIMERS<CODE>);</CODE></P>

<P><B>ClearAll ConstantsMeaning</B></P>

<P>CLR_TIMERSclear all timers</P>

<P>CLR_INPUTSclear all inputs</P>

<P>CLR_VARIABLESclear all variables</P>

<P>CLR_TASK_STACKclear all task stacks</P>

<P>CLR_EVENTSclear all events</P>

<P>CLR_BREAKPOINTSclear all breakpoints</P>

<P>CLR_DATALOGclear the datalog</P>

<H3>BitSet(const int &amp;result, const int &amp;operand)Function - Swan</H3>

<P>Set the bit in the result specified by the operand.</P>

<P><CODE>BitSet(</CODE>x, 0x01<CODE>);</CODE></P>

<H3>BitClear(const int &amp;result, const int &amp;operand)Function - Swan</H3>

<P>Clear the bit in the result specified by the operand.</P>

<P><CODE>BitClear(</CODE>x, 0x01<CODE>);</CODE></P>

<H3>Negate(const int &amp;result, const int &amp;operand)Function - Swan</H3>

<P>Negate the bits in the result specified by the operand.</P>

<P><CODE>Negate(</CODE>x, 0x01<CODE>);</CODE></P>

</BODY>
</HTML>
