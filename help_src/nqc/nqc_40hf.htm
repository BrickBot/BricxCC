<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Expressions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="expressions">
</OBJECT>

<H2><I><A NAME="idh_nqc_expressions"></A>2.4 Expressions</I></H2>

<P>Earlier versions of NQC made a distinction between expressions and conditions. As of version 2.3, this distinction was eliminated: everything is an expression, and there are now conditional operators for expressions. This is similar to how C/C++ treats conditional operations.</P>

<P><I>Values</I> are the most primitive type of expressions. More complicated expressions are formed from values using various operators. The NQC language only has two built in kinds of values: numerical constants and variables. The RCX API defines other values corresponding to various RCX features such as sensors and timers.</P>

<P>Numerical constants in the RCX are represented as 16 bit signed integers. NQC internally uses 32 bit signed math for constant expression evaluation, then reduces to 16 bits when generating RCX code. Numeric constants can be written as either decimal (e.g. <CODE>123</CODE>) or hexadecimal (e.g. <CODE>0xABC</CODE>). Presently, there is very little range checking on constants, so using a value larger than expected may have unusual effects.</P>

<P>Two special values are predefined: <CODE>true</CODE> and <CODE>false</CODE>. The value of <CODE>false</CODE> is zero, while the value of <CODE>true</CODE> is only guaranteed to be non-zero. The same values hold for relational operators (e.g. <CODE>&lt;</CODE>): when the relation is false, the value is 0, otherwise the value is nonzero. </P>

<P>Values may be combined using operators. Several of the operators may only be used in evaluating constant expressions, which means that their operands must either be constants, or expressions involving nothing but constants. The operators are listed here in order of precedence (highest to lowest).</P>

<P><B>OperatorDescriptionAssociativityRestrictionExample</B></P>

<P>abs()Absolute valuen/aabs(x)</P>

<P>sign()Sign of operandn/asign(x)</P>

<P>++, --Increment, decrementleftvariables onlyx++ or ++x</P>

<P>-Unary minusright-x</P>

<P>~Bitwise negation (unary)rightconstant only~123</P>

<P>!Logical negationright!x</P>

<P>*, /, %Multiplication, division,moduloleftx * y</P>

<P>+, -Addition, subtractionleftx + y</P>

<P>&lt;&lt;, &gt;&gt;Left and right shiftleftshift is constant only123 &lt;&lt; 4</P>

<P>&lt;, &gt;,&lt;=, &gt;=relational operatorsleftx &lt; y</P>

<P>==, !=equal to, not equal toleftx == 1</P>

<P>&amp;Bitwise ANDleftx &amp; y</P>

<P>^Bitwise XORleft123 ^ 4</P>

<P>|Bitwise ORleftx | y</P>

<P>&amp;&amp;Logical ANDleftx &amp;&amp; y</P>

<P>||Logical ORleftx || y</P>

<P>? :conditional valuen/ax==1 ? y : z</P>

<P>Where needed, parentheses may be used to change the order of evaluation:</P>

<PRE><CODE>x = 2 + 3 * 4; // set x to 14
y = (2 + 3) * 4; // set y to 20</CODE></PRE>

</BODY>
</HTML>
