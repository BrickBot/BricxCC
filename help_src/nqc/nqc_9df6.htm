<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Counter</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="Counter">
</OBJECT>

<P><B><A NAME="idh_api_counter"></A>Counter(n)Value – RCX2, Scout, Spy</B></P>

<P>Return the current value of counter n. N must be 0 or 1 for Scout, 0-2 for RCX2, Swan and Spybotics.</P>

<PRE><CODE>x = Counter(1);</CODE></PRE>

<P>Counters are like very simple variables that can be incremented, decremented, and cleared. The Scout provides two counters (0 and 1), while RCX2, Swan and Spybotics provide three (0, 1, and 2). In the case of RCX2, Swan and Spybotics, these counters are overlapped with global storage locations 0-2, so if they are going to be used as counters, a <CODE>#pragma reserve</CODE> should be used to prevent NQC from using the storage location for a regular variable. For example, to use counter 1:</P>

<PRE><CODE>#pragma reserve 1</CODE></PRE>

</BODY>
</HTML>
