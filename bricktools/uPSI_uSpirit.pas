(*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * The Initial Developer of this code is John Hansen.
 * Portions created by John Hansen are Copyright (C) 2009 John Hansen.
 * All Rights Reserved.
 *
 *)
unit uPSI_uSpirit;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uSpirit = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TBrickComm(CL: TPSPascalCompiler);
procedure SIRegister_uSpirit(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_uSpirit_Routines(S: TPSExec);
procedure RIRegister_TBrickComm(CL: TPSRuntimeClassImporter);
procedure RIRegister_uSpirit(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   rcx_constants
  ,FantomSpirit 
  ,FantomDefs 
  ,uSpirit
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uSpirit]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TBrickComm(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TBrickComm') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TBRICKCOMM') do
  begin
    IsAbstract := True;
    RegisterMethod('Constructor Create( aType : byte; const aPort : string)');
    RegisterMethod('Function Open : boolean');
    RegisterMethod('Function Close : boolean');
    RegisterMethod('Function PlayTone( aFreq, aTime : word) : boolean');
    RegisterMethod('Function PlaySystemSound( aSnd : byte) : boolean');
    RegisterMethod('Function MotorsOn( aMotorList : Byte) : boolean');
    RegisterMethod('Function MotorsOff( aMotorList : Byte) : boolean');
    RegisterMethod('Function MotorsFloat( aMotorList : Byte) : boolean');
    RegisterMethod('Function SetFwd( aMotorList : Byte) : boolean');
    RegisterMethod('Function SetRwd( aMotorList : Byte) : boolean');
    RegisterMethod('Function SwitchDirection( aMotorList : Byte) : boolean');
    RegisterMethod('Function SetMotorPower( aMotorList : Byte; aSrc, aNum : integer) : boolean');
    RegisterMethod('Function SetSensorType( aNum, aType : integer) : boolean');
    RegisterMethod('Function SetSensorMode( aNum, aMode, aSlope : integer) : boolean');
    RegisterMethod('Function ClearSensorValue( aNum : integer) : boolean');
    RegisterMethod('Function TowerExists : boolean');
    RegisterMethod('Function Ping : boolean');
    RegisterMethod('Function PrepareBrick : boolean');
    RegisterMethod('Function UnlockFirmware : boolean');
    RegisterMethod('Function UnlockBrick : string');
    RegisterMethod('Function DownloadMemoryMap : TStrings');
    RegisterMethod('Function MonitorIR( aSeconds : integer) : TStrings');
    RegisterMethod('Function PowerDownTime( aTime : integer) : boolean');
    RegisterMethod('Function BatteryLevel : integer');
    RegisterMethod('Function BrickAlive : boolean');
    RegisterMethod('Function Shutdown : boolean');
    RegisterMethod('Function Sleep( aVal : integer) : boolean');
    RegisterMethod('Function Version( var rom : Cardinal; var ram : Cardinal) : boolean');
    RegisterMethod('Function TransmitPower( aLevel : TTransmitLevel) : boolean');
    RegisterMethod('Function Poll( aSrc, aNum : integer) : integer');
    RegisterMethod('Function StartTask( aTask : integer) : boolean');
    RegisterMethod('Function StopTask( aTask : integer) : boolean');
    RegisterMethod('Function StopAllTasks : boolean');
    RegisterMethod('Function DeleteTask( aTask : integer) : boolean');
    RegisterMethod('Function DeleteAllTasks : boolean');
    RegisterMethod('Function DeleteSub( aSub : integer) : boolean');
    RegisterMethod('Function DeleteAllSubs : boolean');
    RegisterMethod('Function ClearTimer( aNum : integer) : boolean');
    RegisterMethod('Function ClearMemory : boolean');
    RegisterMethod('Function GetOutputStatus( aOut : integer) : integer');
    RegisterMethod('Function GetVariableValue( aVar : integer) : integer');
    RegisterMethod('Function GetInputValue( aIn : integer) : integer');
    RegisterMethod('Function GetMessageValue( aNum : integer) : integer');
    RegisterMethod('Function GetTimerValue( aNum : integer) : integer');
    RegisterMethod('Function GetCounterValue( aNum : integer) : integer');
    RegisterMethod('Function SetVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function SumVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function SubVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function DivVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function MulVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function SgnVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function AbsVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function AndVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function OrVar( aVar, aSrc, aNum : integer) : boolean');
    RegisterMethod('Function SendRawCommand( aCmd : string; bRetry : boolean) : string');
    RegisterMethod('Function SendRemoteStr( aEvent : string; aRepeat : integer) : boolean');
    RegisterMethod('Function SendRemote( aEvent : Word; aRepeat : integer) : boolean');
    RegisterMethod('Function SendMessage( aMsg : integer) : boolean');
    RegisterMethod('Function SelectProgram( aProg : integer) : boolean');
    RegisterMethod('Function SelectDisplay( aSrc, aNumber : integer) : boolean');
    RegisterMethod('Function SetWatchHHMM( aHrs, aMins : integer) : boolean');
    RegisterMethod('Function SetWatch( aTime : string) : boolean');
    RegisterMethod('Function DownloadFirmware( aFile : string; bFast, bComp, bUnlock : boolean) : boolean');
    RegisterMethod('Function SetDatalog( aSize : integer) : boolean');
    RegisterMethod('Function DatalogNext( aSrc, aNum : integer) : boolean');
    RegisterMethod('Function UploadPartialDatalog( aFrom, aSize : integer) : TStrings');
    RegisterMethod('Function UploadDatalog( bVerbose : boolean) : TStrings');
    RegisterMethod('Function Drive( aLeft, aRight : integer) : boolean');
    RegisterMethod('Function ClearTachoCounter( aMotorList : Byte) : boolean');
    RegisterMethod('Function OnWait( aMotorList : Byte; aNum : integer; aTime : Byte) : boolean');
    RegisterMethod('Function OnWaitDifferent( aMotorList : Byte; aNum0, aNum1, aNum2 : integer; aTime : Byte) : boolean');
    RegisterMethod('Function ScoutNum( aVal : integer) : boolean');
    RegisterMethod('Function Scout( bPower : boolean) : boolean');
    RegisterMethod('Function CalibrateLightSensor : boolean');
    RegisterMethod('Function SetFeedback( src, val : integer) : boolean');
    RegisterMethod('Function SetLightSensorUpperThreshold( src : TLSSource; val : TThresholdValue) : boolean');
    RegisterMethod('Function SetLightSensorLowerThreshold( src : TLSSource; val : TThresholdValue) : boolean');
    RegisterMethod('Function SetLightSensorHysteresis( src : TLSSource; val : TThresholdValue) : boolean');
    RegisterMethod('Function SetLightSensorBlinkTime( src : TLSSource; val : TBlinkTimeValue) : boolean');
    RegisterMethod('Function SetTimerLimit( num : TTimerNumber; src : TTCSource; val : integer) : boolean');
    RegisterMethod('Function SetCounterLimit( num : TCounterNumber; src : TTCSource; val : integer) : boolean');
    RegisterMethod('Function ScoutRules( motion : TScoutMotion; touch : TScoutTouch; light : TScoutLight; time : TScoutScale; fx : TScoutEffects) : boolean');
    RegisterMethod('Function ScoutSound( bSoundEnable : boolean; bSoundOff : boolean; aNum : TSoundSetNumber) : boolean');
    RegisterMethod('Function SendVLL( aSrc, aNum : integer) : boolean');
    RegisterMethod('Function SetLight( bOn : boolean) : boolean');
    RegisterMethod('Function PollMemory( address : Integer; size : Integer) : TStrings');
    RegisterMethod('Function SetGlobalOutput( motors : TMotorsNum; action : TGlobalOutAction) : boolean');
    RegisterMethod('Function SetGlobalDirection( motors : TMotorsNum; action : TGlobalDirAction) : boolean');
    RegisterMethod('Function SetMaxPower( motors : TMotorsNum; src, num : integer) : boolean');
    RegisterMethod('Function IncCounter( num : TCounterNumber) : boolean');
    RegisterMethod('Function DecCounter( num : TCounterNumber) : boolean');
    RegisterMethod('Function ClearCounter( num : TCounterNumber) : boolean');
    RegisterMethod('Function ClearSound : boolean');
    RegisterMethod('Function UnmuteSound : boolean');
    RegisterMethod('Function SendUARTData( start, size : integer) : boolean');
    RegisterMethod('Function SetEvent( enum, snum, etype : integer) : boolean');
    RegisterMethod('Function CalibrateEvent( enum, upper, lower, hysteresis : integer) : boolean');
    RegisterMethod('Function ClearAllEvents : boolean');
    RegisterMethod('Function SetSourceValue( aDestSrc, aDestVal, aOrigSrc : Byte; aOrigVal : Smallint) : boolean');
    RegisterMethod('Function MuteSound : boolean');
    RegisterMethod('Function ViewSourceValue( prec, src, value : integer) : boolean');
    RegisterMethod('Function PollEEPROM( block : Integer) : TStrings');
    RegisterMethod('Function NXTStartProgram( const filename : string) : boolean');
    RegisterMethod('Function NXTStopProgram : boolean');
    RegisterMethod('Function NXTPlaySoundFile( const filename : string; bLoop : boolean) : boolean');
    RegisterMethod('Function GetNXTOutputState( const port : byte; var power : integer; var mode, regmode : byte; var turnratio : integer; var runstate : byte; var tacholimit : cardinal; var tachocount, blocktachocount, rotationcount : longint) : boolean');
    RegisterMethod('Function SetNXTOutputState( const port : byte; const power : integer; const mode, regmode : byte; const turnratio : integer; const runstate : byte; const tacholimit : cardinal) : boolean');
    RegisterMethod('Function GetNXTInputValues( const port : byte; var valid, calibrated : boolean; var stype, smode : byte; var raw, normalized : word; var scaled, calvalue : smallint) : boolean');
    RegisterMethod('Function SetNXTInputMode( const port, stype, smode : byte) : boolean');
    RegisterMethod('Function NXTResetInputScaledValue( const port : byte) : boolean');
    RegisterMethod('Function NXTResetOutputPosition( const port : byte; const Relative : boolean) : boolean');
    RegisterMethod('Function NXTMessageWrite( const inbox : byte; const msg : string) : boolean');
    RegisterMethod('Function NXTKeepAlive( var time : cardinal; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTLSGetStatus( port : byte; var bytesReady : byte) : boolean');
    RegisterMethod('Function NXTGetCurrentProgramName( var name : string) : boolean');
    RegisterMethod('Function NXTGetButtonState( const idx : byte; const reset : boolean; var pressed : boolean; var count : byte) : boolean');
    RegisterMethod('Function NXTMessageRead( const remote, local : byte; const remove : boolean; var Msg : NXTMessage) : boolean');
    RegisterMethod('Function NXTSetPropDebugging( const debugging : boolean; const pauseClump : byte; const pausePC : Word) : boolean');
    RegisterMethod('Function NXTGetPropDebugging( var debugging : boolean; var pauseClump : byte; var pausePC : Word) : boolean');
    RegisterMethod('Function NXTSetVMState( const state : byte) : boolean');
    RegisterMethod('Function NXTSetVMStateEx( var state : byte; var clump : byte; var pc : word) : boolean');
    RegisterMethod('Function NXTGetVMState( var state : byte; var clump : byte; var pc : word) : boolean');
    RegisterMethod('Function NXTOpenRead( const filename : string; var handle : FantomHandle; var size : cardinal) : boolean');
    RegisterMethod('Function NXTOpenWrite( const filename : string; const size : cardinal; var handle : FantomHandle) : boolean');
    RegisterMethod('Function NXTRead( var handle : FantomHandle; var count : word; var buffer : NXTDataBuffer) : boolean');
    RegisterMethod('Function NXTWrite( var handle : FantomHandle; const buffer : NXTDataBuffer; var count : word; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTCloseFile( var handle : FantomHandle; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTDeleteFile( var filename : string; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTFindFirstFile( var filename : string; var IterHandle : FantomHandle; var filesize, availsize : cardinal) : boolean');
    RegisterMethod('Function NXTFindNextFile( var IterHandle : FantomHandle; var filename : string; var filesize, availsize : cardinal) : boolean');
    RegisterMethod('Function NXTFindClose( var IterHandle : FantomHandle) : boolean');
    RegisterMethod('Function NXTGetVersions( var protmin, protmaj, firmmin, firmmaj : byte) : boolean');
    RegisterMethod('function NXTFirmwareVersion : word');
    RegisterMethod('function NXTInstalledFirmware : TInstalledFirmware');
    RegisterMethod('Function NXTOpenWriteLinear( const filename : string; const size : cardinal; var handle : FantomHandle) : boolean');
    RegisterMethod('Function NXTOpenReadLinear( const filename : string; var handle : FantomHandle; var size : cardinal) : boolean');
    RegisterMethod('Function NXTOpenWriteData( const filename : string; const size : cardinal; var handle : FantomHandle) : boolean');
    RegisterMethod('Function NXTOpenAppendData( const filename : string; var size : cardinal; var handle : FantomHandle) : boolean');
    RegisterMethod('Function NXTCloseModuleHandle( var handle : FantomHandle; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTBootCommand( const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTSetBrickName( const name : string; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTGetBrickName : string');
    RegisterMethod('Function NXTGetDeviceInfo( var name : string; var BTAddress : string; var BTSignal : Cardinal; var memFree : Cardinal) : boolean');
    RegisterMethod('Function NXTFreeMemory : integer');
    RegisterMethod('Function NXTDeleteUserFlash( const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTBTFactoryReset( const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTPollCommandLen( const bufNum : byte; var count : byte) : boolean');
    RegisterMethod('Function NXTPollCommand( const bufNum : byte; var count : byte; var buffer : NXTDataBuffer) : boolean');
    RegisterMethod('Function NXTWriteIOMap( var ModID : Cardinal; const Offset : Word; var count : Word; const buffer : NXTDataBuffer; chkResponse : Boolean) : boolean');
    RegisterMethod('Function NXTReadIOMap( var ModID : Cardinal; const Offset : Word; var count : Word; var buffer : NXTDataBuffer) : boolean');
    RegisterMethod('Function NXTFindFirstModule( var ModName : string; var Handle : FantomHandle; var ModID, ModSize : Cardinal; var IOMapSize : Word) : boolean');
    RegisterMethod('Function NXTFindNextModule( var Handle : FantomHandle; var ModName : string; var ModID, ModSize : Cardinal; var IOMapSize : Word) : boolean');
    RegisterMethod('Function NXTRenameFile( const old, new : string; const chkResponse : boolean) : boolean');
    RegisterMethod('Function NXTDownloadFile( const filename : string; const filetype : TNXTFileType) : boolean');
    RegisterMethod('Function NXTDownloadStream( aStream : TStream; const dest : string; const filetype : TNXTFileType) : boolean');
    RegisterMethod('Function NXTUploadFile( const filename : string; const dir : string) : boolean');
    RegisterMethod('Function NXTUploadFileToStream( const filename : string; aStream : TStream) : boolean');
    RegisterMethod('Function NXTListFiles( const searchPattern : string; Files : TStrings) : boolean');
    RegisterMethod('Function NXTListModules( const searchPattern : string; Modules : TStrings) : boolean');
    RegisterMethod('Function NXTListBricks( Bricks : TStrings) : boolean');
    RegisterMethod('Procedure NXTInitializeResourceNames');
    RegisterMethod('Procedure NXTUpdateResourceNames');
    RegisterMethod('Function NXTDefragmentFlash : Boolean');
    RegisterProperty('EEPROM', 'Byte Byte', iptrw);
    RegisterProperty('EEPROMBlocks', 'EEPROMBlock Integer', iptr);
    RegisterProperty('NXTLowSpeed', 'NXTLSBlock byte', iptrw);
    RegisterProperty('IsOpen', 'boolean', iptr);
    RegisterProperty('FastMode', 'boolean', iptrw);
    RegisterProperty('UseBluetooth', 'boolean', iptrw);
    RegisterProperty('BluetoothName', 'string', iptrw);
    RegisterProperty('BluetoothSearchTimeout', 'Cardinal', iptrw);
    RegisterProperty('Quiet', 'Boolean', iptrw);
    RegisterProperty('BrickType', 'byte', iptrw);
    RegisterProperty('Port', 'string', iptrw);
    RegisterProperty('PortName', 'string', iptr);
    RegisterProperty('NicePortName', 'string', iptr);
    RegisterProperty('FullPortName', 'string', iptr);
    RegisterProperty('BrickTypeName', 'string', iptr);
    RegisterProperty('RxTimeout', 'Word', iptrw);
    RegisterProperty('VerboseMode', 'boolean', iptrw);
    RegisterProperty('AutoClose', 'boolean', iptrw);
    RegisterProperty('DataLog', 'TStrings', iptr);
    RegisterProperty('MemoryMap', 'TStrings', iptr);
    RegisterProperty('MemoryData', 'TStrings', iptr);
    RegisterProperty('TowerExistsSleep', 'Word', iptrw);
    RegisterProperty('LinkLog', 'String', iptr);
    RegisterProperty('RCXFirmwareChunkSize', 'Integer', iptrw);
    RegisterProperty('DownloadWaitTime', 'Integer', iptrw);
    RegisterProperty('OmitHeader', 'Boolean', iptrw);
    RegisterProperty('OnDownloadStart', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDownloadDone', 'TNotifyEvent', iptrw);
    RegisterProperty('OnDownloadStatus', 'TDownloadStatusEvent', iptrw);
    RegisterProperty('OnOpenStateChanged', 'TNotifyEvent', iptrw);
    RegisterProperty('OnGetVarInfoByID', 'TGetVarInfoByIDEvent', iptrw);
    RegisterProperty('OnGetVarInfoByName', 'TGetVarInfoByNameEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uSpirit(CL: TPSPascalCompiler);
begin
  CL.AddConstantN('MAX_COMPORT','LongInt').SetInt( 8);
  CL.AddConstantN('MAX_USBPORT','LongInt').SetInt( MAX_COMPORT + 4);
  CL.AddTypeS('NXTLSBlock', 'record TXCount : byte; RXCount : byte; Data : array[0..15] of Byte; end;');
  CL.AddTypeS('NXTMessage', 'record Inbox : byte; Size : byte; Data : array[0..58] of Byte; end;');
  CL.AddTypeS('NXTDataBuffer', 'record Data : array[0..63] of Byte; end;');
  CL.AddTypeS('TDownloadStatusEvent', 'Procedure ( Sender : TObject; cur, total : Integer; var Abort : boolean)');
  CL.AddTypeS('TGetVarInfoByIDEvent', 'Procedure ( Sender : TObject; const ID : integer; var offset, size, vartype : integer)');
  CL.AddTypeS('TGetVarInfoByNameEvent', 'Procedure ( Sender : TObject; const name : string; var offset, size, vartype : integer)');
  CL.AddTypeS('EEPROMBlock', 'record Data : array[0..15] of Byte; end;');
  CL.AddTypeS('TNXTFileType', '( nftProgram, nftGraphics, nftSound, nftData, nftOther, nftFirmware )');
  CL.AddTypeS('TTransmitLevel', '( tlNear, tlFar )');
  CL.AddTypeS('TLSSource', '( lsVariable, lsError, lsConstant )');
  CL.AddTypeS('TThresholdValue', 'Integer');
  CL.AddTypeS('TBlinkTimeValue', 'Integer');
  CL.AddTypeS('TTimerNumber', 'Integer');
  CL.AddTypeS('TCounterNumber', 'Integer');
  CL.AddTypeS('TTCSource', '( tcVariable, tcError1, tcConstant, tcError2, tcRandom )');
  CL.AddTypeS('TScoutMotion', '( smNone, smForward, smZigZag, smCircleRight, smCircleLeft, smLoopA, smLoopB, smLoopAB )');
  CL.AddTypeS('TScoutTouch', '( stIgnore, stReverse, stAvoid, stWaitFor, stBrake )');
  CL.AddTypeS('TScoutLight', '( slIgnore, slSeekLight, slSeekDark, slAvoid, slWaitFor, slBrake )');
  CL.AddTypeS('TScoutScale', '( ssShort, ssMedium, ssLong )');
  CL.AddTypeS('TScoutEffects', '( seNone, seBug, seAlarm, seRandom, seScience )');
  CL.AddTypeS('TSoundSetNumber', 'Integer');
  CL.AddTypeS('TGlobalOutAction', '( goaFloat, goaOff, goaOn )');
  CL.AddTypeS('TGlobalDirAction', '( gdaBackward, gdaSwitch, gdaForward )');
  CL.AddTypeS('TMotorsNum', 'Integer');
  CL.AddTypeS('TInstalledFirmware', ' (ifUnknown, ifStandard, ifEnhanced )');
  SIRegister_TBrickComm(CL);
  CL.AddDelphiFunction('Function NameToNXTFileType( name : string) : TNXTFileType');
  CL.AddDelphiFunction('Function MakeValidNXTFilename( const filename : string) : string');
  CL.AddDelphiFunction('Function GetInitFilename : string');
  CL.AddDelphiFunction('Function FantomAPIAvailable : boolean');
  CL.AddDelphiFunction('Procedure LoadNXTPorts( aStrings : TStrings)');
  CL.AddDelphiFunction('Function BytesToCardinal( b1 : byte; b2 : byte; b3 : byte; b4 : Byte) : Cardinal');
  CL.AddDelphiFunction('Function InstalledFirmwareAsString(const ifw : TInstalledFirmware) : string');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TBrickCommOnGetVarInfoByName_W(Self: TBrickComm; const T: TGetVarInfoByNameEvent);
begin Self.OnGetVarInfoByName := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnGetVarInfoByName_R(Self: TBrickComm; var T: TGetVarInfoByNameEvent);
begin T := Self.OnGetVarInfoByName; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnGetVarInfoByID_W(Self: TBrickComm; const T: TGetVarInfoByIDEvent);
begin Self.OnGetVarInfoByID := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnGetVarInfoByID_R(Self: TBrickComm; var T: TGetVarInfoByIDEvent);
begin T := Self.OnGetVarInfoByID; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnOpenStateChanged_W(Self: TBrickComm; const T: TNotifyEvent);
begin Self.OnOpenStateChanged := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnOpenStateChanged_R(Self: TBrickComm; var T: TNotifyEvent);
begin T := Self.OnOpenStateChanged; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnDownloadStatus_W(Self: TBrickComm; const T: TDownloadStatusEvent);
begin Self.OnDownloadStatus := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnDownloadStatus_R(Self: TBrickComm; var T: TDownloadStatusEvent);
begin T := Self.OnDownloadStatus; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnDownloadDone_W(Self: TBrickComm; const T: TNotifyEvent);
begin Self.OnDownloadDone := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnDownloadDone_R(Self: TBrickComm; var T: TNotifyEvent);
begin T := Self.OnDownloadDone; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnDownloadStart_W(Self: TBrickComm; const T: TNotifyEvent);
begin Self.OnDownloadStart := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOnDownloadStart_R(Self: TBrickComm; var T: TNotifyEvent);
begin T := Self.OnDownloadStart; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOmitHeader_W(Self: TBrickComm; const T: Boolean);
begin Self.OmitHeader := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommOmitHeader_R(Self: TBrickComm; var T: Boolean);
begin T := Self.OmitHeader; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommDownloadWaitTime_W(Self: TBrickComm; const T: Integer);
begin Self.DownloadWaitTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommDownloadWaitTime_R(Self: TBrickComm; var T: Integer);
begin T := Self.DownloadWaitTime; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommRCXFirmwareChunkSize_W(Self: TBrickComm; const T: Integer);
begin Self.RCXFirmwareChunkSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommRCXFirmwareChunkSize_R(Self: TBrickComm; var T: Integer);
begin T := Self.RCXFirmwareChunkSize; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommLinkLog_R(Self: TBrickComm; var T: String);
begin T := Self.LinkLog; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommTowerExistsSleep_W(Self: TBrickComm; const T: Word);
begin Self.TowerExistsSleep := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommTowerExistsSleep_R(Self: TBrickComm; var T: Word);
begin T := Self.TowerExistsSleep; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommMemoryData_R(Self: TBrickComm; var T: TStrings);
begin T := Self.MemoryData; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommMemoryMap_R(Self: TBrickComm; var T: TStrings);
begin T := Self.MemoryMap; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommDataLog_R(Self: TBrickComm; var T: TStrings);
begin T := Self.DataLog; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommAutoClose_W(Self: TBrickComm; const T: boolean);
begin Self.AutoClose := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommAutoClose_R(Self: TBrickComm; var T: boolean);
begin T := Self.AutoClose; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommVerboseMode_W(Self: TBrickComm; const T: boolean);
begin Self.VerboseMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommVerboseMode_R(Self: TBrickComm; var T: boolean);
begin T := Self.VerboseMode; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommRxTimeout_W(Self: TBrickComm; const T: Word);
begin Self.RxTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommRxTimeout_R(Self: TBrickComm; var T: Word);
begin T := Self.RxTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBrickTypeName_R(Self: TBrickComm; var T: string);
begin T := Self.BrickTypeName; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommFullPortName_R(Self: TBrickComm; var T: string);
begin T := Self.FullPortName; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommNicePortName_R(Self: TBrickComm; var T: string);
begin T := Self.NicePortName; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommPortName_R(Self: TBrickComm; var T: string);
begin T := Self.PortName; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommPort_W(Self: TBrickComm; const T: string);
begin Self.Port := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommPort_R(Self: TBrickComm; var T: string);
begin T := Self.Port; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBrickType_W(Self: TBrickComm; const T: byte);
begin Self.BrickType := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBrickType_R(Self: TBrickComm; var T: byte);
begin T := Self.BrickType; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommQuiet_W(Self: TBrickComm; const T: Boolean);
begin Self.Quiet := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommQuiet_R(Self: TBrickComm; var T: Boolean);
begin T := Self.Quiet; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBluetoothSearchTimeout_W(Self: TBrickComm; const T: Cardinal);
begin Self.BluetoothSearchTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBluetoothSearchTimeout_R(Self: TBrickComm; var T: Cardinal);
begin T := Self.BluetoothSearchTimeout; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBluetoothName_W(Self: TBrickComm; const T: string);
begin Self.BluetoothName := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommBluetoothName_R(Self: TBrickComm; var T: string);
begin T := Self.BluetoothName; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommUseBluetooth_W(Self: TBrickComm; const T: boolean);
begin Self.UseBluetooth := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommUseBluetooth_R(Self: TBrickComm; var T: boolean);
begin T := Self.UseBluetooth; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommFastMode_W(Self: TBrickComm; const T: boolean);
begin Self.FastMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommFastMode_R(Self: TBrickComm; var T: boolean);
begin T := Self.FastMode; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommIsOpen_R(Self: TBrickComm; var T: boolean);
begin T := Self.IsOpen; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommNXTLowSpeed_W(Self: TBrickComm; const T: NXTLSBlock; const t1: byte);
begin Self.NXTLowSpeed[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommNXTLowSpeed_R(Self: TBrickComm; var T: NXTLSBlock; const t1: byte);
begin T := Self.NXTLowSpeed[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommEEPROMBlocks_R(Self: TBrickComm; var T: EEPROMBlock; const t1: Integer);
begin T := Self.EEPROMBlocks[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommEEPROM_W(Self: TBrickComm; const T: Byte; const t1: Byte);
begin Self.EEPROM[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TBrickCommEEPROM_R(Self: TBrickComm; var T: Byte; const t1: Byte);
begin T := Self.EEPROM[t1]; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uSpirit_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@NameToNXTFileType, 'NameToNXTFileType', cdRegister);
 S.RegisterDelphiFunction(@MakeValidNXTFilename, 'MakeValidNXTFilename', cdRegister);
 S.RegisterDelphiFunction(@GetInitFilename, 'GetInitFilename', cdRegister);
 S.RegisterDelphiFunction(@FantomAPIAvailable, 'FantomAPIAvailable', cdRegister);
 S.RegisterDelphiFunction(@LoadNXTPorts, 'LoadNXTPorts', cdRegister);
 S.RegisterDelphiFunction(@BytesToCardinal, 'BytesToCardinal', cdRegister);
 S.RegisterDelphiFunction(@InstalledFirmwareAsString, 'InstalledFirmwareAsString', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBrickComm(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBrickComm) do
  begin
    RegisterVirtualConstructor(@TBrickComm.Create, 'Create');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Open, 'Open');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Close, 'Close');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.PlayTone, 'PlayTone');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.PlaySystemSound, 'PlaySystemSound');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.MotorsOn, 'MotorsOn');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.MotorsOff, 'MotorsOff');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.MotorsFloat, 'MotorsFloat');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetFwd, 'SetFwd');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetRwd, 'SetRwd');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SwitchDirection, 'SwitchDirection');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetMotorPower, 'SetMotorPower');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetSensorType, 'SetSensorType');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetSensorMode, 'SetSensorMode');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearSensorValue, 'ClearSensorValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.TowerExists, 'TowerExists');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Ping, 'Ping');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.PrepareBrick, 'PrepareBrick');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.UnlockFirmware, 'UnlockFirmware');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.UnlockBrick, 'UnlockBrick');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DownloadMemoryMap, 'DownloadMemoryMap');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.MonitorIR, 'MonitorIR');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.PowerDownTime, 'PowerDownTime');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.BatteryLevel, 'BatteryLevel');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.BrickAlive, 'BrickAlive');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Shutdown, 'Shutdown');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Sleep, 'Sleep');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Version, 'Version');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.TransmitPower, 'TransmitPower');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Poll, 'Poll');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.StartTask, 'StartTask');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.StopTask, 'StopTask');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.StopAllTasks, 'StopAllTasks');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DeleteTask, 'DeleteTask');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DeleteAllTasks, 'DeleteAllTasks');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DeleteSub, 'DeleteSub');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DeleteAllSubs, 'DeleteAllSubs');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearTimer, 'ClearTimer');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearMemory, 'ClearMemory');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetOutputStatus, 'GetOutputStatus');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetVariableValue, 'GetVariableValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetInputValue, 'GetInputValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetMessageValue, 'GetMessageValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetTimerValue, 'GetTimerValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetCounterValue, 'GetCounterValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetVar, 'SetVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SumVar, 'SumVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SubVar, 'SubVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DivVar, 'DivVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.MulVar, 'MulVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SgnVar, 'SgnVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.AbsVar, 'AbsVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.AndVar, 'AndVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.OrVar, 'OrVar');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SendRawCommand, 'SendRawCommand');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SendRemoteStr, 'SendRemoteStr');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SendRemote, 'SendRemote');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SendMessage, 'SendMessage');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SelectProgram, 'SelectProgram');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SelectDisplay, 'SelectDisplay');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetWatchHHMM, 'SetWatchHHMM');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetWatch, 'SetWatch');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DownloadFirmware, 'DownloadFirmware');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetDatalog, 'SetDatalog');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DatalogNext, 'DatalogNext');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.UploadPartialDatalog, 'UploadPartialDatalog');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.UploadDatalog, 'UploadDatalog');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Drive, 'Drive');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearTachoCounter, 'ClearTachoCounter');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.OnWait, 'OnWait');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.OnWaitDifferent, 'OnWaitDifferent');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ScoutNum, 'ScoutNum');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.Scout, 'Scout');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.CalibrateLightSensor, 'CalibrateLightSensor');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetFeedback, 'SetFeedback');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetLightSensorUpperThreshold, 'SetLightSensorUpperThreshold');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetLightSensorLowerThreshold, 'SetLightSensorLowerThreshold');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetLightSensorHysteresis, 'SetLightSensorHysteresis');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetLightSensorBlinkTime, 'SetLightSensorBlinkTime');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetTimerLimit, 'SetTimerLimit');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetCounterLimit, 'SetCounterLimit');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ScoutRules, 'ScoutRules');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ScoutSound, 'ScoutSound');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SendVLL, 'SendVLL');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetLight, 'SetLight');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.PollMemory, 'PollMemory');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetGlobalOutput, 'SetGlobalOutput');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetGlobalDirection, 'SetGlobalDirection');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetMaxPower, 'SetMaxPower');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.IncCounter, 'IncCounter');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.DecCounter, 'DecCounter');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearCounter, 'ClearCounter');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearSound, 'ClearSound');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.UnmuteSound, 'UnmuteSound');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SendUARTData, 'SendUARTData');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetEvent, 'SetEvent');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.CalibrateEvent, 'CalibrateEvent');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ClearAllEvents, 'ClearAllEvents');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetSourceValue, 'SetSourceValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.MuteSound, 'MuteSound');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.ViewSourceValue, 'ViewSourceValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.PollEEPROM, 'PollEEPROM');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTStartProgram, 'NXTStartProgram');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTStopProgram, 'NXTStopProgram');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTPlaySoundFile, 'NXTPlaySoundFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetNXTOutputState, 'GetNXTOutputState');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetNXTOutputState, 'SetNXTOutputState');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.GetNXTInputValues, 'GetNXTInputValues');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.SetNXTInputMode, 'SetNXTInputMode');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTResetInputScaledValue, 'NXTResetInputScaledValue');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTResetOutputPosition, 'NXTResetOutputPosition');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTMessageWrite, 'NXTMessageWrite');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTKeepAlive, 'NXTKeepAlive');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTLSGetStatus, 'NXTLSGetStatus');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTGetCurrentProgramName, 'NXTGetCurrentProgramName');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTGetButtonState, 'NXTGetButtonState');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTMessageRead, 'NXTMessageRead');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTSetPropDebugging, 'NXTSetPropDebugging');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTGetPropDebugging, 'NXTGetPropDebugging');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTSetVMState, 'NXTSetVMState');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTSetVMStateEx, 'NXTSetVMStateEx');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTGetVMState, 'NXTGetVMState');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTOpenRead, 'NXTOpenRead');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTOpenWrite, 'NXTOpenWrite');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTRead, 'NXTRead');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTWrite, 'NXTWrite');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTCloseFile, 'NXTCloseFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTDeleteFile, 'NXTDeleteFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTFindFirstFile, 'NXTFindFirstFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTFindNextFile, 'NXTFindNextFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTFindClose, 'NXTFindClose');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTGetVersions, 'NXTGetVersions');
    RegisterMethod(@TBrickComm.NXTFirmwareVersion, 'NXTFirmwareVersion');
    RegisterMethod(@TBrickComm.NXTInstalledFirmware, 'NXTInstalledFirmware');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTOpenWriteLinear, 'NXTOpenWriteLinear');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTOpenReadLinear, 'NXTOpenReadLinear');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTOpenWriteData, 'NXTOpenWriteData');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTOpenAppendData, 'NXTOpenAppendData');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTCloseModuleHandle, 'NXTCloseModuleHandle');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTBootCommand, 'NXTBootCommand');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTSetBrickName, 'NXTSetBrickName');
    RegisterMethod(@TBrickComm.NXTGetBrickName, 'NXTGetBrickName');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTGetDeviceInfo, 'NXTGetDeviceInfo');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTFreeMemory, 'NXTFreeMemory');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTDeleteUserFlash, 'NXTDeleteUserFlash');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTBTFactoryReset, 'NXTBTFactoryReset');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTPollCommandLen, 'NXTPollCommandLen');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTPollCommand, 'NXTPollCommand');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTWriteIOMap, 'NXTWriteIOMap');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTReadIOMap, 'NXTReadIOMap');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTFindFirstModule, 'NXTFindFirstModule');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTFindNextModule, 'NXTFindNextModule');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTRenameFile, 'NXTRenameFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTDownloadFile, 'DownloadFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTDownloadStream, 'DownloadStream');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTUploadFile, 'NXTUploadFile');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTUploadFileToStream, 'NXTUploadFileToStream');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTListFiles, 'NXTListFiles');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTListModules, 'NXTListModules');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTListBricks, 'NXTListBricks');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTInitializeResourceNames, 'NXTInitializeResourceNames');
    RegisterVirtualAbstractMethod(TFantomSpirit, @TFantomSpirit.NXTUpdateResourceNames, 'NXTUpdateResourceNames');
    RegisterVirtualMethod(@TBrickComm.NXTDefragmentFlash, 'NXTDefragmentFlash');
    RegisterPropertyHelper(@TBrickCommEEPROM_R,@TBrickCommEEPROM_W,'EEPROM');
    RegisterPropertyHelper(@TBrickCommEEPROMBlocks_R,nil,'EEPROMBlocks');
    RegisterPropertyHelper(@TBrickCommNXTLowSpeed_R,@TBrickCommNXTLowSpeed_W,'NXTLowSpeed');
    RegisterPropertyHelper(@TBrickCommIsOpen_R,nil,'IsOpen');
    RegisterPropertyHelper(@TBrickCommFastMode_R,@TBrickCommFastMode_W,'FastMode');
    RegisterPropertyHelper(@TBrickCommUseBluetooth_R,@TBrickCommUseBluetooth_W,'UseBluetooth');
    RegisterPropertyHelper(@TBrickCommBluetoothName_R,@TBrickCommBluetoothName_W,'BluetoothName');
    RegisterPropertyHelper(@TBrickCommBluetoothSearchTimeout_R,@TBrickCommBluetoothSearchTimeout_W,'BluetoothSearchTimeout');
    RegisterPropertyHelper(@TBrickCommQuiet_R,@TBrickCommQuiet_W,'Quiet');
    RegisterPropertyHelper(@TBrickCommBrickType_R,@TBrickCommBrickType_W,'BrickType');
    RegisterPropertyHelper(@TBrickCommPort_R,@TBrickCommPort_W,'Port');
    RegisterPropertyHelper(@TBrickCommPortName_R,nil,'PortName');
    RegisterPropertyHelper(@TBrickCommNicePortName_R,nil,'NicePortName');
    RegisterPropertyHelper(@TBrickCommFullPortName_R,nil,'FullPortName');
    RegisterPropertyHelper(@TBrickCommBrickTypeName_R,nil,'BrickTypeName');
    RegisterPropertyHelper(@TBrickCommRxTimeout_R,@TBrickCommRxTimeout_W,'RxTimeout');
    RegisterPropertyHelper(@TBrickCommVerboseMode_R,@TBrickCommVerboseMode_W,'VerboseMode');
    RegisterPropertyHelper(@TBrickCommAutoClose_R,@TBrickCommAutoClose_W,'AutoClose');
    RegisterPropertyHelper(@TBrickCommDataLog_R,nil,'DataLog');
    RegisterPropertyHelper(@TBrickCommMemoryMap_R,nil,'MemoryMap');
    RegisterPropertyHelper(@TBrickCommMemoryData_R,nil,'MemoryData');
    RegisterPropertyHelper(@TBrickCommTowerExistsSleep_R,@TBrickCommTowerExistsSleep_W,'TowerExistsSleep');
    RegisterPropertyHelper(@TBrickCommLinkLog_R,nil,'LinkLog');
    RegisterPropertyHelper(@TBrickCommRCXFirmwareChunkSize_R,@TBrickCommRCXFirmwareChunkSize_W,'RCXFirmwareChunkSize');
    RegisterPropertyHelper(@TBrickCommDownloadWaitTime_R,@TBrickCommDownloadWaitTime_W,'DownloadWaitTime');
    RegisterPropertyHelper(@TBrickCommOmitHeader_R,@TBrickCommOmitHeader_W,'OmitHeader');
    RegisterPropertyHelper(@TBrickCommOnDownloadStart_R,@TBrickCommOnDownloadStart_W,'OnDownloadStart');
    RegisterPropertyHelper(@TBrickCommOnDownloadDone_R,@TBrickCommOnDownloadDone_W,'OnDownloadDone');
    RegisterPropertyHelper(@TBrickCommOnDownloadStatus_R,@TBrickCommOnDownloadStatus_W,'OnDownloadStatus');
    RegisterPropertyHelper(@TBrickCommOnOpenStateChanged_R,@TBrickCommOnOpenStateChanged_W,'OnOpenStateChanged');
    RegisterPropertyHelper(@TBrickCommOnGetVarInfoByID_R,@TBrickCommOnGetVarInfoByID_W,'OnGetVarInfoByID');
    RegisterPropertyHelper(@TBrickCommOnGetVarInfoByName_R,@TBrickCommOnGetVarInfoByName_W,'OnGetVarInfoByName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uSpirit(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TBrickComm(CL);
end;

 
 
{ TPSImport_uSpirit }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uSpirit.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uSpirit(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uSpirit.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uSpirit(ri);
  RIRegister_uSpirit_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.