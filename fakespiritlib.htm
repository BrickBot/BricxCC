<pre>
<code><span style="font: 10pt Courier New;"><span class="pas1-reservedword">unit</span><span class="pas1-space"> FakeSpiritLib_TLB;

</span>
<span class="pas1-space"> </span>
<span class="pas1-reservedword">interface

uses</span><span class="pas1-space"> Windows, ActiveX, Classes, Graphics, StdVCL, Variants;
  

</span>
<span class="pas1-reservedword">const
</span><span class="pas1-space">  </span><span class="pas1-comment">// TypeLibrary Major and minor versions
</span><span class="pas1-space">  FakeSpiritLibMajorVersion = </span><span class="pas1-number">1</span><span class="pas1-symbol">;
  FakeSpiritLibMinorVersion = </span><span class="pas1-number">0</span><span class="pas1-symbol">;

  LIBID_FakeSpiritLib: TGUID = </span><span class="pas1-string">'{694CCD40-823A-4E79-A959-FB4EE8C865D5}'</span><span class="pas1-symbol">;

  IID_IFakeSpirit: TGUID = </span><span class="pas1-string">'{C3BAEBC8-008E-46E0-8A09-E6C6A19AD47F}'</span><span class="pas1-symbol">;
  DIID_IFakeSpiritEvents: TGUID = </span><span class="pas1-string">'{4A1F2573-25EE-4A2F-B488-4985A805886A}'</span><span class="pas1-symbol">;
  CLASS_FakeSpirit: TGUID = </span><span class="pas1-string">'{AF90A083-5E24-4F7B-A7E4-D422E5458494}'</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum TAutoBrickType
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoBrickType = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  artRCX = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  artCybermaster = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  artScout = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  artRCX2 = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  artSpy = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;
  artSwan = </span><span class="pas1-hexadecimal">$00000005</span><span class="pas1-symbol">;
  artNXT = </span><span class="pas1-hexadecimal">$00000006</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoTransmitLevel
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoTransmitLevel = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  atlNear = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  atlFar = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoLSSource
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoLSSource = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  alsVariable = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  alsError = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  alsConstant = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoTimerNumber
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoTimerNumber = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  atnZero = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  atnOne = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  atnTwo = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  atnThree = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoCounterNumber
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoCounterNumber = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  acnZero = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  acnOne = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  acnTwo = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoTCSource
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoTCSource = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  atcVariable = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  atcError1 = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  atcConstant = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  atcError2 = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  atcRandom = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoScoutMotion
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoScoutMotion = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  asmNone = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  asmForward = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  asmZigZag = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  asmCircleRight = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  asmCircleLeft = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;
  asmLoopA = </span><span class="pas1-hexadecimal">$00000005</span><span class="pas1-symbol">;
  asmLoopB = </span><span class="pas1-hexadecimal">$00000006</span><span class="pas1-symbol">;
  asmLoopAB = </span><span class="pas1-hexadecimal">$00000007</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoScoutTouch
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoScoutTouch = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  astIgnore = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  astReverse = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  astAvoid = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  astWaitFor = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  astBrake = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoScoutLight
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoScoutLight = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  aslIgnore = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  aslSeekLight = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  aslSeekDark = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  aslAvoid = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  aslWaitFor = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;
  aslBrake = </span><span class="pas1-hexadecimal">$00000005</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoScoutScale
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoScoutScale = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  assShort = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  assMedium = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  assLong = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoScoutEffects
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoScoutEffects = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  aseNone = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  aseBug = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  aseAlarm = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  aseRandom = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  aseScience = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoSoundSetNumber
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoSoundSetNumber = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  assnZero = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  assnOne = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  assnTwo = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  assnThree = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  assnFour = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;
  assnFive = </span><span class="pas1-hexadecimal">$00000005</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoGlobalOutAction
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoGlobalOutAction = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  agoaFloat = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  agoaOff = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  agoaOn = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoGlobalDirAction
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoGlobalDirAction = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  agdaBackward = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  agdaSwitch = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  agdaForward = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoMotorsNum
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoMotorsNum = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  amnOne = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  amnTwo = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  amnThree = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  amnFour = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;
  amnFive = </span><span class="pas1-hexadecimal">$00000005</span><span class="pas1-symbol">;
  amnSix = </span><span class="pas1-hexadecimal">$00000006</span><span class="pas1-symbol">;
  amnSeven = </span><span class="pas1-hexadecimal">$00000007</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Constants for enum TAutoNXTFileType
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TAutoNXTFileType = TOleEnum;
</span><span class="pas1-reservedword">const
</span><span class="pas1-space">  anftProgram = </span><span class="pas1-hexadecimal">$00000000</span><span class="pas1-symbol">;
  anftGraphics = </span><span class="pas1-hexadecimal">$00000001</span><span class="pas1-symbol">;
  anftSound = </span><span class="pas1-hexadecimal">$00000002</span><span class="pas1-symbol">;
  anftData = </span><span class="pas1-hexadecimal">$00000003</span><span class="pas1-symbol">;
  anftOther = </span><span class="pas1-hexadecimal">$00000004</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">type

</span><span class="pas1-comment">// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
</span><span class="pas1-space">  IFakeSpirit = </span><span class="pas1-reservedword">interface</span><span class="pas1-symbol">;
  IFakeSpiritDisp = </span><span class="pas1-reservedword">dispinterface</span><span class="pas1-symbol">;
  IFakeSpiritEvents = </span><span class="pas1-reservedword">dispinterface</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
</span><span class="pas1-space">  FakeSpirit = IFakeSpirit;


</span><span class="pas1-comment">// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
</span><span class="pas1-space">  PByte1 = ^Byte; </span><span class="pas1-comment">{*}


// *********************************************************************//
// Interface: IFakeSpirit
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C3BAEBC8-008E-46E0-8A09-E6C6A19AD47F}
// *********************************************************************//
</span><span class="pas1-space">  IFakeSpirit = </span><span class="pas1-reservedword">interface</span><span class="pas1-symbol">(IDispatch)
    [</span><span class="pas1-string">'{C3BAEBC8-008E-46E0-8A09-E6C6A19AD47F}'</span><span class="pas1-symbol">]
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Open: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Close: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_BrickType: TAutoBrickType; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_BrickType(Value: TAutoBrickType); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_PortName: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_NicePortName: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PlayTone(aFreq: SYSINT; aTime: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PlaySystemSound(aSnd: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MotorsOn(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MotorsOff(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MotorsFloat(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetFwd(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetRwd(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SwitchDirection(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetMotorPower(aMotorList: Byte; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetSensorType(aNum: SYSINT; aType: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetSensorMode(aNum: SYSINT; aMode: SYSINT; aSlope: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearSensorValue(aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> TowerExists: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Ping: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PrepareBrick: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UnlockFirmware: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UnlockBrick: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DownloadMemoryMap: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PowerDownTime(aTime: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> BatteryLevel: SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> BrickAlive: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Shutdown: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Sleep(aVal: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Version(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> rom: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ram: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> TransmitPower(aLevel: TAutoTransmitLevel): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Poll(aSrc: SYSINT; aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StartTask(aTask: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StopTask(aTask: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StopAllTasks: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteTask(aTask: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteAllTasks: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteSub(aSub: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteAllSubs: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearTimer(aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearMemory: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetOutputStatus(aOut: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetVariableValue(aVar: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetInputValue(aIn: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetMessageValue(aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetTimerValue(aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetCounterValue(aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SumVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SubVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DivVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MulVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SgnVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> AbsVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> AndVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> OrVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendRawCommand(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aCmd: WideString; bRetry: WordBool): WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendRemoteStr(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aEvent: WideString; aRepeat: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendRemoteNum(aEvent: SYSUINT; aRepeat: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendMessage(aMsg: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SelectProgram(aProg: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SelectDisplay(aSrc: SYSINT; aNumber: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetWatchNum(aHrs: SYSINT; aMins: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetWatchStr(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aTime: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DownloadFirmware(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aFile: WideString; bFast: WordBool; bComp: WordBool; 
                              bUnlock: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetDatalog(aSize: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DatalogNext(aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UploadDatalog(aFrom: SYSINT; aSize: SYSINT): WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UploadDatalogSimple(bVerbose: WordBool): WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Drive(aLeft: SYSINT; aRight: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearTachoCounter(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> OnWait(aMotorList: Byte; aNum: SYSINT; aTime: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> OnWaitDifferent(aMotorList: Byte; aNum0: SYSINT; aNum1: SYSINT; aNum2: SYSINT; 
                             aTime: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Scout(aVal: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ScoutPower(bPower: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> CalibrateLightSensor: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendVLL(aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetFeedback(src: SYSINT; val: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorUpperThreshold(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorLowerThreshold(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorHysteresis(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorBlinkTime(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetTimerLimit(num: TAutoTimerNumber; src: TAutoTCSource; val: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetCounterLimit(num: TAutoCounterNumber; src: TAutoTCSource; val: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLight(bOn: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ScoutRules(motion: TAutoScoutMotion; touch: TAutoScoutTouch; light: TAutoScoutLight; 
                        time: TAutoScoutScale; fx: TAutoScoutEffects): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ScoutSound(bSoundEnable: WordBool; bSoundOff: WordBool; aNum: TAutoSoundSetNumber): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PollMemory(address: SYSINT; size: SYSINT): WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetGlobalOutput(motors: TAutoMotorsNum; action: TAutoGlobalOutAction): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetGlobalDirection(motors: TAutoMotorsNum; action: TAutoGlobalDirAction): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetMaxPower(motors: TAutoMotorsNum; src: SYSINT; num: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> IncCounter(num: TAutoCounterNumber): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DecCounter(num: TAutoCounterNumber): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearCounter(num: TAutoCounterNumber): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearSound: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MuteSound: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UnmuteSound: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendUARTData(istart: SYSINT; isize: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetEvent(enumb: SYSINT; snumb: SYSINT; etype: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> CalibrateEvent(enumb: SYSINT; upper: SYSINT; lower: SYSINT; hysteresis: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearAllEvents: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ViewSourceValue(prec: SYSINT; src: SYSINT; Value: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_IsOpen: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetSourceValue(DestSrc: SYSINT; DestVal: SYSINT; OrigSrc: SYSINT; OrigVal: SYSINT): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PollEEPROM(Block: SYSINT): WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_TowerExistsSleep: Integer; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_TowerExistsSleep(Value: Integer); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_RCXFirmwareChunkSize: Integer; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_RCXFirmwareChunkSize(Value: Integer); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_DownloadWaitTime: Integer; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_DownloadWaitTime(Value: Integer); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_OmitHeader: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_OmitHeader(Value: WordBool); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_Datalog: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_MemoryData: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_MemoryMap: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MonitorIR(Secs: SYSINT): WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_FastMode: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_FastMode(Value: WordBool); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_UseBluetooth: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_UseBluetooth(Value: WordBool); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_Quiet: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_Quiet(Value: WordBool); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_Port: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_Port(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> Value: WideString); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_BrickTypeName: WideString; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> SetEEPROMByte(addr: Byte; Value: Byte); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetEEPROMByte(addr: Byte): Byte; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> GetEEPROMBlock(idx: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b1: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b2: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b3: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b4: Byte; 
                             </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b5: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b6: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b7: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b8: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b9: Byte; 
                             </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b10: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b11: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b12: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b13: Byte; 
                             </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b14: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b15: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b16: Byte); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Get_VerboseMode: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Set_VerboseMode(Value: WordBool); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> SetNXTLSBlock(Port: Byte; TxLen: Byte; RxLen: Byte; b1: Byte; b2: Byte; b3: Byte; 
                            b4: Byte; b5: Byte; b6: Byte; b7: Byte; b8: Byte; b9: Byte; b10: Byte; 
                            b11: Byte; b12: Byte; b13: Byte; b14: Byte; b15: Byte; b16: Byte); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> GetNXTLSBlock(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> RxLen: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b1: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b2: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b3: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b4: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b5: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b6: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b7: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b8: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b9: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b10: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b11: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b12: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b13: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b14: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b15: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b16: Byte); </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StartProgram(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StopProgram: WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PlaySoundFile(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; loop: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetNXTOutputState(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> power: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> mode: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> regmode: Byte; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> turnratio: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> runstate: Byte; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> tacholimit: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> tachocount: Integer; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> blocktachocount: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> rotationcount: Integer): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetNXTOutputState(Port: Byte; power: Integer; mode: Byte; regmode: Byte; 
                               turnratio: Integer; runstate: Byte; tacholimit: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetNXTInputValues(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> valid: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> calibrated: WordBool; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> stype: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> smode: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> raw: LongWord; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> normalized: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> scaled: Smallint; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> calvalue: Smallint): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetNXTInputMode(Port: Byte; stype: Byte; smode: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ResetInputScaledValue(Port: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ResetOutputPosition(Port: Byte; relative: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MessageWrite(inbox: Byte; </span><span class="pas1-reservedword">const</span><span class="pas1-space"> msg: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MessageRead(remote: Byte; remove: WordBool; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> local: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: Byte; 
                         </span><span class="pas1-reservedword">out</span><span class="pas1-space"> msg: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> KeepAlive(chkResponse: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> time: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> LSGetStatus(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> bytesReady: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetCurrentProgramName(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> filename: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetButtonState(idx: Byte; reset: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> pressed: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> count: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenRead(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenReadLinear(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenWrite(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenWriteLinear(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenWriteData(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenAppendData(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTRead(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> buffer: PByte1): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTWrite(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; buffer: PByte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTCloseFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTDeleteFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> filename: WideString; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindFirstFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindNextFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTGetVersions(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> protmin: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> protmaj: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> firmmin: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> firmmaj: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTCloseModuleHandle(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTBootCommand(chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTSetBrickName(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> name: WideString; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTGetDeviceInfo(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> name: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> BTAddress: WideString; 
                              </span><span class="pas1-reservedword">out</span><span class="pas1-space"> BTSignal: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> FreeMem: LongWord): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTDeleteUserFlash(chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTBTFactoryReset(chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTPollCommandLen(bufNum: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> count: Byte): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTPollCommand(bufNum: Byte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> aCmd: PByte1): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTWriteIOMap(ModID: LongWord; Offset: Smallint; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; Data: PByte; 
                           chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTReadIOMap(ModID: LongWord; Offset: Smallint; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> Data: PByte1): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindFirstModule(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> ModName: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModID: LongWord; 
                                </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModSize: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> IOMapSize: Smallint): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindNextModule(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModName: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModID: LongWord; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModSize: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> IOMapSize: Smallint): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTDownloadFile(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; filetype: TAutoNXTFileType): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTUploadFile(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">const</span><span class="pas1-space"> dir: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTListFiles(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> searchPattern: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> Files: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTListModules(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> searchPattern: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> Files: WideString): WordBool; </span><span class="pas1-reservedword">safecall</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> BrickType: TAutoBrickType </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_BrickType </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_BrickType;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> PortName: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_PortName;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> NicePortName: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_NicePortName;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> IsOpen: WordBool </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_IsOpen;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> TowerExistsSleep: Integer </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_TowerExistsSleep </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_TowerExistsSleep;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> RCXFirmwareChunkSize: Integer </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_RCXFirmwareChunkSize </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_RCXFirmwareChunkSize;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> DownloadWaitTime: Integer </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_DownloadWaitTime </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_DownloadWaitTime;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> OmitHeader: WordBool </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_OmitHeader </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_OmitHeader;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> Datalog: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_Datalog;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> MemoryData: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_MemoryData;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> MemoryMap: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_MemoryMap;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> FastMode: WordBool </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_FastMode </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_FastMode;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> UseBluetooth: WordBool </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_UseBluetooth </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_UseBluetooth;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> Quiet: WordBool </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_Quiet </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_Quiet;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> Port: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_Port </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_Port;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> BrickTypeName: WideString </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_BrickTypeName;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> VerboseMode: WordBool </span><span class="pas1-reservedword">read</span><span class="pas1-space"> Get_VerboseMode </span><span class="pas1-reservedword">write</span><span class="pas1-space"> Set_VerboseMode;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// *********************************************************************//
// DispIntf:  IFakeSpiritDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C3BAEBC8-008E-46E0-8A09-E6C6A19AD47F}
// *********************************************************************//
</span><span class="pas1-space">  IFakeSpiritDisp = </span><span class="pas1-reservedword">dispinterface
</span><span class="pas1-space">    [</span><span class="pas1-string">'{C3BAEBC8-008E-46E0-8A09-E6C6A19AD47F}'</span><span class="pas1-symbol">]
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Open: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">1</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Close: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">2</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> BrickType: TAutoBrickType </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">3</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> PortName: WideString </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">5</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> NicePortName: WideString </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">6</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PlayTone(aFreq: SYSINT; aTime: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">7</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PlaySystemSound(aSnd: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">8</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MotorsOn(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">9</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MotorsOff(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">10</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MotorsFloat(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">11</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetFwd(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">12</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetRwd(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">13</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SwitchDirection(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">14</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetMotorPower(aMotorList: Byte; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">15</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetSensorType(aNum: SYSINT; aType: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">16</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetSensorMode(aNum: SYSINT; aMode: SYSINT; aSlope: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">17</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearSensorValue(aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">18</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> TowerExists: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">19</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Ping: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">20</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PrepareBrick: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">21</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UnlockFirmware: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">22</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UnlockBrick: WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">23</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DownloadMemoryMap: WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">24</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PowerDownTime(aTime: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">25</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> BatteryLevel: SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">26</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> BrickAlive: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">27</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Shutdown: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">28</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Sleep(aVal: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">29</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Version(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> rom: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ram: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">30</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> TransmitPower(aLevel: TAutoTransmitLevel): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">31</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Poll(aSrc: SYSINT; aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">32</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StartTask(aTask: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">33</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StopTask(aTask: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">34</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StopAllTasks: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">35</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteTask(aTask: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">36</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteAllTasks: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">37</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteSub(aSub: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">38</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DeleteAllSubs: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">39</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearTimer(aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">40</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearMemory: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">41</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetOutputStatus(aOut: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">42</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetVariableValue(aVar: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">43</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetInputValue(aIn: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">44</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetMessageValue(aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">45</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetTimerValue(aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">46</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetCounterValue(aNum: SYSINT): SYSINT; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">47</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">48</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SumVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">49</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SubVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">50</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DivVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">51</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MulVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">52</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SgnVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">53</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> AbsVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">54</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> AndVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">55</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> OrVar(aVar: SYSINT; aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">56</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendRawCommand(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aCmd: WideString; bRetry: WordBool): WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">57</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendRemoteStr(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aEvent: WideString; aRepeat: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">58</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendRemoteNum(aEvent: SYSUINT; aRepeat: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">59</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendMessage(aMsg: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">60</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SelectProgram(aProg: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">61</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SelectDisplay(aSrc: SYSINT; aNumber: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">62</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetWatchNum(aHrs: SYSINT; aMins: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">63</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetWatchStr(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aTime: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">64</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DownloadFirmware(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> aFile: WideString; bFast: WordBool; bComp: WordBool; 
                              bUnlock: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">65</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetDatalog(aSize: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">66</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DatalogNext(aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">67</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UploadDatalog(aFrom: SYSINT; aSize: SYSINT): WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">68</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UploadDatalogSimple(bVerbose: WordBool): WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">69</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Drive(aLeft: SYSINT; aRight: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">70</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearTachoCounter(aMotorList: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">71</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> OnWait(aMotorList: Byte; aNum: SYSINT; aTime: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">72</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> OnWaitDifferent(aMotorList: Byte; aNum0: SYSINT; aNum1: SYSINT; aNum2: SYSINT; 
                             aTime: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">73</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Scout(aVal: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">74</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ScoutPower(bPower: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">75</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> CalibrateLightSensor: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">76</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendVLL(aSrc: SYSINT; aNum: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">77</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetFeedback(src: SYSINT; val: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">78</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorUpperThreshold(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">79</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorLowerThreshold(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">80</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorHysteresis(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">81</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLightSensorBlinkTime(src: TAutoLSSource; val: SYSUINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">82</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetTimerLimit(num: TAutoTimerNumber; src: TAutoTCSource; val: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">83</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetCounterLimit(num: TAutoCounterNumber; src: TAutoTCSource; val: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">84</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetLight(bOn: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">85</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ScoutRules(motion: TAutoScoutMotion; touch: TAutoScoutTouch; light: TAutoScoutLight; 
                        time: TAutoScoutScale; fx: TAutoScoutEffects): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">86</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ScoutSound(bSoundEnable: WordBool; bSoundOff: WordBool; aNum: TAutoSoundSetNumber): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">87</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PollMemory(address: SYSINT; size: SYSINT): WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">88</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetGlobalOutput(motors: TAutoMotorsNum; action: TAutoGlobalOutAction): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">89</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetGlobalDirection(motors: TAutoMotorsNum; action: TAutoGlobalDirAction): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">90</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetMaxPower(motors: TAutoMotorsNum; src: SYSINT; num: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">91</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> IncCounter(num: TAutoCounterNumber): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">92</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> DecCounter(num: TAutoCounterNumber): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">93</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearCounter(num: TAutoCounterNumber): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">94</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearSound: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">95</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MuteSound: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">96</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> UnmuteSound: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">97</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SendUARTData(istart: SYSINT; isize: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">98</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetEvent(enumb: SYSINT; snumb: SYSINT; etype: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">99</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> CalibrateEvent(enumb: SYSINT; upper: SYSINT; lower: SYSINT; hysteresis: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">100</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ClearAllEvents: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">101</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ViewSourceValue(prec: SYSINT; src: SYSINT; Value: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">102</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> IsOpen: WordBool </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">103</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetSourceValue(DestSrc: SYSINT; DestVal: SYSINT; OrigSrc: SYSINT; OrigVal: SYSINT): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">104</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PollEEPROM(Block: SYSINT): WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">105</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> TowerExistsSleep: Integer </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">201</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> RCXFirmwareChunkSize: Integer </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">202</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> DownloadWaitTime: Integer </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">203</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> OmitHeader: WordBool </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">204</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> Datalog: WideString </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">205</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> MemoryData: WideString </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">206</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> MemoryMap: WideString </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">207</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MonitorIR(Secs: SYSINT): WideString; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">208</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> FastMode: WordBool </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">209</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> UseBluetooth: WordBool </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">210</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> Quiet: WordBool </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">211</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> Port: WideString </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">212</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> BrickTypeName: WideString </span><span class="pas1-reservedword">readonly</span><span class="pas1-space"> </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">213</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> SetEEPROMByte(addr: Byte; Value: Byte); </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">214</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetEEPROMByte(addr: Byte): Byte; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">215</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> GetEEPROMBlock(idx: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b1: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b2: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b3: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b4: Byte; 
                             </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b5: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b6: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b7: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b8: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b9: Byte; 
                             </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b10: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b11: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b12: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b13: Byte; 
                             </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b14: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b15: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b16: Byte); </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">217</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">property</span><span class="pas1-space"> VerboseMode: WordBool </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">218</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> SetNXTLSBlock(Port: Byte; TxLen: Byte; RxLen: Byte; b1: Byte; b2: Byte; b3: Byte; 
                            b4: Byte; b5: Byte; b6: Byte; b7: Byte; b8: Byte; b9: Byte; b10: Byte; 
                            b11: Byte; b12: Byte; b13: Byte; b14: Byte; b15: Byte; b16: Byte); </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">216</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> GetNXTLSBlock(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> RxLen: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b1: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b2: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b3: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b4: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b5: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b6: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b7: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b8: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b9: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b10: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b11: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b12: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b13: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b14: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b15: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> b16: Byte); </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">219</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StartProgram(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">220</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> StopProgram: WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">221</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> PlaySoundFile(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; loop: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">222</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetNXTOutputState(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> power: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> mode: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> regmode: Byte; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> turnratio: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> runstate: Byte; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> tacholimit: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> tachocount: Integer; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> blocktachocount: Integer; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> rotationcount: Integer): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">223</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetNXTOutputState(Port: Byte; power: Integer; mode: Byte; regmode: Byte; 
                               turnratio: Integer; runstate: Byte; tacholimit: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">224</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetNXTInputValues(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> valid: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> calibrated: WordBool; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> stype: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> smode: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> raw: LongWord; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> normalized: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> scaled: Smallint; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> calvalue: Smallint): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">225</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> SetNXTInputMode(Port: Byte; stype: Byte; smode: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">226</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ResetInputScaledValue(Port: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">227</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> ResetOutputPosition(Port: Byte; relative: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">228</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MessageWrite(inbox: Byte; </span><span class="pas1-reservedword">const</span><span class="pas1-space"> msg: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">229</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> MessageRead(remote: Byte; remove: WordBool; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> local: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: Byte; 
                         </span><span class="pas1-reservedword">out</span><span class="pas1-space"> msg: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">230</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> KeepAlive(chkResponse: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> time: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">231</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> LSGetStatus(Port: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> bytesReady: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">232</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetCurrentProgramName(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> filename: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">233</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> GetButtonState(idx: Byte; reset: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> pressed: WordBool; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> count: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">234</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenRead(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">235</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenReadLinear(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">236</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenWrite(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">237</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenWriteLinear(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">238</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenWriteData(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">239</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTOpenAppendData(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">240</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTRead(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> buffer: </span><span class="pas1-comment">{??PByte1}</span><span class="pas1-identifier">OleVariant): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">241</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTWrite(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> buffer: Byte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">242</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTCloseFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">243</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTDeleteFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> filename: WideString; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">244</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindFirstFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">245</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindNextFile(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> size: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">246</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTGetVersions(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> protmin: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> protmaj: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> firmmin: Byte; 
                            </span><span class="pas1-reservedword">out</span><span class="pas1-space"> firmmaj: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">247</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTCloseModuleHandle(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">248</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTBootCommand(chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">249</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTSetBrickName(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> name: WideString; chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">250</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTGetDeviceInfo(</span><span class="pas1-reservedword">out</span><span class="pas1-space"> name: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> BTAddress: WideString; 
                              </span><span class="pas1-reservedword">out</span><span class="pas1-space"> BTSignal: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> FreeMem: LongWord): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">251</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTDeleteUserFlash(chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">252</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTBTFactoryReset(chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">253</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTPollCommandLen(bufNum: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> count: Byte): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">254</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTPollCommand(bufNum: Byte; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> aCmd: </span><span class="pas1-comment">{??PByte1}</span><span class="pas1-identifier">OleVariant): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">255</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTWriteIOMap(ModID: LongWord; Offset: Smallint; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> Data: Byte; 
                           chkResponse: WordBool): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">256</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTReadIOMap(ModID: LongWord; Offset: Smallint; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> count: Smallint; 
                          </span><span class="pas1-reservedword">var</span><span class="pas1-space"> Data: </span><span class="pas1-comment">{??PByte1}</span><span class="pas1-identifier">OleVariant): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">257</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindFirstModule(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> ModName: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModID: LongWord; 
                                </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModSize: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> IOMapSize: Smallint): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">258</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTFindNextModule(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> handle: Byte; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModName: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModID: LongWord; 
                               </span><span class="pas1-reservedword">out</span><span class="pas1-space"> ModSize: LongWord; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> IOMapSize: Smallint): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">259</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTDownloadFile(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; filetype: TAutoNXTFileType): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">260</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTUploadFile(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> filename: WideString; </span><span class="pas1-reservedword">const</span><span class="pas1-space"> dir: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">261</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTListFiles(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> searchPattern: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> Files: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">262</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">function</span><span class="pas1-space"> NXTListModules(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> searchPattern: WideString; </span><span class="pas1-reservedword">out</span><span class="pas1-space"> Files: WideString): WordBool; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">263</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// *********************************************************************//
// DispIntf:  IFakeSpiritEvents
// Flags:     (4096) Dispatchable
// GUID:      {4A1F2573-25EE-4A2F-B488-4985A805886A}
// *********************************************************************//
</span><span class="pas1-space">  IFakeSpiritEvents = </span><span class="pas1-reservedword">dispinterface
</span><span class="pas1-space">    [</span><span class="pas1-string">'{4A1F2573-25EE-4A2F-B488-4985A805886A}'</span><span class="pas1-symbol">]
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> OnDownloadStart; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">1</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> OnDownloadDone; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">2</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> OnOpenStateChanged; </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">3</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> OnDownloadStatus(cur: SYSINT; total: SYSINT; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> abort: WordBool); </span><span class="pas1-reservedword">dispid</span><span class="pas1-space"> </span><span class="pas1-number">4</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// *********************************************************************//
// The Class CoFakeSpirit provides a Create and CreateRemote method to          
// create instances of the default interface IFakeSpirit exposed by              
// the CoClass FakeSpirit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
</span><span class="pas1-space">  CoFakeSpirit = </span><span class="pas1-reservedword">class
</span><span class="pas1-space">    </span><span class="pas1-reservedword">class</span><span class="pas1-space"> </span><span class="pas1-reservedword">function</span><span class="pas1-space"> Create: IFakeSpirit;
    </span><span class="pas1-reservedword">class</span><span class="pas1-space"> </span><span class="pas1-reservedword">function</span><span class="pas1-space"> CreateRemote(</span><span class="pas1-reservedword">const</span><span class="pas1-space"> MachineName: </span><span class="pas1-reservedword">string</span><span class="pas1-symbol">): IFakeSpirit;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span></span>
</code></pre>
