CORE\column{}!\column{}( x a-addr -- )
CORE\column{}#\column{}( ud1 -- ud2 )
CORE\column{}#>\column{}( xd -- c-addr u )
CORE\column{}#S\column{}( ud1 -- ud2 )
CORE\column{}'\column{}( "<spaces>name" -- xt )
CORE\column{}(\column{}( "ccc<paren>" -- )
CORE\column{}*\column{}( n1|u1 n2|u2 -- n3|u3 )
CORE\column{}*/\column{}( n1 n2 n3 -- n4 )
CORE\column{}*/MOD\column{}( n1 n2 n3 -- n4 n5 )
CORE \column{}+\column{}( n1|u1 n2|u2 -- n3|u3 )
CORE\column{}+!\column{}( n|u a-addr -- )
CORE\column{}+LOOP\column{}( n -- ) ( R: loop-sys1 -- | loop-sys2 )
CORE\column{},\column{}( x -- )
CORE \column{}-\column{}( n1|u1 n2|u2 -- n3|u3 )
CORE\column{}.\column{}( n -- )
CORE\column{}."\column{}( -- )
CORE\column{}/\column{}( n1 n2 -- n3 )
CORE\column{}/MOD\column{}( n1 n2 -- n3 n4 )
CORE\column{}0<\column{}( n -- flag )
CORE\column{}0=\column{}( x -- flag )
CORE\column{}1+\column{}( n1|u1 -- n2|u2 )
CORE\column{}1-\column{}( n1|u1 -- n2|u2 )
CORE\column{}2!\column{}( x1 x2 a-addr -- )
CORE\column{}2*\column{}( x1 -- x2 )
CORE\column{}2/\column{}( x1 -- x2 )
CORE\column{}2@\column{}( a-addr -- x1 x2 )
CORE\column{}2DROP\column{}( x1 x2 -- )
CORE\column{}2DUP\column{}( x1 x2 -- x1 x2 x1 x2 )
CORE\column{}2OVER\column{}( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )
CORE\column{}2SWAP\column{}( x1 x2 x3 x4 -- x3 x4 x1 x2 )
CORE\column{}:\column{}
CORE\column{};\column{}
CORE\column{}<\column{}( n1 n2 -- flag )
CORE\column{}<#\column{}( -- )
CORE\column{}=\column{}( x1 x2 -- flag )
CORE\column{}>\column{}( n1 n2 -- flag )
CORE\column{}>BODY\column{}( xt -- a-addr )
CORE\column{}>IN\column{}( -- a-addr )
 CORE\column{}>NUMBER\column{}( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
CORE\column{}>R\column{}( x -- )  ( R:  -- x )
CORE\column{}?DUP\column{}( x -- 0 | x x )
CORE\column{}@\column{}( a-addr -- x )
CORE\column{}ABORT\column{}( i*x -- ) ( R: j*x -- )
CORE\column{}ABORT"\column{}( i*x x1 --  | i*x ) ( R: j*x --  | j*x )
CORE\column{}ABS\column{}( n -- u )
CORE\column{}ACCEPT\column{}( c-addr +n1 -- +n2 )
CORE\column{}ALIGN\column{}( -- )
CORE\column{}ALIGNED\column{}( addr -- a-addr )
CORE\column{}ALLOT\column{}( n -- )
CORE\column{}AND\column{}( x1 x2 -- x3 )
CORE\column{}BASE\column{}( -- a-addr )
CORE\column{}BEGIN\column{}( -- )
CORE\column{}BL\column{}( -- char )
CORE\column{}C!\column{}( char c-addr -- )
CORE\column{}C,\column{}( char -- )
CORE\column{}C@\column{}( c-addr -- char )
CORE\column{}CELL+\column{}( a-addr1 -- a-addr2 )
CORE\column{}CELLS\column{}( n1 -- n2 )
CORE\column{}CHAR\column{}( "<spaces>name" -- char )
CORE\column{}CHAR+\column{}( c-addr1 -- c-addr2 )
CORE\column{}CHARS\column{}( n1 -- n2 )
CORE\column{}CONSTANT\column{}( x "<spaces>name" -- )
CORE\column{}COUNT\column{}( c-addr1 -- c-addr2 u )
CORE\column{}CR\column{}( -- )
CORE\column{}CREATE\column{}( "<spaces>name" -- )
CORE\column{}DECIMAL\column{}( -- )
CORE\column{}DEPTH\column{}( -- +n )
CORE\column{}DO\column{}( n1|u1 n2|u2 -- ) ( R: -- loop-sys )
CORE\column{}DOES>\column{}( -- ) ( R: nest-sys1 -- )
CORE\column{}DROP\column{}( x -- )
CORE\column{}DUP\column{}( x -- x x )
CORE\column{}ELSE\column{}( -- )
CORE\column{}EMIT\column{}( x -- )
CORE\column{}ENVIRONMENT?\column{}( c-addr u -- false | i*x true )
CORE\column{}EVALUATE\column{}( i*x c-addr u -- j*x )
CORE\column{}EXECUTE\column{}( i*x xt -- j*x )
CORE\column{}EXIT\column{}( -- ) ( R: nest-sys -- )
CORE\column{}FILL\column{}( c-addr u char -- )
CORE\column{}FIND\column{}( c-addr -- c-addr 0  |  xt 1  |  xt  1 ) 
CORE\column{}FM/MOD\column{}( d1 n1 -- n2 n3 )
CORE\column{}HERE\column{}( -- addr )
CORE\column{}HOLD\column{}( char -- )
CORE\column{}I\column{}( -- n|u )
CORE\column{}IF\column{}( x -- )
CORE\column{}IMMEDIATE\column{}( -- )
CORE\column{}INVERT\column{}( x1 -- x2 )
CORE\column{}J\column{}( -- n|u )
CORE\column{}KEY\column{}( -- char )
CORE\column{}LEAVE\column{}( -- ) ( R: loop-sys -- )
CORE\column{}LITERAL\column{}( -- x )
CORE\column{}LOOP\column{}( -- ) ( R:  loop-sys1 --  | loop-sys2 )
CORE\column{}LSHIFT\column{}( x1 u -- x2 )
CORE\column{}M*\column{}( n1 n2 -- d )
CORE\column{}MAX\column{}( n1 n2 -- n3 )
CORE\column{}MIN\column{}( n1 n2 -- n3 )
CORE\column{}MOD\column{}( n1 n2 -- n3 )
CORE\column{}MOVE\column{}( addr1 addr2 u -- )
CORE\column{}NEGATE\column{}( n1 -- n2 )
CORE\column{}OR\column{}( x1 x2 -- x3 )
CORE\column{}OVER\column{}( x1 x2 -- x1 x2 x1 )
CORE\column{}POSTPONE\column{}( "<spaces>name" -- )
CORE\column{}QUIT\column{}( -- )  ( R:  i*x -- )
CORE\column{}R>\column{}( -- x )  ( R:  x -- )
CORE\column{}R@\column{}( -- x )  ( R:  x -- x )
CORE\column{}RECURSE\column{}( -- )
CORE\column{}REPEAT\column{}( -- )
CORE\column{}ROT\column{}( x1 x2 x3 -- x2 x3 x1 )
CORE\column{}RSHIFT\column{}( x1 u -- x2 )
CORE\column{}S"\column{}( -- c-addr u )
CORE\column{}S>D\column{}( n -- d )
CORE\column{}SIGN\column{}( n -- )
CORE\column{}SM/REM\column{}( d1 n1 -- n2 n3 )
CORE\column{}SOURCE\column{}( -- c-addr u )
CORE\column{}SPACE\column{}( -- )
CORE\column{}SPACES\column{}( n -- )
CORE\column{}STATE\column{}( -- a-addr )
CORE\column{}SWAP\column{}( x1 x2 -- x2 x1 )
CORE\column{}THEN\column{}( -- )
CORE\column{}TYPE\column{}( c-addr u -- )
CORE\column{}U.\column{}( u -- )
CORE\column{}U<\column{}( u1 u2 -- flag )
CORE\column{}UM*\column{}( u1 u2 -- ud )
CORE\column{}UM/MOD\column{}( ud u1 -- u2 u3 )
CORE\column{}UNLOOP\column{}( -- ) ( R: loop-sys -- )
CORE\column{}UNTIL\column{}( x -- )
CORE\column{}VARIABLE\column{}( "<spaces>name" -- )
CORE\column{}WHILE\column{}( x -- )
CORE\column{}WORD\column{}( char "<chars>ccc<char>" -- c-addr )
CORE\column{}XOR\column{}( x1 x2 -- x3 )
CORE\column{}[\column{}( -- )
CORE\column{}[']\column{}( -- xt )
CORE\column{}[CHAR]\column{}( -- char )
CORE\column{}]\column{}( -- )
CORE EXT\column{}#TIB\column{}( -- a-addr )
CORE EXT\column{}.(\column{}( "ccc<paren>" -- )
CORE EXT\column{}.R\column{}( n1 n2 -- )
CORE EXT\column{}0<>\column{}( x -- flag )
CORE EXT\column{}0>\column{}( n -- flag )
CORE EXT\column{}2>R\column{}( x1 x2 -- ) ( R:  -- x1 x2 )
CORE EXT\column{}2R>\column{}( -- x1 x2 )  ( R:  x1 x2 -- )
CORE EXT\column{}2R@\column{}( -- x1 x2 )  ( R:  x1 x2 -- x1 x2 )
CORE EXT\column{}:NONAME\column{}( C:  -- colon-sys )
CORE EXT\column{}<>\column{}( x1 x2 -- flag )
CORE EXT\column{}?DO\column{}( n1|u1 n2|u2 -- ) ( R: --  | loop-sys )
CORE EXT\column{}AGAIN\column{}( -- )
CORE EXT\column{}C"\column{}( -- c-addr )
CORE EXT\column{}CASE\column{}( -- )
CORE EXT\column{}COMPILE,\column{}( xt -- )
CORE EXT\column{}CONVERT\column{}( ud1 c-addr1 -- ud2 c-addr2 )
CORE EXT\column{}ENDCASE\column{}( x -- )
CORE EXT\column{}ENDOF\column{}( -- )
CORE EXT\column{}ERASE\column{}( addr u -- )
CORE EXT\column{}EXPECT\column{}( c-addr +n -- )
CORE EXT\column{}FALSE\column{}( -- false )
CORE EXT\column{}HEX\column{}( -- )
CORE EXT\column{}MARKER\column{}( "<spaces>name" -- )
CORE EXT\column{}NIP\column{}( x1 x2 -- x2 )
CORE EXT\column{}OF\column{}( x1 x2 --   | x1 )
CORE EXT\column{}PAD\column{}( -- c-addr )
CORE EXT\column{}PARSE\column{}( char "ccc<char>" -- c-addr u )
CORE EXT\column{}PICK\column{}( xu ... x1 x0 u -- xu ... x1 x0 xu )
CORE EXT\column{}QUERY\column{}( -- )
CORE EXT\column{}REFILL\column{}( -- flag )
CORE EXT\column{}RESTORE-INPUT\column{}( xn ... x1 n -- flag )
CORE EXT\column{}ROLL\column{}( xu xu 1 ... x0 u -- xu 1 ... x0 xu )
CORE EXT\column{}SAVE-INPUT\column{}( -- xn ... x1 n )
CORE EXT\column{}SOURCE-ID\column{}( -- 0 | -1 )
CORE EXT\column{}SPAN\column{}( -- a-addr )
CORE EXT\column{}TIB\column{}( -- c-addr )
CORE EXT\column{}TO\column{}( x -- )
CORE EXT\column{}TRUE\column{}( -- true )
CORE EXT\column{}TUCK\column{}( x1 x2 -- x2 x1 x2 )
CORE EXT\column{}U.R\column{}( u n -- )
CORE EXT\column{}U>\column{}( u1 u2 -- flag )
CORE EXT\column{}UNUSED\column{}( -- u )
CORE EXT\column{}VALUE\column{}( x "<spaces>name" -- )
CORE EXT\column{}WITHIN\column{}( n1|u1 n2|u2 n3|u3 -- flag )
CORE EXT\column{}[COMPILE]\column{}( "<spaces>name" -- )
CORE EXT \column{}\\column{}
BLOCK\column{}BLK\column{}( -- a-addr )
BLOCK\column{}BLOCK\column{}( u -- a-addr )
BLOCK\column{}BUFFER\column{}( u -- a-addr )
BLOCK\column{}FLUSH\column{}( -- )
BLOCK\column{}LOAD\column{}( i*x u -- j*x )
BLOCK\column{}SAVE-BUFFERS\column{}( -- )
BLOCK\column{}UPDATE\column{}( -- )
BLOCK EXT\column{}EMPTY-BUFFERS\column{}( -- )
BLOCK EXT\column{}LIST\column{}( u -- )
BLOCK EXT\column{}SCR\column{}( -- a-addr )
BLOCK EXT\column{}THRU\column{}( i*x u1 u2 -- j*x )
DOUBLE\column{}2CONSTANT\column{}( x1 x2 "<spaces>name" -- )
DOUBLE\column{}2LITERAL\column{}( -- x1 x2 )
DOUBLE\column{}2VARIABLE\column{}( "<spaces>name" -- )
DOUBLE\column{}D+\column{}( d1|ud1 d2|ud2 -- d3|ud3 )
DOUBLE\column{}D-\column{}( d1|ud1 d2|ud2 -- d3|ud3 )
DOUBLE\column{}D.\column{}( d -- )
DOUBLE\column{}D.R\column{}( d n -- )
DOUBLE\column{}D0<\column{}( d -- flag )
DOUBLE\column{}D0=\column{}( xd -- flag )
DOUBLE\column{}D2*\column{}( xd1 -- xd2 )
DOUBLE\column{}D2/\column{}( xd1 -- xd2 )
DOUBLE\column{}D<\column{}( d1 d2 -- flag )
DOUBLE\column{}D=\column{}( xd1 xd2 -- flag )
DOUBLE\column{}D>S\column{}( d -- n )
DOUBLE\column{}DABS\column{}( d -- ud )
DOUBLE\column{}DMAX\column{}( d1 d2 -- d3 )
DOUBLE\column{}DMIN\column{}( d1 d2 -- d3 )
DOUBLE\column{}DNEGATE\column{}( d1 -- d2 )
DOUBLE\column{}M*/\column{}( d1 n1 +n2 -- d2 )
DOUBLE\column{}M+\column{}( d1|ud1 n -- d2|ud2 )
DOUBLE EXT\column{}2ROT\column{}( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2 )
DOUBLE EXT\column{}DU<\column{}( ud1 ud2 -- flag )
EXCEPTION\column{}CATCH\column{}( i*x xt -- j*x 0 | i*x n )
EXCEPTION\column{}THROW\column{}( k*x n -- k*x | i*x n )
FACILITY\column{}AT-XY\column{}( u1 u2 -- )
FACILITY\column{}KEY?\column{}( -- flag )
FACILITY\column{}PAGE\column{}( -- )
FACILITY EXT\column{}EKEY\column{}( -- u )
FACILITY EXT\column{}EKEY>CHAR\column{}( u -- u false | char true )
FACILITY EXT\column{}EKEY?\column{}( -- flag )
FACILITY EXT\column{}EMIT?\column{}( -- flag )
FACILITY EXT\column{}MS\column{}( u -- )
FACILITY EXT\column{}TIME&DATE\column{}( -- +n1 +n2 +n3 +n4 +n5 +n6 )
FILE\column{}BIN\column{}( fam1 -- fam2 )
FILE\column{}CLOSE-FILE\column{}( fileid -- ior )
FILE\column{}CREATE-FILE\column{}( c-addr u fam -- fileid ior )
FILE\column{}DELETE-FILE\column{}( c-addr u -- ior )
FILE\column{}FILE-POSITION\column{}( fileid -- ud ior )
FILE\column{}FILE-SIZE\column{}( fileid -- ud ior )
FILE\column{}INCLUDE-FILE\column{}( i*x fileid -- j*x )
FILE\column{}INCLUDED\column{}( i*x c-addr u -- j*x )
FILE\column{}OPEN-FILE\column{}( c-addr u fam -- fileid ior )
FILE\column{}R/O\column{}( -- fam )
FILE\column{}R/W\column{}( -- fam )
FILE\column{}READ-FILE\column{}( c-addr u1 fileid -- u2 ior )
FILE\column{}READ-LINE\column{}( c-addr u1 fileid -- u2 flag ior )
FILE\column{}REPOSITION-FILE\column{}( ud fileid -- ior )
FILE\column{}RESIZE-FILE\column{}( ud fileid -- ior )
FILE\column{}W/O\column{}( -- fam )
FILE\column{}WRITE-FILE\column{}( c-addr u fileid -- ior )
FILE\column{}WRITE-LINE\column{}( c-addr u fileid -- ior )
FILE EXT\column{}FILE-STATUS\column{}(c-addr u -- x ior )
FILE EXT\column{}FLUSH-FILE\column{}( fileid -- ior )
FILE EXT\column{}RENAME-FILE\column{}( c-addr1 u1 c-addr2 u2 -- ior )
FLOATING\column{}>FLOAT\column{}( c-addr u -- true | false ) ( F: -- r |  )  or  ( c-addr u -- r true | false )
FLOATING\column{}D>F\column{}( d -- ) ( F: -- r ) or ( d -- r )
FLOATING\column{}F!\column{}( f-addr -- ) ( F: r -- ) or ( r f-addr -- )
FLOATING\column{}F*\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING\column{}F+\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 ) 
FLOATING\column{}F-\column{} ( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING\column{}F/\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING\column{}F0<\column{}( -- flag ) ( F: r -- ) or ( r -- flag )
FLOATING\column{}F0=\column{}( -- flag ) ( F: r -- ) or ( r -- flag )
FLOATING\column{}F<\column{}( -- flag ) ( F: r1 r2 -- ) or ( r1 r2 -- flag )
FLOATING\column{}F>D\column{}( -- d ) ( F: r -- ) or ( r -- d )
FLOATING\column{}F@\column{}( f-addr -- ) ( F: -- r )  or  ( f-addr -- r )
FLOATING\column{}FALIGN\column{}( -- )
FLOATING\column{}FALIGNED\column{}( addr -- f-addr )
FLOATING\column{}FCONSTANT\column{}( "<spaces>name" -- ) ( F: r -- ) or ( r "<spaces>name" -- )
FLOATING\column{}FDEPTH\column{}( -- +n )
FLOATING\column{}FDROP\column{}( F: r -- ) or ( r -- )
FLOATING\column{}FDUP\column{}( F: r -- r r ) or ( r -- r r )
FLOATING\column{}FLITERAL\column{}( F: -- r ) or ( -- r )
FLOATING\column{}FLOAT+\column{}( f-addr1 -- f-addr2 )
FLOATING\column{}FLOATS\column{}( n1 -- n2 )
FLOATING\column{}FLOOR\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING\column{}FMAX\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING\column{}FMIN\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING\column{}FNEGATE\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING\column{}FOVER\column{}( F: r1 r2 -- r1 r2 r1 ) or ( r1 r2 -- r1 r2 r1 )
FLOATING\column{}FROT\column{}( F: r1 r2 r3 -- r2 r3 r1 ) or ( r1 r2 r3 -- r2 r3 r1 )
FLOATING\column{}FROUND\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING\column{}FSWAP\column{}( F: r1 r2 -- r2 r1 ) or ( r1 r2 -- r2 r1 )
FLOATING\column{}FVARIABLE\column{}( "<spaces>name" -- )
FLOATING\column{}REPRESENT\column{}( c-addr u -- n flag1 flag2 )  (F: r -- )  or  ( r c-addr u -- n flag1 flag2 )
FLOATING EXT\column{}DF!\column{}( df-addr -- ) ( F: r -- ) or ( r df-addr -- )
FLOATING EXT\column{}DF@\column{}( df-addr -- ) ( F: -- r ) or ( df-addr -- r ) 
FLOATING EXT\column{}DFALIGN\column{}( -- )
FLOATING EXT\column{}DFALIGNED\column{}( addr -- df-addr )
FLOATING EXT\column{}DFLOAT+\column{}( df-addr1 -- df-addr2 )
FLOATING EXT\column{}DFLOATS\column{}( n1 -- n2 )
FLOATING EXT\column{}F**\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING EXT\column{}F.\column{}( -- ) ( F: r -- ) or ( r -- )
FLOATING EXT\column{}FABS\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FACOS\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FACOSH\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FALOG\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FASIN\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FASINH\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FATAN\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FATAN2\column{}( F: r1 r2 -- r3 ) or ( r1 r2 -- r3 )
FLOATING EXT\column{}FATANH\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FCOS\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FCOSH\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FE.\column{}( -- ) ( F: r -- ) or ( r -- )
FLOATING EXT\column{}FEXP\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FEXPM1\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FLN\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FLNP1\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FLOG\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FS.\column{}( -- ) ( F: r -- ) or ( r -- )
FLOATING EXT\column{}FSIN\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FSINCOS\column{}( F: r1 -- r2 r3 ) or ( r1 -- r2 r3 )
FLOATING EXT\column{}FSINH\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FSQRT\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FTAN\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}FTANH\column{}( F: r1 -- r2 ) or ( r1 -- r2 )
FLOATING EXT\column{}F~\column{}( -- flag ) ( F: r1 r2 r3 -- ) or ( r1 r2 r3 -- flag )
FLOATING EXT\column{}PRECISION\column{}( -- u )
FLOATING EXT\column{}SET-PRECISION\column{}( u -- )
FLOATING EXT\column{}SF!\column{}( sf-addr -- ) ( F: r -- ) or ( r sf-addr -- )
FLOATING EXT\column{}SF@\column{}( sf-addr -- ) ( F: -- r ) or ( sf-addr -- r )
FLOATING EXT\column{}SFALIGN\column{}( -- )
FLOATING EXT\column{}SFALIGNED\column{}( addr -- sf-addr )
FLOATING EXT\column{}SFLOAT+\column{}( sf-addr1 -- sf-addr2 )
FLOATING EXT\column{}SFLOATS\column{}( n1 -- n2 )
LOCAL\column{}(LOCAL)\column{}( -- x )
LOCAL EXT\column{}LOCALS|\column{}( xn ... x2 x1 -- )
MEMORY\column{}ALLOCATE\column{}( u -- a-addr ior )
MEMORY\column{}FREE\column{}( a-addr -- ior )
MEMORY\column{}RESIZE\column{}( a-addr1 u -- a-addr2 ior )
TOOLS\column{}.S\column{}( -- )
TOOLS\column{}?\column{}( a-addr -- )
TOOLS\column{}DUMP\column{}( addr u -- )
TOOLS\column{}SEE\column{}( "<spaces>name" -- )
TOOLS\column{}WORDS\column{}( -- )
TOOLS EXT\column{};CODE\column{}( -- ) ( R: nest-sys -- )
TOOLS EXT\column{}AHEAD\column{}( -- )
TOOLS EXT\column{}ASSEMBLER\column{}( -- )
TOOLS EXT\column{}BYE\column{}( -- )
TOOLS EXT\column{}CODE\column{}( "<spaces>name" -- )
TOOLS EXT\column{}CS-PICK\column{}( S: u -- )
TOOLS EXT\column{}CS-ROLL\column{}( S: u -- )
TOOLS EXT\column{}EDITOR\column{}( -- )
TOOLS EXT\column{}FORGET\column{}( "<spaces>name" -- )
TOOLS EXT\column{}[ELSE]\column{}( "<spaces>name ... " -- )
TOOLS EXT\column{}[IF]\column{}( flag | flag "<spaces>name ... " -- )
TOOLS EXT\column{}[THEN]\column{}( -- )
SEARCH\column{}DEFINITIONS\column{}( -- )
SEARCH\column{}FORTH-WORDLIST\column{}( -- wid )
SEARCH\column{}GET-CURRENT\column{}( -- wid )
SEARCH\column{}GET-ORDER\column{}( -- widn ... wid1 n )
SEARCH\column{}SEARCH-WORDLIST\column{}( c-addr u wid -- 0 | xt 1 | xt -1 )
SEARCH\column{}SET-CURRENT\column{}( wid -- )
SEARCH\column{}SET-ORDER\column{}( widn ... wid1 n -- )
SEARCH\column{}WORDLIST\column{}( -- wid )
SEARCH EXT\column{}ALSO\column{}( -- )
SEARCH EXT\column{}FORTH\column{}( -- )
SEARCH EXT\column{}ONLY\column{}( -- )
SEARCH EXT\column{}ORDER\column{}( -- )
SEARCH EXT\column{}PREVIOUS\column{}( -- )
STRING\column{}-TRAILING\column{}( c-addr u1 -- c-addr u2 )
STRING\column{}/STRING\column{}( c-addr1 u1 n -- c-addr2 u2 )
STRING\column{}BLANK\column{}( c-addr u -- )
STRING\column{}CMOVE\column{}( c-addr1 c-addr2 u -- )
STRING\column{}CMOVE>\column{}( c-addr1 c-addr2 u -- )
STRING\column{}COMPARE\column{}( c-addr1 u1 c-addr2 u2 -- n )
STRING\column{}SEARCH\column{}( c-addr1 u1 c-addr2 u2 -- c-addr3 u3 flag )
STRING\column{}SLITERAL\column{}( -- c-addr2 u )
RCX\column{}BUTTON_GET
RCX\column{}LCD_4TH
RCX\column{}LCD_CLEAR
RCX\column{}LCD_HIDE
RCX\column{}LCD_NUMBER
RCX\column{}LCD_REFRESH
RCX\column{}LCD_SHOW
RCX\column{}MOTOR_SET
RCX\column{}POWER_GET
RCX\column{}POWER_OFF
RCX\column{}RANGE_SET
RCX\column{}RCX_BUTTON
RCX\column{}RCX_POWER
RCX\column{}RCX_SOUND
RCX\column{}SENSOR_BOOL
RCX\column{}SENSOR_CLEAR
RCX\column{}SENSOR_MODE
RCX\column{}SENSOR_RAW
RCX\column{}SENSOR_READ
RCX\column{}SENSOR_TYPE
RCX\column{}SENSOR_VALUE
RCX\column{}SERVO_SET
RCX\column{}SOUND_GET
RCX\column{}SOUND_PLAY
RCX\column{}SOUND_TONE
RCX\column{}timer_GET
RCX\column{}TIMER_GET
RCX\column{}TIMER_SET
RCX\column{}timer_SET
Other\column{}<S">\column{}( -- &char chars ) 
Other\column{}&Source\column{}( -- addr )
Other\column{}'ato4th\column{}( -- addr )
Other\column{}'next\column{}( -- addr )
Other\column{}'UserIdle\column{}( -- addr )
Other\column{}'UserISR\column{}( -- addr )
Other\column{}COLD\column{}( -- )
Other\column{}COMPILE-ONLY\column{}( -- )
Other\column{}DLShift\column{}( dx1 bits -- dx2 )
Other\column{}DP\column{}( -- addr )
Other\column{}MU*\column{}( ud1 u -- ud2 )
Other\column{}NoOp\column{}(  -- )
Other\column{}Num>Char\column{}( u -- char )
Other\column{}TibSize\column{}( -- n1 )
Other\column{}UD>S\column{}( ud -- u )
Other\column{}US>D\column{}( u -- ud )
