<API>
    <Functions>
        <Function Enhanced="true" Version="100">
            <Name>AbortFlag</Name>
            <Type>AbortFlagType</Type>
            <Arguments/>
            <Documentation>
Return the current abort flag setting.
            </Documentation>
            <CodeSample>
<![CDATA[
AbortFlagType currentFlag = AbortFlag();
]]>
            </CodeSample>
        </Function>
        <Function Version="120">
            <Name>abs</Name>
            <Type>variant</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>variant</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the absolute value of the argument. This function can take any scalar
type as the input argument. The return type matches the input type.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = abs(x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>acos</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the inverse cosine of the specified value. The result is radians.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = acos(x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>acosd</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the inverse cosine of the specified value. The result is degrees.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = acosd(x);
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>Acquire</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>m</Name>
                    <Type>mutex</Type>
                </Argument>
            </Arguments>
            <Documentation>
Acquire the specified mutex variable. If another task already has acquired the
mutex then the current task will be suspended until the mutex is released by
the other task. This function is used to ensure that the current task has
exclusive access to a shared resource, such as the display or a motor. After
the current task has finished using the shared resource the program should call
Release to allow other tasks to acquire the mutex.
            </Documentation>
            <CodeSample>
<![CDATA[
Acquire(motorMutex); // make sure we have exclusive access
// use the motors
Release(motorMutex);
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>ArrayBuild</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>aout</Name>
                    <Type Postfix="[]">variant &amp;</Type>
                </Argument>
                <Argument maxOccurs="unbounded">
                    <Name>src</Name>
                    <Type>const variant</Type>
                </Argument>
            </Arguments>
            <Documentation>
Build a new array from the specified source(s). The output (first) argument must not be one of the input sources.
            </Documentation>
            <CodeSample>
<![CDATA[
ArrayBuild(myArray, src1, src2);
]]>
            </CodeSample>
        </Function>
        <Function Version="100">
            <Name>ArrayInit</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>aout</Name>
                    <Type Postfix="[]">variant &amp;</Type>
                </Argument>
                <Argument>
                    <Name>value</Name>
                    <Type>variant</Type>
                </Argument>
                <Argument>
                    <Name>count</Name>
                    <Type>unsigned int</Type>
                </Argument>
            </Arguments>
            <Documentation>
Initialize the array to have count elements equal to value.
            </Documentation>
            <CodeSample>
<![CDATA[
ArrayInit(myArray, 0, 10);
]]>
            </CodeSample>
        </Function>
        <Function Version="100">
            <Name>ArrayLen</Name>
            <Type>unsigned int</Type>
            <Arguments>
                <Argument>
                    <Name>array</Name>
                    <Type Postfix="[]">const variant</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the length of the specified array.
            </Documentation>
            <CodeSample>
<![CDATA[
unsigned int len = ArrayLen(myArray);
]]>
            </CodeSample>
        </Function>
        <Function Version="100">
            <Name>ArraySubset</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>aout</Name>
                    <Type Postfix="[]">variant &amp;</Type>
                </Argument>
                <Argument>
                    <Name>asrc</Name>
                    <Type Postfix="[]">const variant</Type>
                </Argument>
                <Argument>
                    <Name>idx</Name>
                    <Type>unsigned int</Type>
                </Argument>
                <Argument>
                    <Name>len</Name>
                    <Type>unsigned int</Type>
                </Argument>
            </Arguments>
            <Documentation>
Copy a subset of asrc starting at idx and containing len elements into the
output array.
            </Documentation>
            <CodeSample>
<![CDATA[
ArraySubset(myArray, srcArray, 2, 5;
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>asin</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the inverse sine of the specified value. The result is radians.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = asin(x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>asind</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the inverse sine of the specified value. The result is degrees.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = asind(x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>atan</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the inverse tangent of the specified value. The result is radians.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = atan(x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>atand</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>value</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the inverse tangent of the specified value. The result is degrees.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = atand(x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>atan2</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>y</Name>
                    <Type>float</Type>
                </Argument>
                <Argument>
                    <Name>x</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the principal value of the arc tangent of y/x, expressed in radians.
To compute the value, the function uses the sign of both arguments to determine
the quadrant.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = atan2(y, x);
]]>
            </CodeSample>
        </Function>
        <Function Enhanced="true" Version="120">
            <Name>atan2d</Name>
            <Type>float</Type>
            <Arguments>
                <Argument>
                    <Name>y</Name>
                    <Type>float</Type>
                </Argument>
                <Argument>
                    <Name>x</Name>
                    <Type>float</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the principal value of the arc tangent of y/x, expressed in degrees.
To compute the value, the function uses the sign of both arguments to determine
the quadrant.
            </Documentation>
            <CodeSample>
<![CDATA[
float val = atan2d(y, x);
]]>
            </CodeSample>
        </Function>
  <Function>
    <Name>BatteryLevel</Name>
    <Type>unsigned int</Type>
    <Arguments/>
    <Documentation>
Return the battery level in millivolts.
    </Documentation>
    <CodeSample>
<![CDATA[
unsigned int x = BatteryLevel();
]]>
    </CodeSample>
  </Function>
  <Function>
    <Name>BatteryState</Name>
    <Type>byte</Type>
    <Arguments/>
    <Documentation>
Return battery state information (0..4).
    </Documentation>
    <CodeSample>
<![CDATA[
byte x = BatteryState();
]]>
    </CodeSample>
  </Function>
  <Function>
    <Name>bcd2dec</Name>
    <Type>byte</Type>
    <Arguments>
      <Argument>
        <Name>bcd</Name>
        <Type>byte</Type>
      </Argument>
    </Arguments>
    <Documentation>
Convert a byte value in binary coded decimal (BCD) format into its equivalent
decimal value.
    </Documentation>
    <CodeSample>
<![CDATA[
byte dec = bcd2dec(bcdValue);
]]>
    </CodeSample>
  </Function>
    <Function>
        <Name>BluetoothState</Name>
        <Type>byte</Type>
        <Arguments/>
        <Documentation>
Return a bitmask containing the Bluetooth state. Values that can be set in the
mask are UI_BT_CONNECT_REQUEST, UI_BT_ERROR_ATTENTION, UI_BT_PIN_REQUEST,
UI_BT_STATE_CONNECTED, UI_BT_STATE_OFF, and UI_BT_STATE_VISIBLE.
        </Documentation>
        <CodeSample>
<![CDATA[
byte bState = BluetoothState();
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BluetoothStatus</Name>
        <Type>byte</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
Returns the status of the specified Bluetooth connection. Avoid calling
BluetoothWrite or any other API function that writes data over a Bluetooth
connection while BluetoothStatus returns STAT_COMM_PENDING.
        </Documentation>
        <CodeSample>
<![CDATA[
byte status = BluetoothStatus(1);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BluetoothWrite</Name>
        <Type>char</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
            <Argument>
                <Name>buffer</Name>
                <Type PostFix="[]">const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
Write the data in the buffer to the device on the specified Bluetooth connection.
        </Documentation>
        <CodeSample>
<![CDATA[
char res = BluetoothWrite(1, myData);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BrickDataBluecoreVersion</Name>
        <Type>unsigned int</Type>
        <Arguments/>
        <Documentation>
Return the bluecore version of the NXT.
        </Documentation>
        <CodeSample>
<![CDATA[
unsigned int ver = BrickDataBluecoreVersion();
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BrickDataBtHardwareStatus</Name>
        <Type>byte</Type>
        <Arguments/>
        <Documentation>
Return the Bluetooth hardware status of the NXT.
        </Documentation>
        <CodeSample>
<![CDATA[
byte hws = BrickDataBtHardwareStatus();
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BrickDataBtStateStatus</Name>
        <Type>byte</Type>
        <Arguments/>
        <Documentation>
Return the Bluetooth state status of the NXT.
        </Documentation>
        <CodeSample>
<![CDATA[
byte bss = BrickDataBtStateStatus();
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BrickDataName</Name>
        <Type>string</Type>
        <Arguments/>
        <Documentation>
Return the name of the NXT.
        </Documentation>
        <CodeSample>
<![CDATA[
string name = BrickDataName();
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BrickDataTimeoutValue</Name>
        <Type>byte</Type>
        <Arguments/>
        <Documentation>
Return the timeout value of the NXT.
        </Documentation>
        <CodeSample>
<![CDATA[
byte tv = BrickDataTimeoutValue();
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTConnectionClass</Name>
        <Type>unsigned long</Type>
        <Arguments>
        <Argument>
        <Name>conn</Name>
        <Type>const byte</Type>
        </Argument>
        </Arguments>
        <Documentation>
Return the class of the device at the specified index within the Bluetooth
connection table.
        </Documentation>
        <CodeSample>
<![CDATA[
unsigned long cod = BTConnectionClass(1);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTConnectionHandleNum</Name>
        <Type>void</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
This method returns the handle number of the device at the specified index
within the Bluetooth connection table.
        </Documentation>
        <CodeSample>
<![CDATA[
byte handlenum = BTConnectionHandleNum(1);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTConnectionLinkQuality</Name>
        <Type>void</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
This method returns the link quality of the device at the specified index
within the Bluetooth connection table. Currently the NXT firmware always
reports a link quality of zero.
        </Documentation>
        <CodeSample>
<![CDATA[
byte linkquality = BTConnectionLinkQuality(1);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTConnectionName</Name>
        <Type>void</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
This method returns the name of the device at the specified index in the
Bluetooth connection table.
        </Documentation>
        <CodeSample>
<![CDATA[
string name = BTConnectionName(0);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTConnectionPinCode</Name>
        <Type>void</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
This method returns the pin code of the device at the specified index in the
Bluetooth connection table.
        </Documentation>
        <CodeSample>
<![CDATA[
string pincode = BTConnectionPinCode(0);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTConnectionStreamStatus</Name>
        <Type>void</Type>
        <Arguments>
            <Argument>
                <Name>conn</Name>
                <Type>const byte</Type>
            </Argument>
        </Arguments>
        <Documentation>
This method returns the stream status of the device at the specified index
within the Bluetooth connection table.
        </Documentation>
        <CodeSample>
<![CDATA[
byte streamstatus = BTConnectionStreamStatus(1);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTDeviceClass</Name>
        <Type>unsigned long</Type>
        <Arguments>
        <Argument>
            <Name>devidx</Name>
            <Type>const byte/Type>
        </Argument>
        </Arguments>
        <Documentation>
This method returns the class of the device at the specified index within the
Bluetooth device table.
        </Documentation>
        <CodeSample>
<![CDATA[
unsigned long class = BTDeviceClass(1);
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>BTDeviceCount</Name>
        <Type>byte</Type>
        <Arguments />
        <Documentation>
This method returns the number of devices defined within the Bluetooth device
table.
        </Documentation>
        <CodeSample>
<![CDATA[
byte x = BTDeviceCount();
]]>
        </CodeSample>
    </Function>
<Function>
<Name>BTDeviceName</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>BTDeviceNameCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>BTDeviceStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>BTInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>BTInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>BTOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>BTOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, bool resetCount</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonLongPressCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonLongReleaseCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonPressCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonPressed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, bool resetCount</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonReleaseCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonShortReleaseCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ButtonState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ByteArrayToStr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>variant array[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ByteArrayToStrEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>variant array[], string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ceil</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CircleOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, byte radius, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ClearScreen</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ClearSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CloseFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>Coast</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CoastEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, const byte reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorADRaw</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte color</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorBoolean</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte color</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorCalibration</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte point, const byte color</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorCalibrationState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorCalLimits</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte point</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorSensorRaw</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte color</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ColorSensorValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte color</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CommandFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>cos</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float radians</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>cosd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float degrees</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>cosh</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float radians</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>coshd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float degrees</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CreateFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, unsigned int fsize, byte &amp; handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CreateFileLinear</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, unsigned int fsize, byte &amp; handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CreateFileNonLinear</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, unsigned int fsize, byte &amp; handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>CurrentTick</Name>
            <Type>unsigned long</Type>
            <Arguments />
            <Documentation>
Return an unsigned 32-bit value, which is the current system timing value
(called a "tick") in milliseconds.
            </Documentation>
            <CodeSample>
<![CDATA[
unsigned long x = CurrentTick();
]]>
            </CodeSample>
        </Function>
<Function>
<Name>CustomSensorActiveStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CustomSensorPercentFullScale</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>CustomSensorZeroOffset</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DeleteFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DisplayContrast</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DisplayDisplay</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DisplayEraseMask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DisplayFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DisplayTextLinesCenterFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DisplayUpdateMask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxDistance</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxEnergize</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxGP2D12</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxGP2D120</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxGP2YA02</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxGP2YA21</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxMaxDistance</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxMinDistance</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxModuleType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxNumPoints</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>DISTNxVoltage</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>EllipseOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, byte radius1, byte radius1, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>ExitTo</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>name</Name>
                    <Type>task</Type>
                </Argument>
            </Arguments>
            <Documentation>
Immediately exit the current task and start executing the specified task.            
            </Documentation>
            <CodeSample>
<![CDATA[
ExitTo(nextTask);
]]>
        </CodeSample>
    </Function>
<Function>
<Name>exp</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>fclose</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>fgetc</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>FindFirstFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, byte handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>FindNextFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, byte handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>FirstTick</Name>
            <Type>unsigned long</Type>
            <Arguments />
            <Documentation>
Return an unsigned 32-bit value, which is the system timing value (called a
"tick") in milliseconds at the time that the program began running.
            </Documentation>
            <CodeSample>
<![CDATA[
unsigned long x = FirstTick();
]]>
            </CodeSample>
        </Function>
<Function>
<Name>Flatten</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>long num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>FlattenVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>variant x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>Float</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>floor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>Follows</Name>
            <Type>void</Type>
            <Arguments>
                <Argument maxOccurs="unbounded">
                    <Name>name</Name>
                    <Type>task</Type>
                </Argument>
            </Arguments>
            <Documentation>
Schedule this task to follow the specified tasks so that it will execute once
any of the specified tasks has completed executing. This function should be
called once within a task - preferably at the start of the task definition. If
multiple tasks declare that they follow the same task then they will all execute
simultaneously unless other dependencies prevent them from doing so.            
            </Documentation>
            <CodeSample>
<![CDATA[
Follows(main);
]]>
            </CodeSample>
        </Function>
<Function>
<Name>FontNumOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, string filename, long number, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>FontTextOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, string filename, string str, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ForceOff</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>FormatNum</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fmt, variant number</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>frac</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>FreeMemory</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetBrickDataAddress</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetBTConnectionAddress</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetBTDeviceAddress</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetBTInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetBTOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>getc</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetDisplayNormal</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte x, const byte line, unsigned int cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetDisplayPopup</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte x, const byte line, unsigned int cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetHSInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetHSOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetInput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte field</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetLSInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetLSOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte field</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetUSBInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetUSBOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GetUSBPollBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte &amp; data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GraphicArrayOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, byte data[], unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GraphicArrayOutEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte x, byte y, byte data[], byte vars[], unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GraphicOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, string filename, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>GraphicOutEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte x, byte y, string filename, byte vars[], unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSSpeed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HSState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTIRTrain</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFComboDirect</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte outa, byte outb</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFComboPWM</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte outa, byte outb</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFRawOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte nibble0, byte nibble1, byte nibble2</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFRepeat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte count, unsigned int delay</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFSingleOutputCST</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte out, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFSingleOutputPWM</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte out, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFSinglePin</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte out, byte pin, byte func, bool cont</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTPFTrain</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXAddToDatalog</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, byte value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXBatteryLevel</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXClearAllEvents</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXClearCounter</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte counter</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXClearMsgOp</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXClearSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXClearSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXClearTimer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int timer</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXCreateDatalog</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int size</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXDecCounter</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte counter</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXDeleteSub</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int s</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXDeleteSubs</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXDeleteTask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXDeleteTasks</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXDisableOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXEnableOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXEvent</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXFloat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXFwd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXIncCounter</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte counter</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXInvertOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXLSCalibrateOp</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>voi</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXMuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXObvertOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXOff</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXOn</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXOnFor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, unsigned int ms</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXOnFwd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXOnRev</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPBTurnOff</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPing</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPlaySound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int snd</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPlayTone</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int freq, byte duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPlayToneVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte varnum, byte duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPoll</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, byte value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXPollMemory</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int address, byte count</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXRemote</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int cmd</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXRev</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSelectDisplay</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSelectProgram</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int prog</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSendSerial</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte first, byte count</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetDirection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, byte dir</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetEvent</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte evt, byte src, byte type</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetGlobalDirection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, byte dir</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetGlobalOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetIRLinkPort</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetMaxPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, byte pwrsrc, byte pwrval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetMessage</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte msg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs, byte pwrsrc, byte pwrval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetPriority</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte p</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetSensorMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte port, byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetSensorType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte port, byte type</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetSleepTime</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetTxPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int pwr</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXSetWatch</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte hours, byte minutes</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXStartTask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXStopAllTasks</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXStopTask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const int t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXToggle</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTRCXUnmuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutCalibrateSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutMuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSelectSounds</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte grp</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSendVLL</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, byte value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetEventFeedback</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetLight</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetScoutMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetSensorClickTime</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetSensorHysteresis</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetSensorLowerLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutSetSensorUpperLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>HTScoutUnmuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CBytes</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte inbuf[], byte &amp; count, byte &amp; outbuf[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CBytesReady</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CCheckStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte buflen, byte &amp; buffer[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; bready</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte retlen, byte buffer[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>IOMA</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const unsigned int num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>isNAN</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const variant &amp; value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LineOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x1, int y1, int x2, int y2, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>log</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>log10</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LongAbort</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LowspeedBytesReady</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LowspeedCheckStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LowspeedRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte buflen, byte &amp; buffer[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LowspeedStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; bready</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LowspeedWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte retlen, byte buffer[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSChannelState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSErrorType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSInputBufferBytesToRx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSOutputBufferBytesToRx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSSpeed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>LSState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorActualSpeed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorBlockTachoCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorOverload</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorPwnFreq</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorRegDValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorRegIValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorRegPValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorRegulation</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorRotationCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorRunState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorTachoCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorTachoLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MotorTurnRatio</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSIRTrain</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSIRTrainEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFComboDirect</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte outa, byte outb</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFComboDirectEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte outa, byte outb</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFComboPWM</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte outa, byte outb</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFComboPWMEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte outa, byte outb</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFRawOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte nibble0, byte nibble1, byte nibble2</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFRawOutputEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte nibble0, byte nibble1, byte nibble2</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFRepeat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte count, unsigned int delay</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFRepeatEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ort, const byte addr, byte count, unsigned int delay</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFSingleOutputCST</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte out, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFSingleOutputCSTEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte out, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFSingleOutputPWM</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte out, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFSingleOutputPWMEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte out, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFSinglePin</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte out, byte pin, byte func, bool cont</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFSinglePinEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte out, byte pin, byte func, bool cont</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFTrain</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte channel, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSPFTrainEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte channel, byte func</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXAbsVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXAddToDatalog</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXAndVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXBatteryLevel</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXBoot</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXCalibrateEvent</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>evt, low, hi, hyst</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXClearAllEvents</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXClearCounter</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>counter</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXClearMsg</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXClearSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXClearSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXClearTimer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>timer</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXCreateDatalog</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>size</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDecCounter</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>counter</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDeleteSub</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>s</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDeleteSubs</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDeleteTask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDeleteTasks</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDisableOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXDivVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXEnableOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXEvent</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXFloat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXFwd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXIncCounter</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>counter</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXInvertOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXMulVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXMuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXObvertOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXOff</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXOn</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXOnFor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, ms</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXOnFwd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXOnRev</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXOrVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPBTurnOff</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPing</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPlaySound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>snd</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPlayTone</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>freq, duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPlayToneVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPoll</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>src, value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXPollMemory</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>address</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXRemote</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>cmd</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXReset</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXRev</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSelectDisplay</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSelectProgram</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>prog</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSendSerial</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>first, count</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSet</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>dstsrc, dstval, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetDirection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, dir</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetEvent</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>evt, src, type</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetGlobalDirection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, dir</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetGlobalOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetMaxPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, pwrsrc, pwrval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetMessage</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>msg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetNRLinkEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>port, addr</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetNRLinkPort</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs, pwrsrc, pwrval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetPriority</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>p</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetSensorMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>port, mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetSensorType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>port, type</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetSleepTime</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetTxPower</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>pwr</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetUserDisplay</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value, precision</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSetWatch</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>hours, minutes</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSgnVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXStartTask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXStopAllTasks</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXStopTask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>t</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSubVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXSumVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>varnum, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXToggle</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>outputs</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXUnlock</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSRCXUnmuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSReadValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte reg, const byte numbytes</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSReadValueEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, const byte reg, const byte numbytes</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutCalibrateSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutMuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSelectSounds</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte grp</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSendVLL</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetCounterLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ctr, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetEventFeedback</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetLight</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetScoutMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetScoutRules</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte m, const byte t, const byte l, const byte tm, const byte fx</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetSensorClickTime</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetSensorHysteresis</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetSensorLowerLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetSensorUpperLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutSetTimerLimit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte tmr, byte src, unsigned int value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>MSScoutUnmuteSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CSendCommand</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte port, byte cmd</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>I2CSendCommandEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte port, byte addr, byte cmd</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>muldiv32</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>long a, long b, long c</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLink2400</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLink4800</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkFlush</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkIRLong</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkIRShort</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkSetPF</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkSetRCX</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkSetTrain</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkStatusEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NRLinkTxRaw</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NumOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, long number, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>NumToStr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>variant num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
	<Name>Off</Name>
	<Type>void</Type>
	<Arguments>
		<Argument>
			<Name>ports</Name>
			<Type>const byte</Type>
		</Argument>
	</Arguments>
	<Documentation>
Turn the specified outputs off (with braking). Outputs can be a constant
(OUT_A, OUT_B, OUT_C, OUT_AB, OUT_AC, OUT_BC, or OUT_ABC) or a variable
containing the desired output ports. When using a variable to pass in
multiple motor ports, use a byte array containing the desired motor port
constants.
	</Documentation>
	<CodeSample>
<![CDATA[
Off(OUT_A); // turn off output A
byte myMotors[] = {OUT_A, OUT_B};
Off(OUT_AB); // turn off outputs A and B
Off(myMotors); // turn off outputs A and B
]]>
	</CodeSample>
</Function>
<Function>
    <Name>OffEx</Name>
    <Type>void</Type>
    <Arguments>
        <Argument>
            <Name>ports</Name>
            <Type>const byte</Type>
        </Argument>
        <Argument>
            <Name>reset</Name>
            <Type>const byte</Type>
        </Argument>
    </Arguments>
    <Documentation>
Turn the specified outputs off (with braking). Outputs can be a constant
(OUT_A, OUT_B, OUT_C, OUT_AB, OUT_AC, OUT_BC, or OUT_ABC) or a variable
containing the desired output ports. When using a variable to pass in
multiple motor ports, use a byte array containing the desired motor port
constants. The reset parameter controls whether any of the three position counters
are reset. It must be a constant (RESET_NONE, RESET_COUNT, RESET_BLOCK_COUNT,
RESET_ROTATION_COUNT, RESET_BLOCKANDTACHO, or RESET_ALL).
    </Documentation>
    <CodeSample>
    <![CDATA[
OffEx(OUT_A, RESET_ALL); // turn off output A
    ]]>
    </CodeSample>
</Function>
<Function>
<Name>OnBrickProgramPointer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, const byte reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdReg</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdRegEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode, const byte reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdRegExPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode, const byte reset, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdRegPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdSync</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdSyncEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct, const byte reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdSyncExPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct, const byte reset, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnFwdSyncPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRev</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevReg</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevRegEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode, const byte reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevRegExPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode, const byte reset, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevRegPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, byte regmode, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevSync</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevSyncEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct, const byte reset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevSyncExPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct, const byte reset, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OnRevSyncPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, char turnpct, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OpenFileAppend</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, unsigned int &amp; fsize, byte &amp; handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OpenFileRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, unsigned int &amp; fsize, byte &amp; handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>OpenFileReadLinear</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname, unsigned int &amp; fsize, byte &amp; handle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PlayFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string filename</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PlayFileEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string filename, byte volume, bool loop</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PlayTone</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int frequency, unsigned int duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PlayToneEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int frequency, unsigned int duration, byte volume, bool loop</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PointOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PolyOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>LocationType points[], unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>pow</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x, float y</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>PowerDown</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>Precedes</Name>
            <Type>void</Type>
            <Arguments>
                <Argument maxOccurs="unbounded">
                    <Name>name</Name>
                    <Type>task</Type>
                </Argument>
            </Arguments>
            <Documentation>
Schedule the specified tasks for execution once the current task has completed
executing. The tasks will all execute simultaneously unless other dependencies
prevent them from doing so. This function should be called once within a task -
preferably at the start of the task definition.
            </Documentation>
            <CodeSample>
<![CDATA[
Precedes(moving, drawing, playing); 
]]>
            </CodeSample>
        </Function>
<Function>
<Name>PSPNxEnergize</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
    <Function>
        <Name>Random</Name>
        <Type>unsigned int</Type>
        <Arguments>
            <Argument>
                <Name>max</Name>
                <Type>unsigned int</Type>
            </Argument>
        </Arguments>
        <Documentation>
Return an unsigned 16-bit random number between 0 and max (exclusive). The
argument can be a constant or a variable.
        </Documentation>
        <CodeSample>
<![CDATA[
unsigned int x = Random(10); // return a value of 0..9
]]>
        </CodeSample>
    </Function>
    <Function>
        <Name>Random</Name>
        <Type>int</Type>
        <Arguments />
        <Documentation>
Return a signed 16-bit random number.
        </Documentation>
        <CodeSample>
<![CDATA[
int x = Random();
]]>
        </CodeSample>
    </Function>
<Function>
<Name>Read</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle, variant n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadButtonEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, bool reset, bool &amp; pressed, unsigned int count</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadBytes</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle, unsigned int len, byte &amp; buf[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadLn</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle, variant n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadNRLinkBytes</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; bytes[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadNRLinkBytesEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte &amp; bytes[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorColorEx</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>colorval</Name>
<Type>int &amp;</Type>
</Argument>
<Argument>
<Name>raw</Name>
<Type PostFix="[]">unsigned int &amp;</Type>
</Argument>
<Argument>
<Name>norm</Name>
<Type PostFix="[]">unsigned int &amp;</Type>
</Argument>
<Argument>
<Name>scaled</Name>
<Type PostFix="[]">int &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
bool result = ReadSensorColorEx(S1, cval, rawVals, normVals, scaledVals);
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorColorRaw</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>raw</Name>
<Type PostFix="[]">unsigned int &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
bool result = ReadSensorColorRaw(S1, rawVals);
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTAccel</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>x</Name>
<Type>int &amp;</Type>
</Argument>
<Argument>
<Name>y</Name>
<Type>int &amp;</Type>
</Argument>
<Argument>
<Name>z</Name>
<Type>int &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
bool result = ReadSensorHTAccel(S1, x, y, z);
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTColor</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>ColorNum</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>Red</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>Green</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>Blue</Name>
<Type>byte &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
bool result = ReadSensorHTColor(S1, cnum, r, g, b);
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTColor2Active</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>ColorNum</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>Red</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>Green</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>Blue</Name>
<Type>byte &amp;</Type>
</Argument>
<Argument>
<Name>White</Name>
<Type>byte &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
bool result = ReadSensorHTColor2Active(S1, cnum, r, g, b, w);
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTIRReceiver</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>pfdata</Name>
<Type PostFix="[]">char &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
char pfData[];
if (ReadSensorHTIRReceiver(S1, pfData)) {
  OnFwd(OUT_A, pfData[HT_CH1_A]);
}
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTIRReceiverEx</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>offset</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>pfchar</Name>
<Type>char &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
char pfchar;
if (ReadSensorHTIRReceiverEx(S1, HT_CH1_A, pfchar)) {
  OnFwd(OUT_A, pfchar);
}
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTIRSeeker</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; dir, byte &amp; s1, byte &amp; s3, byte &amp; s5, byte &amp; s7, byte &amp; s9</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTIRSeeker2AC</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; dir, byte &amp; s1, byte &amp; s3, byte &amp; s5, byte &amp; s7, byte &amp; s9</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTIRSeeker2DC</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; dir, byte &amp; s1, byte &amp; s3, byte &amp; s5, byte &amp; s7, byte &amp; s9, byte &amp; avg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTNormalizedColor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; ColorIdx, byte &amp; Red, byte &amp; Green, byte &amp; Blue</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTNormalizedColor2Active</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; ColorIdx, byte &amp; Red, byte &amp; Green, byte &amp; Blue</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTRawColor</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, unsigned int &amp; Red, unsigned int &amp; Green, unsigned int &amp; Blue</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTRawColor2</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, unsigned int &amp; Red, unsigned int &amp; Green, unsigned int &amp; Blue, unsigned int &amp; White</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorHTTouchMultiplexer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; t1, byte &amp; t2, byte &amp; t3, byte &amp; t4</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSAccel</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, int &amp; x, int &amp; y, int &amp; z</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSAccelEx</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, int &amp; x, int &amp; y, int &amp; z</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSPlayStation</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; b1, byte &amp; b2, byte &amp; xleft, byte &amp; yleft, byte &amp; xright, byte &amp; yright</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSPlayStationEx</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte &amp; b1, byte &amp; b2, byte &amp; xleft, byte &amp; yleft, byte &amp; xright, byte &amp; yright</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSRTClock</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; sec, byte &amp; min, byte &amp; hrs, byte &amp; dow, byte &amp; date, byte &amp; month, byte &amp; year</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSTilt</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, byte &amp; x, byte &amp; y, byte &amp; z</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReadSensorMSTiltEx</Name>
<Type>bool</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, byte &amp; x, byte &amp; y, byte &amp; z</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RebootInFirmwareMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReceiveMessage</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, bool clear, string &amp; msg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReceiveRemoteBool</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, bool clear, bool &amp; bval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReceiveRemoteMessageEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, bool clear, string &amp; str, long &amp; val, bool &amp; bval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReceiveRemoteNumber</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, bool clear, long &amp; val</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ReceiveRemoteString</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, bool clear, string &amp; str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RechargeableBattery</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RectOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, int width, int height, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>Release</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>m</Name>
                    <Type>mutex</Type>
                </Argument>
            </Arguments>
            <Documentation>
Release the specified mutex variable. Use this to relinquish a mutex so that it
can be acquired by another task. Release should always be called after a
matching call to Acquire and as soon as possible after a shared resource is no
longer needed.
            </Documentation>
            <CodeSample>
<![CDATA[
Acquire(motorMutex); // make sure we have exclusive access
// use the motors
Release(motorMutex); // release mutex for other tasks
]]>
            </CodeSample>
        </Function>
<Function>
<Name>RemoteKeepAlive</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteMessageRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte queue</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteMessageWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte queue, string msg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemotePlaySoundFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, string filename, bool bloop</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemotePlayTone</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, unsigned int frequency, unsigned int duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteResetMotorPosition</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte port, bool brelative</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteResetScaledValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteSetInputMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte port, byte type, byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteSetOutputState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte port, char speed, byte mode, byteregmode, char turnpct, byte runstate, unsigned long tacholimit</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteStartProgram</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, string filename</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteStopProgram</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RemoteStopSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>remove</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string fname</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>rename</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string oldname, string newname</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RenameFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string oldname, string newname</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResetAllTachoCounts</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResetBlockTachoCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResetRotationCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResetScreen</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResetSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>ResetSleepTimer</Name>
            <Type>void</Type>
            <Arguments />
            <Documentation>
Reset the system sleep timer back to the SleepTime value. Executing this
function periodically can keep the NXT from shutting down while a program is
running.            
            </Documentation>
            <CodeSample>
<![CDATA[
ResetSleepTimer();
]]>
            </CodeSample>
        </Function>
<Function>
<Name>ResetTachoCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResizeFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string filename, unsigned int newsize</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>ResolveHandle</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string filename, byte &amp; handle, bool &amp; writeable</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICArg</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte arg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICImgPoint</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int X, int Y</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICImgRect</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>ricImgPoint Pt, int W, int H</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICMapArg</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte mapidx, byte arg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICMapElement</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int Domain, int Range</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICMapFunction</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>ricMapElement MapElement, ...</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpCircle</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, ricImgPoint Point, int Radius</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpCopyBits</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, int DataAddr, ricImgRect SrcRect, ricImgPoint DstPoint</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpDescription</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int Options, int Width, int Height</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpEllipse</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, ricImgPoint Point, int Radius1, int Radius1</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpLine</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, ricImgPoint Point1, ricImgPoint Point2</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpNumBox</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, ricImgPoint Point, int Value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpPixel</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, ricImgPoint Point, int Value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpPolygon</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, int Count, ricPolygonPoints ThePoints</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpRect</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int CopyOptions, ricImgPoint Point, int Width, int Height</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpSprite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int DataAddr, int Rows, int BytesPerRow, ricSpriteData SpriteData</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICOpVarMap</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int DataAddr, int MapCount, ricMapFunction MapFunction</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICPolygonPoints</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>ricImgPoint pPoint1, ricImgPoint pPoint2, ...</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICSetValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte &amp; data[], const unsigned int &amp; idx, const int &amp; newval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RICSpriteData</Name>
<Type>void</Type>
<Arguments>
<Argument maxOccurs="unbounded">
<Name>data</Name>
<Type>byte</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RotateMotor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, int angle</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RotateMotorEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, int angle, char turnpct, bool sync, bool stop</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RotateMotorExPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, int angle, char turnpct, bool sync, bool stop, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RotateMotorPID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, char power, int angle, byte p, byte i, byte d</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Control</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte cmd, byte baud</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485DataAvailable</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Exit</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Init</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Read</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte buffer[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485SendingData</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Status</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>bool &amp; sendingData, bool &amp; dataAvail</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Uart</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte baud</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RS485Write</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte buffer[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RunNRLinkMacro</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte macro</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>RunNRLinkMacroEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr, const byte macro</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendMessage</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, string msg</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendRemoteBool</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte queue, bool bval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendRemoteNumber</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte queue, long val</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendRemoteString</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte conn, byte queue, string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendResponseBool</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, bool bval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendResponseNumber</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, long val</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendResponseString</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte queue, string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendRS485Bool</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>bool bval</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendRS485Number</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>long val</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SendRS485String</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>Sensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorBoolean</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorDigiPinsDirection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorDigiPinsOutputLevel</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorDigiPinsStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTColorNum</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTCompass</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTEOPD</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTGyro</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte offset</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTIRSeeker2ACDir</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTIRSeeker2Addr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTIRSeeker2DCDir</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorHTIRSeekerDir</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorInvalid</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorMSCompass</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorMSCompassEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte addr</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorMSDROD</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorMSPressure</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorMSPressureRaw</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorNormalized</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorRaw</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorScaled</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SensorUS</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetAbortFlag</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte abortFlag</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBatteryState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte state</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBluetoothState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte state</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBrickDataAddress</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte p, byte addr[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBrickDataBluecoreVersion</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int version</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBrickDataBtHardwareStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte status</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBrickDataBtStateStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte status</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBrickDataName</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBrickDataTimeoutValue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte timeout</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionAddress</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, const byte addr[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionClass</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, unsigned long class</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionHandleNum</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, const byte handleNum</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionLinkQuality</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, const byte quality</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionName</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionPinCode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, const byte code[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTConnectionStreamStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte conn, const byte status</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTDeviceAddress</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx, const byte addr[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTDeviceClass</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx, unsigned long class</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTDeviceCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte count</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTDeviceName</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx, string str</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTDeviceNameCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte count</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTDeviceStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte devidx, const byte status</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetBTOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetButtonLongPressCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetButtonLongReleaseCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetButtonPressCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetButtonReleaseCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetButtonShortReleaseCount</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetButtonState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte btn, const byte state</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetCommandFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte cmdFlags</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetCustomSensorActiveStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetCustomSensorPercentFullScale</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetCustomSensorZeroOffset</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const int n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayContrast</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte contrast</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayDisplay</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned long n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayEraseMask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned long eraseMask</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte flags</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayNormal</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte x, const byte line, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayPopup</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte x, const byte line, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayTextLinesCenterFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte ctrFlags</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetDisplayUpdateMask</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned long updMask</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte hsFlags</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSSpeed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte hsSpeed</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHSState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte hsState</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetHTIRSeeker2Mode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetInput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const int field, value</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetIOMA</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLongAbort</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>bool longAbort</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSChannelState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte chState</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSErrorType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte errType</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSInputBufferBytesToRx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSOutputBufferBytesToRx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSSpeed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte lsSpeed</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetLSState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte lsState</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetMotorPwnFreq</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte pwnFreq</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetOnBrickProgramPointer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte obpStep</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetOutput</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte ports, const byte field1, variant value1, const byte field2, variant value2, const byte fieldN, variant valueN</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensor</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const int typemode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorBoolean</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorColorBlue</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte &amp; port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorColorFull</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte &amp; port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorColorGreen</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte &amp; port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorColorNone</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte &amp; port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorColorRed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte &amp; port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorDigiPinsDirection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorDigiPinsOutputLevel</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorDigiPinsStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorHTEOPD</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorHTGyro</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorLight</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorLowspeed</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const int mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorMSDRODActive</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorMSDRODInactive</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorMSPressure</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorTouch</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSensorType</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte port, const int type</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>SetSleepTimeout</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>minutes</Name>
                    <Type>byte</Type>
                </Argument>
            </Arguments>
            <Documentation>
Set the NXT sleep timeout value to the specified number of minutes.            
            </Documentation>
            <CodeSample>
<![CDATA[
SetSleepTimeout(8);
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>SetSleepTimer</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>minutes</Name>
                    <Type>byte</Type>
                </Argument>
            </Arguments>
            <Documentation>
Set the system sleep timer to the specified number of minutes.            
            </Documentation>
            <CodeSample>
<![CDATA[
SetSleepTimer(3);
]]>
            </CodeSample>
        </Function>
<Function>
<Name>SetSoundDuration</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int duration</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSoundFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte flags</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSoundFrequency</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int frequency</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSoundMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte mode</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSoundModuleState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte state</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSoundSampleRate</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>unsigned int sampleRate</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetSoundVolume</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte volume</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUIButton</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte btn</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUIState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte state</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBInputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBOutputBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBPollBuffer</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte offset, byte cnt, byte data[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBPollBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBPollBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUSBState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte usbState</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetUsbState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte usbState</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetVMRunState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte vmRunState</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SetVolume</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte volume</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
    <Function>
        <Name>sign</Name>
        <Type>char</Type>
        <Arguments>
            <Argument>
                <Name>value</Name>
                <Type>variant</Type>
            </Argument>
        </Arguments>
        <Documentation>
Return -1, 0, or 1 indicating the sign of the input argument. This function
can take any scalar type as the input argument.
        </Documentation>
        <CodeSample>
<![CDATA[
char val = sign(x); // return -1, 0, or 1
]]>
        </CodeSample>
    </Function>
<Function>
<Name>sin</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float radians</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>sind</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float degrees</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>sinh</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float radians</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>sinhd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float degrees</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>SleepNow</Name>
            <Type>void</Type>
            <Arguments />
            <Documentation>
Turn off the NXT immediately.
            </Documentation>
            <CodeSample>
<![CDATA[
SleepNow();
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>SleepTimeout</Name>
            <Type>byte</Type>
            <Arguments />
            <Documentation>
Return the number of minutes that the NXT will remain on before it
automatically shuts down.
            </Documentation>
            <CodeSample>
<![CDATA[
byte x = SleepTimeout();
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>SleepTimer</Name>
            <Type>byte</Type>
            <Arguments />
            <Documentation>
Return the number of minutes left in the countdown to zero from the original
SleepTimeout value. When the SleepTimer value reaches zero the NXT will shutdown.
            </Documentation>
            <CodeSample>
<![CDATA[
byte x = SleepTimer();
]]>
            </CodeSample>
        </Function>
<Function>
<Name>SoundDuration</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SoundFlags</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SoundFrequency</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SoundMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SoundSampleRate</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SoundState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SoundVolume</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>sqrt</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>StartTask</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>name</Name>
                    <Type>task</Type>
                </Argument>
            </Arguments>
            <Documentation>
Start the specified task.            
            </Documentation>
            <CodeSample>
<![CDATA[
StartTask(sound); // start the sound task
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>Stop</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>bvalue</Name>
                    <Type>bool</Type>
                </Argument>
            </Arguments>
            <Documentation>
Stop the running program if bvalue is true. This will halt the program
completely, so any code following this command will be ignored.
            </Documentation>
            <CodeSample>
<![CDATA[
Stop(x == 24); // stop the program if x==24
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>StopAllTasks</Name>
            <Type>void</Type>
            <Arguments />
            </Arguments>
            <Documentation>
Stop all currently running tasks. This will halt the program completely, so
any code following this command will be ignored.            
            </Documentation>
            <CodeSample>
<![CDATA[
StopAllTasks(); // stop the program
]]>
            </CodeSample>
        </Function>
<Function>
<Name>StopSound</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function Enhanced="true">
            <Name>StopTask</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>name</Name>
                    <Type>task</Type>
                </Argument>
            </Arguments>
            <Documentation>
Stop the specified task. This requires the enhanced NBC/NXC firmware.
            </Documentation>
            <CodeSample>
<![CDATA[
StopTask(sound); // stop the sound task
]]>
            </CodeSample>
        </Function>
<Function>
<Name>strcat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string &amp; dest, const string &amp; src</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>StrCat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str1, string str2, string str3, string strN</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>strcmp</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const string &amp; str1, const string &amp; str2</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>strcpy</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string &amp; dest, const string &amp; src</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>StrIndex</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str, unsigned int idx</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>strlen</Name>
            <Type>unsigned int</Type>
            <Arguments>
                <Argument>
                    <Name>val</Name>
                    <Type>string</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the length of the specified string. The length of a string does not
include the null terminator at the end of the string.            
            </Documentation>
            <CodeSample>
<![CDATA[
x = strlen(msg); // return the length of msg
]]>
            </CodeSample>
        </Function>
        <Function>
            <Name>StrLen</Name>
            <Type>unsigned int</Type>
            <Arguments>
                <Argument>
                    <Name>val</Name>
                    <Type>string</Type>
                </Argument>
            </Arguments>
            <Documentation>
Return the length of the specified string. The length of a string does not
include the null terminator at the end of the string.
            </Documentation>
            <CodeSample>
<![CDATA[
x = StrLen(msg); // return the length of msg
]]>
            </CodeSample>
        </Function>
<Function>
<Name>strncat</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string &amp; dest, const string &amp; src, const int num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>strncpy</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string &amp; dest, const string &amp; src, const int num</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>StrReplace</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str, unsigned int idx, string strnew</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>StrToByteArray</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str, array</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>StrToNum</Name>
            <Type>variant</Type>
            <Arguments>
            <Argument>
            <Name>val</Name>
            <Type>string</Type>
            </Argument>
            </Arguments>
            <Documentation>
Return the numeric value specified by the string passed to the function. If the
content of the string is not a numeric value then this function returns zero.
            </Documentation>
            <CodeSample>
<![CDATA[
x = StrToNum(strVal);
]]>
            </CodeSample>
        </Function>
<Function>
<Name>SubStr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str, unsigned int idx, unsigned int len</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCall</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>const byte func, args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysColorSensorRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>ColorSensorReadType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
ColorSensorReadType args;
args.Port = S1;
SysColorSensorRead(args);
if (args.Result = NO_ERR) {
  // use color sensor values (ColorValue,
  // RawArray, NormalizedArray, or ScaledArray);
}
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommBTCheckStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommBTCheckStatusType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommBTConnection</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommBTConnectionType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommBTOnOff</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommBTOnOffType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommBTWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommBTWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommExecuteFunction</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommExecuteFunctionType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommHSCheckStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommHSCheckStatusType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommHSControl</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommHSControlType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommHSRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommHSReadWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommHSWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommHSReadWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommLSCheckStatus</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommLSCheckStatusType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommLSRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommLSReadType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommLSWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommLSWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysCommLSWriteEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>CommLSWriteExType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDatalogGetTimes</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DatalogGetTimesType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDatalogWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DatalogWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDisplayExecuteFunction</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DisplayExecuteFunctionType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawCircle</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawCircleType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawEllipse</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawEllipseType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawFont</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawFontType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawGraphic</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawGraphicType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawGraphicArray</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawGraphicArrayType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawLine</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawLineType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawPoint</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawPointType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawPolygon</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawPolygonType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawRect</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawRectType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysDrawText</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>DrawTextType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileClose</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileCloseType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileDelete</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileDeleteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileFindFirst</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileFindType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileFindNext</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileFindType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileOpenAppend</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileOpenType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileOpenRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileOpenType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileOpenReadLinear</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileOpenType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileOpenWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileOpenType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileOpenWriteLinear</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileOpenType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileOpenWriteNonLinear</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileOpenType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileReadWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileRename</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileRenameType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileResize</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileResizeType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileResolveHandle</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileResolveHandleType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileSeek</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileSeekType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysFileWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>FileReadWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysGetStartTick</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>GetStartTickType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysIOMapRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>IOMapReadType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysIOMapReadByID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>IOMapReadByIDType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysIOMapWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>IOMapWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysIOMapWriteByID</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>IOMapWriteByIDType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysKeepAlive</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>KeepAliveType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysListFiles</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>ListFilesType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysLoaderExecuteFunction</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>LoaderExecuteFunctionType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysMessageRead</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>MessageReadType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysMessageWrite</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>MessageWriteType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysRandomNumber</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>RandomNumberType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysReadButton</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>ReadButtonType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysSetScreenMode</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>SetScreenModeType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysSetSleepTimeout</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>SetSleepTimeoutType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysSoundGetState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>SoundGetStateType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysSoundPlayFile</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>SoundPlayFileType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysSoundPlayTone</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>SoundPlayToneType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>SysSoundSetState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>SoundSetStateType &amp; args</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>tan</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float radians</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>tand</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float degrees</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>tanh</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float radians</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>tanhd</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float degrees</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>TextOut</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>int x, int y, string str, unsigned long options=0</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>trunc</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>float x</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>UIButton</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>UIState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>UnflattenVar</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>string str, variant &amp; variable</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBInputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBInputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBOutputBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBOutputBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBPollBufferInPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBPollBufferOutPtr</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>USBState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>UsbState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>VMRunState</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>Volume</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>void</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
        <Function>
            <Name>Wait</Name>
            <Type>void</Type>
            <Arguments>
                <Argument>
                    <Name>ms</Name>
                    <Type>unsigned long</Type>
                </Argument>
            </Arguments>
            <Documentation>
Make a task sleep for specified amount of time (in 1000ths of a second).
            </Documentation>
            <CodeSample>
<![CDATA[
Wait(SEC_1);	// wait 1 second
Wait(Random(SEC_1)); // wait random time up to 1 second
]]>
            </CodeSample>
        </Function>
<Function>
<Name>Write</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle, variant n</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteBytes</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle, byte buf[], unsigned int &amp; cnt</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteBytesEx</Name>
<Type>void</Type>
<Arguments>
<Argument>
<Name>byte handle, unsigned int &amp; len, byte buf[]</Name>
<Type>void</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteLn</Name>
<Type>char</Type>
<Arguments>
<Argument>
<Name>handle</Name>
<Type>byte</Type>
</Argument>
<Argument>
<Name>n</Name>
<Type>variant</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
char result = WriteLn(handle, myValue);
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteLnString</Name>
<Type>char</Type>
<Arguments>
<Argument>
<Name>handle</Name>
<Type>byte</Type>
</Argument>
<Argument>
<Name>str</Name>
<Type>string</Type>
</Argument>
<Argument>
<Name>cnt</Name>
<Type>unsigned int &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
char result = WriteLnString(handle, myMessage, cnt);
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteNRLinkBytes</Name>
<Type>char</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>data</Name>
<Type PostFix="[]">const byte</Type>
</Argument>
</Arguments>
<Documentation>
Write bytes to the Mindsensors NRLink device (at address 0x02).
</Documentation>
<CodeSample>
<![CDATA[
char result = WriteNRLinkBytes(S1, data);
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteNRLinkBytesEx</Name>
<Type>char</Type>
<Arguments>
<Argument>
<Name>port</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>addr</Name>
<Type>const byte</Type>
</Argument>
<Argument>
<Name>data</Name>
<Type PostFix="[]">const byte</Type>
</Argument>
</Arguments>
<Documentation>
Write bytes to the Mindsensors NRLink device.
</Documentation>
<CodeSample>
<![CDATA[
char result = WriteNRLinkBytesEx(S1, 0x02, data);
]]>
</CodeSample>
</Function>
<Function>
<Name>WriteString</Name>
<Type>char</Type>
<Arguments>
<Argument>
<Name>handle</Name>
<Type>byte</Type>
</Argument>
<Argument>
<Name>str</Name>
<Type>string</Type>
</Argument>
<Argument>
<Name>cnt</Name>
<Type>unsigned int &amp;</Type>
</Argument>
</Arguments>
<Documentation>
</Documentation>
<CodeSample>
<![CDATA[
char result = WriteString(handle, myMessage, cnt);
]]>
</CodeSample>
</Function>
        <Function>
            <Name>Yield</Name>
            <Type>void</Type>
            <Arguments/>
            <Documentation>
Make a task yield to another concurrently running task.
            </Documentation>
            <CodeSample>
<![CDATA[
Yield();
]]>
            </CodeSample>
        </Function>
<Function>
    <Name>ReadSensorUSEx</Name>
    <Type>bool</Type>
    <Arguments>
        <Argument>
            <Name>port</Name>
            <Type>byte</Type>
        </Argument>
        <Argument>
            <Name>values</Name>
            <Type PostFix="[]">byte &amp;</Type>
        </Argument>
    </Arguments>
    <Documentation>
Read all 8 ultrasonic distance readings in a single function call.
    </Documentation>
    <CodeSample>
<![CDATA[
bool result = ReadUSSensorEx(S1, valueArray);
]]>
    </CodeSample>
</Function>
<Function>
    <Name>ReadI2CRegister</Name>
    <Type>char</Type>
    <Arguments>
        <Argument>
            <Name>port</Name>
            <Type>byte</Type>
        </Argument>
        <Argument>
            <Name>reg</Name>
            <Type>byte</Type>
        </Argument>
        <Argument>
            <Name>out</Name>
            <Type>byte &amp;</Type>
        </Argument>
    </Arguments>
    <Documentation>
Read a single byte I2C register value.
    </Documentation>
    <CodeSample>
<![CDATA[
ReadI2CRegister(S1, US_REG_CM_INTERVAL, cmval);
]]>
    </CodeSample>
</Function>
<Function>
    <Name>WriteI2CRegister</Name>
    <Type>char</Type>
    <Arguments>
        <Argument>
            <Name>port</Name>
            <Type>byte</Type>
        </Argument>
        <Argument>
            <Name>reg</Name>
            <Type>byte</Type>
        </Argument>
        <Argument>
            <Name>value</Name>
            <Type>byte</Type>
        </Argument>
    </Arguments>
    <Documentation>
Write a single byte value to an I2C register.
    </Documentation>
    <CodeSample>
<![CDATA[
WriteI2CRegister(S1, US_REG_CM_INTERVAL, 0x2);
]]>
    </CodeSample>
</Function>
<!--
int isspace ( int c );
Checks if parameter c is a white-space character.
For the purpose of this function, standard white-space characters are:
' ' (0x20) space (SPC) '\t' (0x09) horizontal tab (TAB) '\n' (0x0a) newline (LF)
'\v' (0x0b) vertical tab (VT) '\f' (0x0c) feed (FF) '\r' (0x0d) carriage return (CR)

int isalnum ( int c );
Checks if parameter c is either a decimal digit or an uppercase or lowercase letter.

int isdigit ( int c );
Checks if parameter c is a decimal digit character.
Decimal digits are any of: 0 1 2 3 4 5 6 7 8 9

int isalpha ( int c );
Checks if parameter c is either an uppercase or a lowercase alphabetic letter.

int isupper ( int c );
Checks if parameter c is an uppercase alphabetic letter.
In the default C locale, an uppercase letter is any of: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

int islower ( int c );
Checks if parameter c is a lowercase alphabetic letter.
In the default C locale, a lowercase letter is any of: a b c d e f g h i j k l m n o p q r s t u v w x y z.

int iscntrl ( int c );
Checks if parameter c is a control character.
For the standard ASCII character set, control characters are those between ASCII codes 0x00 (NUL) and 0x1f (US), plus 0x7f (DEL).
The opposite of iscntrl is isprint, which is true for all characters that are not control characters.

int isprint ( int c );
Checks if parameter c is a printable character. A printable character is any character that is not a control character.
For the standard ASCII character set, control characters are those between ASCII codes 0x00 (NUL) and 0x1f (US), plus 0x7f (DEL). Therefore, printable characters are all but these.
isgraph returns true for the same cases as isprint except for the whitespace characters (like ' '), which return true when checked with isprint but false when checked with isgraph.

int isgraph ( int c );
Check if character has graphical representation
Checks if parameter c is a character with graphical representation. The characters with graphical representation are all those characters than can be printed (as determined by isprint) except for whitespace characters (like ' '), which are not considered isgraph characters.

int ispunct ( int c );
Checks if parameter c is a punctuation character. For the purpose of this function, a punctuation character is any graphic character (as in isgraph) that is not alphanumeric (as in isalnum).

int isxdigit ( int c );
Checks if parameter c is a hexdecimal digit character.
Hexadecimal digits are any of: 0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F

int tolower ( int c );
Converts parameter c to its lowercase equivalent if c is an uppercase letter and has a lowercase equivalent. If no such conversion is possible, the value returned is c unchanged.

int toupper ( int c );
Converts parameter c to its uppercase equivalent if c is a lowercase letter and has an uppercase equivalent. If no such conversion is possible, the value returned is c unchanged.
-->
    </Functions>
    <Keywords>
<!--
__FLTRETVAL__
__RETURN__
__RETURNF__
__RETURNS__
__RETURNU__
__RETVAL__
__STRRETVAL__
__STRBUFFER__
__STRTMPBUFFER__
__TMPBYTE__
__TMPFLOAT__
__TMPLONG__
__TMPULONG__
__TMPWORD__
asm
bool
break
byte
case
char
const
continue
default
do
else
false
float
for
goto
if
inline
int
long
mutex
priority
repeat
return
safecall
short
start
stop
string
struct
sub
switch
task
true
typedef
unsigned
until
void
while
-->
    </Keywords>
    <Constants>
<!--
ActualSpeed
BITMAP_1
BITMAP_2
BITMAP_3
BITMAP_4
BITMAP_BIT
BITMAP_BITS
BlockTachoCount
BREAKOUT_REQ
BT_ARM_CMD_MODE
BT_ARM_DATA_MODE
BT_ARM_OFF
BT_BRICK_PORT_OPEN
BT_BRICK_VISIBILITY
BT_CMD_BYTE
BT_CMD_READY
BT_CONNECTION_0_ENABLE
BT_CONNECTION_1_ENABLE
BT_CONNECTION_2_ENABLE
BT_CONNECTION_3_ENABLE
BT_DEFAULT_INQUIRY_MAX
BT_DEFAULT_INQUIRY_TIMEOUT_LO
BT_DEVICE_AWAY
BT_DEVICE_EMPTY
BT_DEVICE_KNOWN
BT_DEVICE_NAME
BT_DEVICE_UNKNOWN
BT_DISABLE
BT_ENABLE
BTN1
BTN2
BTN3
BTN4
BTNCENTER
BTNEXIT
BTNLEFT
BTNRIGHT
BTNSTATE_LONG_PRESSED_EV
BTNSTATE_LONG_RELEASED_EV
BTNSTATE_PRESSED_EV
BTNSTATE_PRESSED_STATE
BTNSTATE_SHORT_RELEASED_EV
ButtonModuleID
ButtonModuleName
ButtonOffsetLongPressCnt
ButtonOffsetLongRelCnt
ButtonOffsetPressedCnt
ButtonOffsetRelCnt
ButtonOffsetShortRelCnt
ButtonOffsetState
CHAR_BIT
CHAR_MAX
CHAR_MIN
CLUMP_DONE
CLUMP_SUSPEND
ColorSensorRead
COM_CHANNEL_FOUR_ACTIVE
COM_CHANNEL_NONE_ACTIVE
COM_CHANNEL_ONE_ACTIVE
COM_CHANNEL_THREE_ACTIVE
COM_CHANNEL_TWO_ACTIVE
CommandModuleID
CommandModuleName
CommandOffsetActivateFlag
CommandOffsetAwake
CommandOffsetDeactivateFlag
CommandOffsetFileName
CommandOffsetFormatString
CommandOffsetMemoryPool
CommandOffsetOffsetDS
CommandOffsetOffsetDVA
CommandOffsetPRCHandler
CommandOffsetProgStatus
CommandOffsetSyncTick
CommandOffsetSyncTime
CommandOffsetTick
CommBTCheckStatus
CommBTConnection
CommBTOnOff
CommBTRead
CommBTWrite
CommExecuteFunction
CommHSCheckStatus
CommHSControl
CommHSRead
CommHSWrite
CommLSCheckStatus
CommLSRead
CommLSWrite
CommLSWriteEx
CommModuleID
CommModuleName
CommOffsetBrickDataBdAddr
CommOffsetBrickDataBluecoreVersion
CommOffsetBrickDataBtHwStatus
CommOffsetBrickDataBtStateStatus
CommOffsetBrickDataName
CommOffsetBrickDataTimeOutValue
CommOffsetBtConnectTableBdAddr
CommOffsetBtConnectTableClassOfDevice
CommOffsetBtConnectTableHandleNr
CommOffsetBtConnectTableLinkQuality
CommOffsetBtConnectTableName
CommOffsetBtConnectTablePinCode
CommOffsetBtConnectTableStreamStatus
CommOffsetBtDeviceCnt
CommOffsetBtDeviceNameCnt
CommOffsetBtDeviceTableBdAddr
CommOffsetBtDeviceTableClassOfDevice
CommOffsetBtDeviceTableDeviceStatus
CommOffsetBtDeviceTableName
CommOffsetBtInBufBuf
CommOffsetBtInBufInPtr
CommOffsetBtInBufOutPtr
CommOffsetBtOutBufBuf
CommOffsetBtOutBufInPtr
CommOffsetBtOutBufOutPtr
CommOffsetHsFlags
CommOffsetHsInBufBuf
CommOffsetHsInBufInPtr
CommOffsetHsInBufOutPtr
CommOffsetHsOutBufBuf
CommOffsetHsOutBufInPtr
CommOffsetHsOutBufOutPtr
CommOffsetHsSpeed
CommOffsetHsState
CommOffsetPFunc
CommOffsetPFuncTwo
CommOffsetUsbInBufBuf
CommOffsetUsbInBufInPtr
CommOffsetUsbInBufOutPtr
CommOffsetUsbOutBufBuf
CommOffsetUsbOutBufInPtr
CommOffsetUsbOutBufOutPtr
CommOffsetUsbPollBufBuf
CommOffsetUsbPollBufInPtr
CommOffsetUsbPollBufOutPtr
CommOffsetUsbState
ComputeCalibValue
DatalogGetTimes
DatalogWrite
DEGREES_PER_RADIAN
DISPLAY_BUSY
DISPLAY_CHAR
DISPLAY_CONTRAST_DEFAULT
DISPLAY_CONTRAST_MAX
DISPLAY_ERASE_ALL
DISPLAY_HEIGHT
DISPLAY_HORISONTAL_LINE
DISPLAY_MENUICONS_X_DIFF
DISPLAY_MENUICONS_X_OFFS
DISPLAY_MENUICONS_Y
DISPLAY_ONDISPLAY_REFRESH
DISPLAY_PIXEL
DISPLAY_POPUP
DISPLAY_REFRESH_DISABLED
DISPLAY_VERTICAL_LINE
DISPLAY_WIDTH
DisplayExecuteFunction
DisplayModuleID
DisplayModuleName
DisplayOffsetContrast
DisplayOffsetDisplay
DisplayOffsetEraseMask
DisplayOffsetFlags
DisplayOffsetNormal
DisplayOffsetPBitmaps
DisplayOffsetPFont
DisplayOffsetPFunc
DisplayOffsetPMenuIcons
DisplayOffsetPMenuText
DisplayOffsetPopup
DisplayOffsetPScreens
DisplayOffsetPStatusIcons
DisplayOffsetPStatusText
DisplayOffsetPStepIcons
DisplayOffsetPTextLines
DisplayOffsetStatusIcons
DisplayOffsetStepIcons
DisplayOffsetTextLinesCenterFlags
DisplayOffsetUpdateMask
DIST_CMD_ADPA_OFF
DIST_CMD_ADPA_ON
DIST_CMD_CUSTOM
DIST_CMD_DEENERGIZED
DIST_CMD_ENERGIZED
DIST_CMD_GP2D12
DIST_CMD_GP2D120
DIST_CMD_GP2YA02
DIST_CMD_GP2YA21
DIST_REG_CMD
DIST_REG_DEVICEID
DIST_REG_DIST
DIST_REG_DIST_MAX
DIST_REG_DIST_MIN
DIST_REG_DIST1
DIST_REG_MODULE_TYPE
DIST_REG_NUM_POINTS
DIST_REG_VENDORID
DIST_REG_VERSION
DIST_REG_VOLT
DIST_REG_VOLT1
DRAW_OPT_CLEAR
DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN
DRAW_OPT_CLEAR_WHOLE_SCREEN
DRAW_OPT_FILL_SHAPE
DRAW_OPT_FONT_DIR_B2TL
DRAW_OPT_FONT_DIR_B2TR
DRAW_OPT_FONT_DIR_L2RB
DRAW_OPT_FONT_DIR_L2RT
DRAW_OPT_FONT_DIR_R2LB
DRAW_OPT_FONT_DIR_R2LT
DRAW_OPT_FONT_DIR_T2BL
DRAW_OPT_FONT_DIR_T2BR
DRAW_OPT_FONT_DIRECTIONS
DRAW_OPT_FONT_WRAP
DRAW_OPT_INVERT
DRAW_OPT_LOGICAL_AND
DRAW_OPT_LOGICAL_COPY
DRAW_OPT_LOGICAL_OR
DRAW_OPT_LOGICAL_XOR
DRAW_OPT_NORMAL
DrawCircle
DrawEllipse
DrawFont
DrawGraphic
DrawGraphicArray
DrawLine
DrawPoint
DrawPolygon
DrawRect
DrawText
EQ
ERR_ARG
ERR_BAD_PTR
ERR_COMM_BUFFER_FULL
ERR_COMM_BUS_ERR
ERR_COMM_CHAN_INVALID
ERR_COMM_CHAN_NOT_READY
ERR_FILE
ERR_INSTR
ERR_INVALID_FIELD
ERR_INVALID_PORT
ERR_INVALID_QUEUE
ERR_INVALID_SIZE
ERR_MEM
ERR_NO_PROG
ERR_RC_BAD_PACKET
ERR_RC_FAILED
ERR_RC_ILLEGAL_VAL
ERR_RC_UNKNOWN_CMD
ERR_VER
FALSE
FileClose
FileDelete
FileFindFirst
FileFindNext
FileOpenAppend
FileOpenRead
FileOpenReadLinear
FileOpenWrite
FileOpenWriteLinear
FileOpenWriteNonLinear
FileRead
FileRename
FileResize
FileResolveHandle
FileSeek
FileWrite
FRAME_SELECT
GetStartTick
GT
GTEQ
HS_BAUD_115200
HS_BAUD_1200
HS_BAUD_14400
HS_BAUD_19200
HS_BAUD_230400
HS_BAUD_2400
HS_BAUD_28800
HS_BAUD_3600
HS_BAUD_38400
HS_BAUD_460800
HS_BAUD_4800
HS_BAUD_57600
HS_BAUD_7200
HS_BAUD_76800
HS_BAUD_921600
HS_BAUD_9600
HS_CMD_READY
HS_CTRL_EXIT
HS_CTRL_INIT
HS_CTRL_UART
HS_DISABLE
HS_ENABLE
HS_INIT_RECEIVER
HS_INITIALISE
HS_MODE_10_STOP
HS_MODE_15_STOP
HS_MODE_20_STOP
HS_MODE_5_DATA
HS_MODE_6_DATA
HS_MODE_7_DATA
HS_MODE_7E1
HS_MODE_8_DATA
HS_MODE_8N1
HS_MODE_E_PARITY
HS_MODE_M_PARITY
HS_MODE_N_PARITY
HS_MODE_O_PARITY
HS_MODE_S_PARITY
HS_SEND_DATA
HS_UPDATE
HT_CMD_COLOR2_50HZ
HT_CMD_COLOR2_60HZ
HT_CMD_COLOR2_ACTIVE
HT_CMD_COLOR2_BLCAL
HT_CMD_COLOR2_FAR
HT_CMD_COLOR2_LED_HI
HT_CMD_COLOR2_LED_LOW
HT_CMD_COLOR2_NEAR
HT_CMD_COLOR2_PASSIVE
HT_CMD_COLOR2_RAW
HT_CMD_COLOR2_WBCAL
HT_REG_CMD
HT_REG_DEVICE_ID
HT_REG_VENDOR_ID
HT_REG_VERSION
HTIR2_ADDR_AC01
HTIR2_ADDR_AC02
HTIR2_ADDR_AC03
HTIR2_ADDR_AC04
HTIR2_ADDR_AC05
HTIR2_ADDR_ACDIR
HTIR2_ADDR_DC01
HTIR2_ADDR_DC02
HTIR2_ADDR_DC03
HTIR2_ADDR_DC04
HTIR2_ADDR_DC05
HTIR2_ADDR_DCAVG
HTIR2_ADDR_DCDIR
HTIR2_ADDR_MODE
HTIR2_MODE_1200
HTIR2_MODE_600
IN_1
IN_2
IN_3
IN_4
IN_MODE_ANGLESTEP
IN_MODE_BOOLEAN
IN_MODE_CELSIUS
IN_MODE_FAHRENHEIT
IN_MODE_MODEMASK
IN_MODE_PCTFULLSCALE
IN_MODE_PERIODCOUNTER
IN_MODE_RAW
IN_MODE_SLOPEMASK
IN_MODE_TRANSITIONCNT
IN_TYPE_ANGLE
IN_TYPE_COLORBLUE
IN_TYPE_COLORFULL
IN_TYPE_COLORGREEN
IN_TYPE_COLORNONE
IN_TYPE_COLORRED
IN_TYPE_CUSTOM
IN_TYPE_HISPEED
IN_TYPE_LIGHT_ACTIVE
IN_TYPE_LIGHT_INACTIVE
IN_TYPE_LOWSPEED
IN_TYPE_LOWSPEED_9V
IN_TYPE_NO_SENSOR
IN_TYPE_REFLECTION
IN_TYPE_SOUND_DB
IN_TYPE_SOUND_DBA
IN_TYPE_SWITCH
IN_TYPE_TEMPERATURE
INPUT_BLACKCOLOR
INPUT_BLANK
INPUT_BLUE
INPUT_BLUECOLOR
INPUT_CAL_POINT_0
INPUT_CAL_POINT_1
INPUT_CAL_POINT_2
INPUT_CUSTOM9V
INPUT_CUSTOMACTIVE
INPUT_CUSTOMINACTIVE
INPUT_DIGI0
INPUT_DIGI1
INPUT_GREEN
INPUT_GREENCOLOR
INPUT_INVALID_DATA
INPUT_NO_OF_COLORS
INPUT_NO_OF_POINTS
INPUT_RED
INPUT_REDCOLOR
INPUT_RESETCAL
INPUT_RUNNINGCAL
INPUT_SENSORCAL
INPUT_SENSOROFF
INPUT_STARTCAL
INPUT_WHITECOLOR
INPUT_YELLOWCOLOR
InputIOInputMode0
InputIOInputMode1
InputIOInputMode2
InputIOInputMode3
InputIOInvalidData0
InputIOInvalidData1
InputIOInvalidData2
InputIOInvalidData3
InputIONormalizedValue0
InputIONormalizedValue1
InputIONormalizedValue2
InputIONormalizedValue3
InputIORawValue0
InputIORawValue1
InputIORawValue2
InputIORawValue3
InputIOScaledValue0
InputIOScaledValue1
InputIOScaledValue2
InputIOScaledValue3
InputIOType0
InputIOType1
InputIOType2
InputIOType3
InputMode
InputModuleID
InputModuleName
InputOffsetADRaw
InputOffsetColorADRaw
InputOffsetColorCalibration
InputOffsetColorCalibrationState
InputOffsetColorCalLimits
InputOffsetColorSensorBoolean
InputOffsetColorSensorRaw
InputOffsetColorSensorValue
InputOffsetCustomActiveStatus
InputOffsetCustomPctFullScale
InputOffsetCustomZeroOffset
InputOffsetDigiPinsDir
InputOffsetDigiPinsIn
InputOffsetDigiPinsOut
InputOffsetInvalidData
InputOffsetSensorBoolean
InputOffsetSensorMode
InputOffsetSensorRaw
InputOffsetSensorType
InputOffsetSensorValue
INT_MAX
INT_MIN
INTF_BTOFF
INTF_BTON
INTF_CONNECT
INTF_CONNECTBYNAME
INTF_CONNECTREQ
INTF_DISCONNECT
INTF_DISCONNECTALL
INTF_EXTREAD
INTF_FACTORYRESET
INTF_OPENSTREAM
INTF_PINREQ
INTF_REMOVEDEVICE
INTF_SEARCH
INTF_SENDDATA
INTF_SENDFILE
INTF_SETBTNAME
INTF_SETCMDMODE
INTF_STOPSEARCH
INTF_VISIBILITY
InvalidData
IO_BASE
IO_IN_FPP
IO_OUT_FPP
IOCtrlModuleID
IOCtrlModuleName
IOCtrlOffsetPowerOn
IOMapRead
IOMapReadByID
IOMapWrite
IOMapWriteByID
KeepAlive
LCD_LINE1
LCD_LINE2
LCD_LINE3
LCD_LINE4
LCD_LINE5
LCD_LINE6
LCD_LINE7
LCD_LINE8
LDR_APPENDNOTPOSSIBLE
LDR_BTBUSY
LDR_BTCONNECTFAIL
LDR_BTTIMEOUT
LDR_CMD_CLOSE
LDR_CMD_CLOSEMODHANDLE
LDR_CMD_CROPDATAFILE
LDR_CMD_DELETE
LDR_CMD_DELETEUSERFLASH
LDR_CMD_FINDFIRST
LDR_CMD_FINDFIRSTMODULE
LDR_CMD_FINDNEXT
LDR_CMD_FINDNEXTMODULE
LDR_CMD_IOMAPREAD
LDR_CMD_IOMAPWRITE
LDR_CMD_OPENAPPENDDATA
LDR_CMD_OPENREAD
LDR_CMD_OPENREADLINEAR
LDR_CMD_OPENWRITE
LDR_CMD_OPENWRITEDATA
LDR_CMD_OPENWRITELINEAR
LDR_CMD_READ
LDR_CMD_RENAMEFILE
LDR_CMD_RESIZEDATAFILE
LDR_CMD_SEEKFROMCURRENT
LDR_CMD_SEEKFROMEND
LDR_CMD_SEEKFROMSTART
LDR_CMD_WRITE
LDR_ENDOFFILE
LDR_EOFEXPECTED
LDR_FILEEXISTS
LDR_FILEISBUSY
LDR_FILEISFULL
LDR_FILENOTFOUND
LDR_FILETX_CLOSEERROR
LDR_FILETX_DSTEXISTS
LDR_FILETX_SRCMISSING
LDR_FILETX_STREAMERROR
LDR_FILETX_TIMEOUT
LDR_HANDLEALREADYCLOSED
LDR_ILLEGALFILENAME
LDR_ILLEGALHANDLE
LDR_INPROGRESS
LDR_INVALIDSEEK
LDR_MODULENOTFOUND
LDR_NOLINEARSPACE
LDR_NOMOREFILES
LDR_NOMOREHANDLES
LDR_NOSPACE
LDR_NOTLINEARFILE
LDR_NOWRITEBUFFERS
LDR_OUTOFBOUNDARY
LDR_REQPIN
LDR_SUCCESS
LDR_UNDEFINEDERROR
ListFiles
LoaderExecuteFunction
LoaderModuleID
LoaderModuleName
LoaderOffsetFreeUserFlash
LoaderOffsetPFunc
LONG_MAX
LONG_MIN
LOWSPEED_CH_NOT_READY
LOWSPEED_COMMUNICATING
LOWSPEED_DATA_RECEIVED
LOWSPEED_DONE
LOWSPEED_ERROR
LOWSPEED_IDLE
LOWSPEED_INIT
LOWSPEED_LOAD_BUFFER
LOWSPEED_NO_ERROR
LOWSPEED_RECEIVING
LOWSPEED_RX_ERROR
LOWSPEED_TRANSMITTING
LOWSPEED_TX_ERROR
LowSpeedModuleID
LowSpeedModuleName
LowSpeedOffsetChannelState
LowSpeedOffsetErrorType
LowSpeedOffsetInBufBuf
LowSpeedOffsetInBufBytesToRx
LowSpeedOffsetInBufInPtr
LowSpeedOffsetInBufOutPtr
LowSpeedOffsetMode
LowSpeedOffsetOutBufBuf
LowSpeedOffsetOutBufBytesToRx
LowSpeedOffsetOutBufInPtr
LowSpeedOffsetOutBufOutPtr
LowSpeedOffsetSpeed
LowSpeedOffsetState
LR_COULD_NOT_SAVE
LR_ENTRY_REMOVED
LR_STORE_IS_FULL
LR_SUCCESS
LR_UNKNOWN_ADDR
LS_DEVTYPE_CUSTOM_LS_DEVICE
LS_DEVTYPE_ULTRA_SONIC
LT
LTEQ
MAILBOX1
MAILBOX10
MAILBOX2
MAILBOX3
MAILBOX4
MAILBOX5
MAILBOX6
MAILBOX7
MAILBOX8
MAILBOX9
MAX_BT_MSG_SIZE
MENUICON_BIT
MENUICON_BITS
MENUICON_CENTER
MENUICON_LEFT
MENUICON_RIGHT
MENUTEXT
MessageRead
MessageWrite
MIN_1
MOD_INPUT
MOD_OUTPUT
MS_1
MS_10
MS_100
MS_150
MS_2
MS_20
MS_200
MS_250
MS_3
MS_30
MS_300
MS_350
MS_4
MS_40
MS_400
MS_450
MS_5
MS_50
MS_500
MS_6
MS_60
MS_600
MS_7
MS_70
MS_700
MS_8
MS_80
MS_800
MS_9
MS_90
MS_900
MS_CMD_ADPA_OFF
MS_CMD_ADPA_ON
MS_CMD_DEENERGIZED
MS_CMD_ENERGIZED
MS_REG_CMD
MS_REG_DEVICE_ID
MS_REG_VENDOR_ID
MS_REG_VERSION
NA
NEQ
NO_ERR
NO_OF_BTNS
NormalizedValue
NRLINK_CMD_2400
NRLINK_CMD_4800
NRLINK_CMD_FLUSH
NRLINK_CMD_IR_LONG
NRLINK_CMD_IR_SHORT
NRLINK_CMD_RUN_MACRO
NRLINK_CMD_SET_PF
NRLINK_CMD_SET_RCX
NRLINK_CMD_SET_TRAIN
NRLINK_CMD_TX_RAW
NRLINK_REG_BYTES
NRLINK_REG_DATA
NRLINK_REG_EEPROM
NUM_BITMAPS
NUM_MENUICONS
NUM_SCREENS
NUM_SPECIALS
NUM_STATUSICONS
NUM_STEPICONS
NUM_TEXTLINES
OPARR_MAX
OPARR_MEAN
OPARR_MIN
OPARR_SORT
OPARR_STD
OPARR_SUM
OPARR_SUMSQR
OUT_A
OUT_AB
OUT_ABC
OUT_AC
OUT_B
OUT_BC
OUT_C
OUT_MODE_BRAKE
OUT_MODE_COAST
OUT_MODE_MOTORON
OUT_MODE_REGMETHOD
OUT_MODE_REGULATED
OUT_REGMODE_IDLE
OUT_REGMODE_SPEED
OUT_REGMODE_SYNC
OUT_RUNSTATE_HOLD
OUT_RUNSTATE_IDLE
OUT_RUNSTATE_RAMPDOWN
OUT_RUNSTATE_RAMPUP
OUT_RUNSTATE_RUNNING
OutputIOActualSpeed0
OutputIOActualSpeed1
OutputIOActualSpeed2
OutputIOBlockTachoCount0
OutputIOBlockTachoCount1
OutputIOBlockTachoCount2
OutputIOOutputMode0
OutputIOOutputMode1
OutputIOOutputMode2
OutputIOOverload0
OutputIOOverload1
OutputIOOverload2
OutputIOPower0
OutputIOPower1
OutputIOPower2
OutputIORegDValue0
OutputIORegDValue1
OutputIORegDValue2
OutputIORegIValue0
OutputIORegIValue1
OutputIORegIValue2
OutputIORegMode0
OutputIORegMode1
OutputIORegMode2
OutputIORegPValue0
OutputIORegPValue1
OutputIORegPValue2
OutputIORotationCount0
OutputIORotationCount1
OutputIORotationCount2
OutputIORunState0
OutputIORunState1
OutputIORunState2
OutputIOTachoCount0
OutputIOTachoCount1
OutputIOTachoCount2
OutputIOTachoLimit0
OutputIOTachoLimit1
OutputIOTachoLimit2
OutputIOTurnRatio0
OutputIOTurnRatio1
OutputIOTurnRatio2
OutputIOUpdateFlags0
OutputIOUpdateFlags1
OutputIOUpdateFlags2
OutputMode
OutputModuleID
OutputModuleName
OutputOffsetActualSpeed
OutputOffsetBlockTachoCount
OutputOffsetFlags
OutputOffsetMode
OutputOffsetMotorRPM
OutputOffsetOverloaded
OutputOffsetPwnFreq
OutputOffsetRegDParameter
OutputOffsetRegIParameter
OutputOffsetRegMode
OutputOffsetRegPParameter
OutputOffsetRotationCount
OutputOffsetRunState
OutputOffsetSpeed
OutputOffsetSyncTurnParameter
OutputOffsetTachoCount
OutputOffsetTachoLimit
Overload
PC_OVERRIDE
PF_CHANNEL_1
PF_CHANNEL_2
PF_CHANNEL_3
PF_CHANNEL_4
PF_CMD_BRAKE
PF_CMD_FWD
PF_CMD_REV
PF_CMD_STOP
PF_CST_CLEAR1_CLEAR2
PF_CST_CLEAR1_SET2
PF_CST_DECREMENT_PWM
PF_CST_FULL_FWD
PF_CST_FULL_REV
PF_CST_INCREMENT_PWM
PF_CST_SET1_CLEAR2
PF_CST_SET1_SET2
PF_CST_TOGGLE_DIR
PF_FUNC_CLEAR
PF_FUNC_NOCHANGE
PF_FUNC_SET
PF_FUNC_TOGGLE
PF_MODE_COMBO_DIRECT
PF_MODE_COMBO_PWM
PF_MODE_SINGLE_OUTPUT_CST
PF_MODE_SINGLE_OUTPUT_PWM
PF_MODE_SINGLE_PIN_CONT
PF_MODE_SINGLE_PIN_TIME
PF_MODE_TRAIN
PF_OUT_A
PF_OUT_B
PF_PIN_C1
PF_PIN_C2
PF_PWM_BRAKE
PF_PWM_FLOAT
PF_PWM_FWD1
PF_PWM_FWD2
PF_PWM_FWD3
PF_PWM_FWD4
PF_PWM_FWD5
PF_PWM_FWD6
PF_PWM_FWD7
PF_PWM_REV1
PF_PWM_REV2
PF_PWM_REV3
PF_PWM_REV4
PF_PWM_REV5
PF_PWM_REV6
PF_PWM_REV7
PI
Power
PROG_ABORT
PROG_ERROR
PROG_IDLE
PROG_OK
PROG_RESET
PROG_RUNNING
PSP_CMD_ANALOG
PSP_CMD_DIGITAL
PSP_REG_BTN1
PSP_REG_BTN2
PSP_REG_XLEFT
PSP_REG_XRIGHT
PSP_REG_YLEFT
PSP_REG_YRIGHT
RADIANS_PER_DEGREE
RandomNumber
RawValue
RCX_AbsVarOp
RCX_AndVarOp
RCX_AutoOffOp
RCX_BatteryLevelOp
RCX_BatteryLevelSrc
RCX_BootModeOp
RCX_CalibrateEventOp
RCX_ClearAllEventsOp
RCX_ClearCounterOp
RCX_ClearMsgOp
RCX_ClearSensorOp
RCX_ClearSoundOp
RCX_ClearTimerOp
RCX_ClickCounterSrc
RCX_ConstantSrc
RCX_CounterSrc
RCX_DatalogOp
RCX_DatalogRawDirectSrc
RCX_DatalogRawIndirectSrc
RCX_DatalogSrcDirectSrc
RCX_DatalogSrcIndirectSrc
RCX_DatalogValueDirectSrc
RCX_DatalogValueIndirectSrc
RCX_DecCounterOp
RCX_DeleteSubOp
RCX_DeleteSubsOp
RCX_DeleteTaskOp
RCX_DeleteTasksOp
RCX_DirectEventOp
RCX_DisplayOp
RCX_DivVarOp
RCX_DurationSrc
RCX_EventStateSrc
RCX_FirmwareVersionSrc
RCX_GlobalMotorStatusSrc
RCX_GOutputDirOp
RCX_GOutputModeOp
RCX_GOutputPowerOp
RCX_HysteresisSrc
RCX_IncCounterOp
RCX_IndirectVarSrc
RCX_InputBooleanSrc
RCX_InputModeOp
RCX_InputModeSrc
RCX_InputRawSrc
RCX_InputTypeOp
RCX_InputTypeSrc
RCX_InputValueSrc
RCX_IRModeOp
RCX_LightOp
RCX_LowerThresholdSrc
RCX_LSBlinkTimeOp
RCX_LSCalibrateOp
RCX_LSHysteresisOp
RCX_LSLowerThreshOp
RCX_LSUpperThreshOp
RCX_MessageOp
RCX_MessageSrc
RCX_MulVarOp
RCX_MuteSoundOp
RCX_OnOffFloatOp
RCX_OrVarOp
RCX_OUT_A
RCX_OUT_AB
RCX_OUT_ABC
RCX_OUT_AC
RCX_OUT_B
RCX_OUT_BC
RCX_OUT_C
RCX_OUT_FLOAT
RCX_OUT_FULL
RCX_OUT_FWD
RCX_OUT_HALF
RCX_OUT_LOW
RCX_OUT_OFF
RCX_OUT_ON
RCX_OUT_REV
RCX_OUT_TOGGLE
RCX_OutputDirOp
RCX_OutputPowerOp
RCX_OutputStatusSrc
RCX_PBTurnOffOp
RCX_PingOp
RCX_PlaySoundOp
RCX_PlayToneOp
RCX_PlayToneVarOp
RCX_PollMemoryOp
RCX_PollOp
RCX_ProgramSlotSrc
RCX_RandomSrc
RCX_RemoteKeysReleased
RCX_RemoteOp
RCX_RemoteOutABackward
RCX_RemoteOutAForward
RCX_RemoteOutBBackward
RCX_RemoteOutBForward
RCX_RemoteOutCBackward
RCX_RemoteOutCForward
RCX_RemotePBMessage1
RCX_RemotePBMessage2
RCX_RemotePBMessage3
RCX_RemotePlayASound
RCX_RemoteSelProgram1
RCX_RemoteSelProgram2
RCX_RemoteSelProgram3
RCX_RemoteSelProgram4
RCX_RemoteSelProgram5
RCX_RemoteStopOutOff
RCX_ScoutCounterLimitSrc
RCX_ScoutEventFBSrc
RCX_ScoutLightParamsSrc
RCX_ScoutOp
RCX_ScoutRulesOp
RCX_ScoutRulesSrc
RCX_ScoutTimerLimitSrc
RCX_SelectProgramOp
RCX_SendUARTDataOp
RCX_SetCounterOp
RCX_SetDatalogOp
RCX_SetEventOp
RCX_SetFeedbackOp
RCX_SetPriorityOp
RCX_SetSourceValueOp
RCX_SetTimerLimitOp
RCX_SetVarOp
RCX_SetWatchOp
RCX_SgnVarOp
RCX_SOUND_CLICK
RCX_SOUND_DOUBLE_BEEP
RCX_SOUND_DOWN
RCX_SOUND_FAST_UP
RCX_SOUND_LOW_BEEP
RCX_SOUND_UP
RCX_SoundOp
RCX_StartTaskOp
RCX_StopAllTasksOp
RCX_StopTaskOp
RCX_SubVarOp
RCX_SumVarOp
RCX_TaskEventsSrc
RCX_TenMSTimerSrc
RCX_TimerSrc
RCX_UARTSetupSrc
RCX_UnlockFirmOp
RCX_UnlockOp
RCX_UnmuteSoundOp
RCX_UploadDatalogOp
RCX_UpperThresholdSrc
RCX_VariableSrc
RCX_ViewSourceValOp
RCX_VLLOp
RCX_WatchSrc
ReadButton
ReadSemData
RegDValue
RegIValue
RegMode
RegPValue
RESET_ALL
RESET_BLOCK_COUNT
RESET_BLOCKANDTACHO
RESET_COUNT
RESET_NONE
RESET_ROTATION_COUNT
RotationCount
RunState
S1
S2
S3
S4
ScaledValue
SCHAR_MAX
SCHAR_MIN
SCOUT_FXR_ALARM
SCOUT_FXR_BUG
SCOUT_FXR_NONE
SCOUT_FXR_RANDOM
SCOUT_FXR_SCIENCE
SCOUT_LIGHT_OFF
SCOUT_LIGHT_ON
SCOUT_LR_AVOID
SCOUT_LR_IGNORE
SCOUT_LR_OFF_WHEN
SCOUT_LR_SEEK_DARK
SCOUT_LR_SEEK_LIGHT
SCOUT_LR_WAIT_FOR
SCOUT_MODE_POWER
SCOUT_MODE_STANDALONE
SCOUT_MR_CIRCLE_LEFT
SCOUT_MR_CIRCLE_RIGHT
SCOUT_MR_FORWARD
SCOUT_MR_LOOP_A
SCOUT_MR_LOOP_AB
SCOUT_MR_LOOP_B
SCOUT_MR_NO_MOTION
SCOUT_MR_ZIGZAG
SCOUT_SNDSET_ALARM
SCOUT_SNDSET_BASIC
SCOUT_SNDSET_BUG
SCOUT_SNDSET_NONE
SCOUT_SNDSET_RANDOM
SCOUT_SNDSET_SCIENCE
SCOUT_SOUND_1_BLINK
SCOUT_SOUND_2_BLINK
SCOUT_SOUND_COUNTER1
SCOUT_SOUND_COUNTER2
SCOUT_SOUND_ENTER_BRIGHT
SCOUT_SOUND_ENTER_DARK
SCOUT_SOUND_ENTER_NORMAL
SCOUT_SOUND_ENTERSA
SCOUT_SOUND_KEYERROR
SCOUT_SOUND_MAIL_RECEIVED
SCOUT_SOUND_NONE
SCOUT_SOUND_REMOTE
SCOUT_SOUND_SPECIAL1
SCOUT_SOUND_SPECIAL2
SCOUT_SOUND_SPECIAL3
SCOUT_SOUND_TIMER1
SCOUT_SOUND_TIMER2
SCOUT_SOUND_TIMER3
SCOUT_SOUND_TOUCH1_PRES
SCOUT_SOUND_TOUCH1_REL
SCOUT_SOUND_TOUCH2_PRES
SCOUT_SOUND_TOUCH2_REL
SCOUT_TGS_LONG
SCOUT_TGS_MEDIUM
SCOUT_TGS_SHORT
SCOUT_TR_AVOID
SCOUT_TR_IGNORE
SCOUT_TR_OFF_WHEN
SCOUT_TR_REVERSE
SCOUT_TR_WAIT_FOR
SCREEN_BACKGROUND
SCREEN_BIT
SCREEN_BITS
SCREEN_LARGE
SCREEN_SMALL
SEC_1
SEC_10
SEC_15
SEC_2
SEC_20
SEC_3
SEC_30
SEC_4
SEC_5
SEC_6
SEC_7
SEC_8
SEC_9
SENSOR_1
SENSOR_2
SENSOR_3
SENSOR_4
SENSOR_CELSIUS
SENSOR_COLORBLUE
SENSOR_COLORFULL
SENSOR_COLORGREEN
SENSOR_COLORNONE
SENSOR_COLORRED
SENSOR_EDGE
SENSOR_FAHRENHEIT
SENSOR_LIGHT
SENSOR_MODE_BOOL
SENSOR_MODE_CELSIUS
SENSOR_MODE_EDGE
SENSOR_MODE_FAHRENHEIT
SENSOR_MODE_PERCENT
SENSOR_MODE_PULSE
SENSOR_MODE_RAW
SENSOR_MODE_ROTATION
SENSOR_PULSE
SENSOR_ROTATION
SENSOR_TOUCH
SENSOR_TYPE_CUSTOM
SENSOR_TYPE_COLORBLUE
SENSOR_TYPE_COLORFULL
SENSOR_TYPE_COLORGREEN
SENSOR_TYPE_COLORNONE
SENSOR_TYPE_COLORRED
SENSOR_TYPE_HIGHSPEED
SENSOR_TYPE_LIGHT
SENSOR_TYPE_LIGHT_ACTIVE
SENSOR_TYPE_LIGHT_INACTIVE
SENSOR_TYPE_LOWSPEED
SENSOR_TYPE_LOWSPEED_9V
SENSOR_TYPE_NONE
SENSOR_TYPE_ROTATION
SENSOR_TYPE_SOUND_DB
SENSOR_TYPE_SOUND_DBA
SENSOR_TYPE_TEMPERATURE
SENSOR_TYPE_TOUCH
SetScreenMode
SetSleepTimeoutVal
SHRT_MAX
SHRT_MIN
SIZE_OF_BDADDR
SIZE_OF_BRICK_NAME
SIZE_OF_BT_CONNECT_TABLE
SIZE_OF_BT_DEVICE_TABLE
SIZE_OF_BT_NAME
SIZE_OF_BT_PINCODE
SIZE_OF_BTBUF
SIZE_OF_CLASS_OF_DEVICE
SIZE_OF_HSBUF
SIZE_OF_USBBUF
SIZE_OF_USBDATA
SOUND_FLAGS_IDLE
SOUND_FLAGS_RUNNING
SOUND_FLAGS_UPDATE
SOUND_MODE_LOOP
SOUND_MODE_ONCE
SOUND_MODE_TONE
SOUND_STATE_FILE
SOUND_STATE_IDLE
SOUND_STATE_STOP
SOUND_STATE_TONE
SoundGetState
SoundModuleID
SoundModuleName
SoundOffsetDuration
SoundOffsetFlags
SoundOffsetFreq
SoundOffsetMode
SoundOffsetSampleRate
SoundOffsetSoundFilename
SoundOffsetState
SoundOffsetVolume
SoundPlayFile
SoundPlayTone
SoundSetState
SPECIAL_BIT
SPECIAL_BITS
STAT_COMM_PENDING
STAT_MSG_EMPTY_MAILBOX
STATUSICON_BATTERY
STATUSICON_BIT
STATUSICON_BITS
STATUSICON_BLUETOOTH
STATUSICON_USB
STATUSICON_VM
STATUSTEXT
STEPICON_1
STEPICON_2
STEPICON_3
STEPICON_4
STEPICON_5
STEPICON_BIT
STEPICON_BITS
STEPLINE
STOP_REQ
TachoCount
TachoLimit
TEMP_FQ_1
TEMP_FQ_2
TEMP_FQ_4
TEMP_FQ_6
TEMP_I2C_ADDRESS
TEMP_OS_ONESHOT
TEMP_POL_HIGH
TEMP_POL_LOW
TEMP_REG_CONFIG
TEMP_REG_TEMP
TEMP_REG_THIGH
TEMP_REG_TLOW
TEMP_RES_10BIT
TEMP_RES_11BIT
TEMP_RES_12BIT
TEMP_RES_9BIT
TEMP_SD_CONTINUOUS
TEMP_SD_SHUTDOWN
TEMP_TM_COMPARATOR
TEMP_TM_INTERRUPT
TEXTLINE_1
TEXTLINE_2
TEXTLINE_3
TEXTLINE_4
TEXTLINE_5
TEXTLINE_6
TEXTLINE_7
TEXTLINE_8
TEXTLINE_BIT
TEXTLINE_BITS
TONE_A3
TONE_A4
TONE_A5
TONE_A6
TONE_A7
TONE_AS3
TONE_AS4
TONE_AS5
TONE_AS6
TONE_AS7
TONE_B3
TONE_B4
TONE_B5
TONE_B6
TONE_B7
TONE_C4
TONE_C5
TONE_C6
TONE_C7
TONE_CS4
TONE_CS5
TONE_CS6
TONE_CS7
TONE_D4
TONE_D5
TONE_D6
TONE_D7
TONE_DS4
TONE_DS5
TONE_DS6
TONE_DS7
TONE_E4
TONE_E5
TONE_E6
TONE_E7
TONE_F4
TONE_F5
TONE_F6
TONE_F7
TONE_FS4
TONE_FS5
TONE_FS6
TONE_FS7
TONE_G4
TONE_G5
TONE_G6
TONE_G7
TONE_GS4
TONE_GS5
TONE_GS6
TONE_GS7
TOPLINE
TRAIN_CHANNEL_1
TRAIN_CHANNEL_2
TRAIN_CHANNEL_3
TRAIN_CHANNEL_ALL
TRAIN_FUNC_DECR_SPEED
TRAIN_FUNC_INCR_SPEED
TRAIN_FUNC_STOP
TRAIN_FUNC_TOGGLE_LIGHT
TRUE
TurnRatio
Type
UCHAR_MAX
UF_PENDING_UPDATES
UF_UPDATE_MODE
UF_UPDATE_PID_VALUES
UF_UPDATE_RESET_BLOCK_COUNT
UF_UPDATE_RESET_COUNT
UF_UPDATE_RESET_ROTATION_COUNT
UF_UPDATE_SPEED
UF_UPDATE_TACHO_LIMIT
UI_BT_CONNECT_REQUEST
UI_BT_ERROR_ATTENTION
UI_BT_PIN_REQUEST
UI_BT_STATE_CONNECTED
UI_BT_STATE_OFF
UI_BT_STATE_VISIBLE
UI_BUTTON_ENTER
UI_BUTTON_EXIT
UI_BUTTON_LEFT
UI_BUTTON_NONE
UI_BUTTON_RIGHT
UI_FLAGS_BUSY
UI_FLAGS_DISABLE_EXIT
UI_FLAGS_DISABLE_LEFT_RIGHT_ENTER
UI_FLAGS_ENABLE_STATUS_UPDATE
UI_FLAGS_EXECUTE_LMS_FILE
UI_FLAGS_REDRAW_STATUS
UI_FLAGS_RESET_SLEEP_TIMER
UI_FLAGS_UPDATE
UI_STATE_BT_ERROR
UI_STATE_CONNECT_REQUEST
UI_STATE_DRAW_MENU
UI_STATE_ENTER_PRESSED
UI_STATE_EXECUTE_FILE
UI_STATE_EXECUTING_FILE
UI_STATE_EXIT_PRESSED
UI_STATE_INIT_DISPLAY
UI_STATE_INIT_INTRO
UI_STATE_INIT_LOW_BATTERY
UI_STATE_INIT_MENU
UI_STATE_INIT_WAIT
UI_STATE_LEFT_PRESSED
UI_STATE_LOW_BATTERY
UI_STATE_NEXT_MENU
UI_STATE_RIGHT_PRESSED
UI_STATE_TEST_BUTTONS
UIModuleID
UIModuleName
UINT_MAX
UIOffsetBatteryState
UIOffsetBatteryVoltage
UIOffsetBluetoothState
UIOffsetButton
UIOffsetError
UIOffsetFlags
UIOffsetForceOff
UIOffsetLMSfilename
UIOffsetLongAbort
UIOffsetOBPPointer
UIOffsetPMenu
UIOffsetRechargeable
UIOffsetRunState
UIOffsetSleepTimeout
UIOffsetSleepTimer
UIOffsetState
UIOffsetUsbState
UIOffsetVolume
ULONG_MAX
UpdateCalibCacheInfo
UpdateFlags
USB_CMD_READY
USB_PROTOCOL_OVERHEAD
USHRT_MAX
WriteSemData
-->
    </Constants>
    <Types>
        <TypeDef Enhanced="true" Version="100">
            <Name>AbortFlagType</Name>
            <Enumeration>
                <Value>PRESSED_EV</Value>
                <Value>SHORT_RELEASED_EV</Value>
                <Value>LONG_PRESSED_EV</Value>
                <Value>LONG_RELEASED_EV</Value>
            </Enumeration>
        </TypeDef>
        <TypeDef Version="100">
            <Name>LocationType</Name>
            <Definition>
<![CDATA[
struct LocationType {
  int X;
  int Y;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>SizeType</Name>
            <Definition>
<![CDATA[
struct SizeType {
  int Width;
  int Height;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>FileOpenType</Name>
            <Definition>
<![CDATA[
struct FileOpenType {
  unsigned int Result;
  byte FileHandle;
  string Filename;
  unsigned long Length;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>FileReadWriteType</Name>
            <Definition>
<![CDATA[
struct FileReadWriteType {
  unsigned int Result;
  byte FileHandle;
  string Buffer;
  unsigned long Length;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>FileCloseType</Name>
            <Definition>
<![CDATA[
struct FileCloseType {
  unsigned int Result;
  byte FileHandle;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>FileResolveHandleType</Name>
            <Definition>
<![CDATA[
struct FileResolveHandleType {
  unsigned int Result;
  byte FileHandle;
  bool WriteHandle;
  string Filename;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>FileRenameType</Name>
            <Definition>
<![CDATA[
struct FileRenameType {
  unsigned int Result;
  string OldFilename;
  string NewFilename;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>FileDeleteType</Name>
            <Definition>
<![CDATA[
struct FileDeleteType {
  unsigned int Result;
  string Filename;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>SoundPlayFileType</Name>
            <Definition>
<![CDATA[
struct SoundPlayFileType {
  char Result;
  string Filename;
  bool Loop;
  byte SoundLevel;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>SoundPlayToneType</Name>
            <Definition>
<![CDATA[
struct SoundPlayToneType {
  char Result;
  unsigned int Frequency;
  unsigned int Duration;
  bool Loop;
  byte SoundLevel;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>SoundGetStateType</Name>
            <Definition>
<![CDATA[
struct SoundGetStateType {
  byte State;
  byte Flags;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>SoundSetStateType</Name>
            <Definition>
<![CDATA[
struct SoundSetStateType {
  byte Result;
  byte State;
  byte Flags;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>DrawTextType</Name>
            <Definition>
<![CDATA[
struct DrawTextType {
  char Result;
  LocationType Location;
  string Text;
  unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>DrawPointType</Name>
            <Definition>
<![CDATA[
struct DrawPointType {
  char Result;
  LocationType Location;
  unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>DrawLineType</Name>
            <Definition>
<![CDATA[
struct DrawLineType {
  char Result;
  LocationType StartLoc;
  LocationType EndLoc;
  unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>DrawCircleType</Name>
            <Definition>
<![CDATA[
struct DrawCircleType {
  char Result;
  LocationType Center;
  byte Size;
  unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>DrawRectType</Name>
            <Definition>
<![CDATA[
struct DrawRectType {
  char Result;
  LocationType Location;
  SizeType Size;
  unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>DrawGraphicType</Name>
            <Definition>
<![CDATA[
struct DrawGraphicType {
  char Result;
  LocationType Location;
  string Filename;
  long Variables[];
  unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>SetScreenModeType</Name>
            <Definition>
<![CDATA[
struct SetScreenModeType {
  char Result;
  unsigned long ScreenMode;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>ReadButtonType</Name>
            <Definition>
<![CDATA[
struct ReadButtonType {
  char Result;
  byte Index;
  bool Pressed;
  byte Count;
  bool Reset;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>CommLSWriteType</Name>
            <Definition>
<![CDATA[
struct CommLSWriteType {
  char Result;
  byte Port;
  byte Buffer[];
  byte ReturnLen;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>CommLSReadType</Name>
            <Definition>
<![CDATA[
struct CommLSReadType {
  char Result;
  byte Port;
  byte Buffer[];
  byte BufferLen;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>CommLSCheckStatusType</Name>
            <Definition>
<![CDATA[
struct CommLSCheckStatusType {
  char Result;
  byte Port;
  byte BytesReady;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>RandomNumberType</Name>
            <Definition>
<![CDATA[
struct RandomNumberType {
  int Result;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>GetStartTickType</Name>
            <Definition>
<![CDATA[
struct GetStartTickType {
  unsigned long Result;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>MessageWriteType</Name>
            <Definition>
<![CDATA[
struct MessageWriteType {
  char Result;
  byte QueueID;
  string Message;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>MessageReadType</Name>
            <Definition>
<![CDATA[
struct MessageReadType {
  char Result;
  byte QueueID;
  bool Remove;
  string Message;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>CommBTCheckStatusType</Name>
            <Definition>
<![CDATA[
struct CommBTCheckStatusType {
  char Result;
  byte Connection;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>CommBTWriteType</Name>
            <Definition>
<![CDATA[
struct CommBTWriteType {
  char Result;
  byte Connection;
  byte Buffer[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>KeepAliveType</Name>
            <Definition>
<![CDATA[
struct KeepAliveType {
  unsigned long Result;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>IOMapReadType</Name>
            <Definition>
<![CDATA[
struct IOMapReadType {
  char Result;
  string ModuleName;
  unsigned int Offset;
  unsigned int Count;
  byte Buffer[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="100">
            <Name>IOMapWriteType</Name>
            <Definition>
<![CDATA[
struct IOMapWriteType {
  char Result;
  string ModuleName;
  unsigned int Offset;
  byte Buffer[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>IOMapReadByIDType</Name>
            <Definition>
<![CDATA[
struct IOMapReadByIDType {
  char Result;
  unsigned long ModuleID;
  unsigned int Offset;
  unsigned int Count;
  byte Buffer[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>IOMapWriteByIDType</Name>
            <Definition>
<![CDATA[
struct IOMapWriteByIDType {
  char Result;
  unsigned long ModuleID;
  unsigned int Offset;
  byte Buffer[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>DisplayExecuteFunctionType</Name>
            <Definition>
<![CDATA[
struct DisplayExecuteFunctionType {
  byte Status;
  byte Cmd;
  byte On;
  byte X1;
  byte Y1;
  byte X2;
  byte Y2;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>CommExecuteFunctionType</Name>
            <Definition>
<![CDATA[
struct CommExecuteFunctionType {
  unsigned int Result;
  byte Cmd;
  byte Param1;
  byte Param2;
  byte Param3;
  string Name;
  unsigned int RetVal;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>LoaderExecuteFunctionType</Name>
            <Definition>
<![CDATA[
struct LoaderExecuteFunctionType {
  unsigned int Result;
  byte Cmd;
  string Filename;
  byte Buffer[];
  unsigned long Length;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>FileFindType</Name>
            <Definition>
<![CDATA[
struct FileFindType {
 unsigned int Result;
 byte FileHandle;
 string Filename;
 unsigned long Length;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>CommHSControlType</Name>
            <Definition>
<![CDATA[
struct CommHSControlType {
 char Result;
 byte Command;
 byte BaudRate;
 unsigned int Mode;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>CommHSCheckStatusType</Name>
            <Definition>
<![CDATA[
struct CommHSCheckStatusType {
 bool SendingData;
 bool DataAvailable;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>CommHSReadWriteType</Name>
            <Definition>
<![CDATA[
struct CommHSReadWriteType {
 char Status;
 byte Buffer[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="100">
            <Name>CommLSWriteExType</Name>
            <Definition>
<![CDATA[
struct CommLSWriteExType {
 char Result;
 byte Port;
 byte Buffer[];
 byte ReturnLen;
 byte NoRestartOnRead;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>FileSeekType</Name>
            <Definition>
<![CDATA[
struct FileSeekType {
 unsigned int Result;
 byte FileHandle;
 byte Origin;
 long Length;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>FileResizeType</Name>
            <Definition>
<![CDATA[
struct FileResizeType {
 unsigned int Result;
 byte FileHandle;
 unsigned int NewSize;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>DrawGraphicArrayType</Name>
            <Definition>
<![CDATA[
struct DrawGraphicArrayType {
 char Result;
 LocationType Location;
 byte Data[];
 long Variables[];
 unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>DrawPolygonType</Name>
            <Definition>
<![CDATA[
struct DrawPolygonType {
 char Result;
 LocationType Points[];
 unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>DrawEllipseType</Name>
            <Definition>
<![CDATA[
struct DrawEllipseType {
 char Result;
 LocationType Center;
 byte SizeX;
 byte SizeY;
 unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Enhanced="true" Version="120">
            <Name>DrawFontType</Name>
            <Definition>
<![CDATA[
struct DrawFontType {
 char Result;
 LocationType Location;
 string Filename;
 string Text;
 unsigned long Options;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="120">
            <Name>ColorSensorReadType</Name>
            <Definition>
<![CDATA[
struct ColorSensorReadType {
 char Result;
 byte Port;
 int ColorValue;
 unsigned int RawArray[];
 unsigned int NormalizedArray[];
 int ScaledArray[];
 bool Invalid;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="120">
            <Name>DatalogWriteType</Name>
            <Definition>
<![CDATA[
struct DatalogWriteType {
 char Result;
 byte Message[];
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="120">
            <Name>DatalogGetTimesType</Name>
            <Definition>
<![CDATA[
struct DatalogGetTimesType {
 unsigned long SyncTime;
 unsigned long SyncTick;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="120">
            <Name>SetSleepTimeoutType</Name>
            <Definition>
<![CDATA[
struct SetSleepTimeoutType {
 char Result;
 unsigned long TheSleepTimeout;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="120">
            <Name>CommBTOnOffType</Name>
            <Definition>
<![CDATA[
struct CommBTOnOffType {
 char Result;
 bool PowerState;
};
]]>
            </Definition>
        </TypeDef>
        <TypeDef Version="120">
            <Name>CommBTConnectionType</Name>
            <Definition>
<![CDATA[
struct CommBTConnectionType {
 char Result;
 byte Action;
 string Name;
 byte ConnectionSlot;
};
]]>
            </Definition>
        </TypeDef>
<!--
//cCmdWrapReadSemData
//ArgV[0]: return data, U8
//ArgV[1]: which (0=used, 1=request), U8

//cCmdWrapWriteSemData
//ArgV[0]: return data, U8
//ArgV[1]: which (0=used, 1=request), U8
//ArgV[2]: newValue, U8
//ArgV[3]: action (0= OR, 1= AND), U8

//cCmdWrapUpdateCalibCacheInfo
//ArgV[0]: return data, U8
//ArgV[1]: nm, UBYTE array CStr
//ArgV[2]: min, U16
//ArgV[3]: max , U16

//cCmdWrapComputeCalibValue
//ArgV[0]: return data, U8
//ArgV[1]: nm, UBYTE array CStr
//ArgV[2]: raw, U16 ref in out
-->
        <TypeDef Version="120">
            <Name>ListFilesType</Name>
            <Definition>
<![CDATA[
struct ListFilesType {
 char Result;
 string Pattern;
 string FileList[];
};
]]>
            </Definition>
        </TypeDef>
    </Types>
</API>
