- Programs
task "name"()\={\>"body"\<}\=\=
sub "name"()\={\>"body"\<}\=\=
void "name"("arguments")\={\>"body"\<}\=\=
int "name"("arguments")\={\>"body"\=return "value";\<}\=\=
string "name"("arguments")\={\>"body"\=return "strvalue";\<}\=\=
int "name";\=
unsigned int "name";\=
short "name";\=
long "name";\=
unsigned long "name";\=
bool "name";\=
char "name";\=
byte "name";\=
mutex "name";\=
string "name";\=
float "name";\=
struct "name" {\>"members"\<};\=\=
#define "macro"\=
#include "file"\=
#import "file"\=
#download "file"\=
- Debugging
#pragma debugbreak "msg"\=
- If statements
if ("condition")\={\>"statements"\<}\=
if ("condition")\>"statement"\<else\>"statement"\=
if ("condition")\={\>"body"\<}\=else\={\>"body"\<}\=
if ("condition")\>"statement"\<else if ("condition")\>"statement"\<else\>"statement"\=
- Loops etc...
while ("condition")\={\>"body"\<}\=
do\={\>"body"\<}\=while ("condition")\=
repeat ("value")\={\>"body"\<}\=
for ("init";"condition";"increment")\={\>"body"\<}\=
until ("condition")\={\>"body"\<}\=
switch ("var")\={\>case "num" :\=\>"body"\=break;\=default :\=\>"body"\<}\=
break;\=
continue;\=
return;\=
return "value";\=
goto "label";\=
| Outputs
OnFwd("ports", "pwr");\=
OnFwdEx("ports", "pwr", "reset");\=
OnRev("ports", "pwr");\=
OnRevEx("ports", "pwr", "reset");\=
OnFwdReg("ports", "pwr", "regmode");\=
OnFwdRegEx("ports", "pwr", "regmode", "reset");\=
OnRevReg("ports", "pwr", "regmode");\=
OnRevRegEx("ports", "pwr", "regmode", "reset");\=
OnFwdSync("ports", "pwr", "turnpct");\=
OnFwdSyncEx("ports", "pwr", "turnpct", "reset");\=
OnRevSync("ports", "pwr", "turnpct");\=
OnRevSyncEx("ports", "pwr", "turnpct", "reset");\=
RotateMotor("ports", "pwr", "angle");\=
RotateMotorPID("ports", "pwr", "angle", "p", "i", "d");\=
RotateMotorEx("ports", "pwr", "angle", "turnpct", "bsync", "bstop");\=
RotateMotorExPID("ports", "pwr", "angle", "turnpct", "bsync", "bstop", "p", "i", "d");\=
Off("ports");\=
OffEx("ports", "reset");\=
Coast("ports");\=
CoastEx("ports", "reset");\=
ResetTachoCount("ports");\=
ResetBlockTachoCount("ports");\=
ResetRotationCount("ports");\=
ResetAllTachoCounts("ports");\=
SetOutput("ports", "field", "value");\=
SetMotorRegulationTime("time");\=
SetMotorRegulationOptions("options");\=
GetOutput("port", "field")
MotorTachoLimit("port")
MotorTachoCount("port")
MotorMode("port")
MotorPower("port")
MotorActualSpeed("port")
MotorRunState("port")
MotorTurnRatio("port")
MotorRegulation("port")
MotorOverload("port")
MotorRegPValue("port")
MotorRegIValue("port")
MotorRegDValue("port")
MotorBlockTachoCount("port")
MotorRotationCount("port")
MotorOutputOptions("port")
MotorMaxSpeed("port")
MotorMaxAcceleration("port")
MotorRegulationTime()
MotorRegulationOptions()
PosRegAddAngle("output", "angle_add");\=
PosRegEnable("output", "p", "i", "d");\=
PosRegSetAngle("output", "angle");\=
PosRegSetMax("output", "max_speed", "max_acceleration");\=
- Timing
Wait("time(1 ms)");\=
CurrentTick()
FirstTick()
Yield();\=
- Sensors
SetInput("port", "field", "value");\=
GetInput("port", "field")
SetSensorTouch("port");\=
SetSensorLight("port");\=
SetSensorSound("port");\=
SetSensorLowspeed("port");\=
SetSensorUltrasonic("port");\=
SetSensorEMeter("port");\=
SetSensorTemperature("port");\=
SetSensorColorFull("port");\=
SetSensorColorRed("port");\=
SetSensorColorGreen("port");\=
SetSensorColorBlue("port");\=
SetSensorColorNone("port");\=
SetSensor("port", SENSOR_TOUCH);\=
SetSensor("port", SENSOR_LIGHT);\=
SetSensor("port", SENSOR_ROTATION);\=
SetSensor("port", SENSOR_CELSIUS);\=
SetSensor("port", SENSOR_FAHRENHEIT);\=
SetSensor("port", SENSOR_PULSE);\=
SetSensor("port", SENSOR_EDGE);\=
SetSensor("port", SENSOR_COLORFULL);\=
SetSensor("port", SENSOR_COLORRED);\=
SetSensor("port", SENSOR_COLORGREEN);\=
SetSensor("port", SENSOR_COLORBLUE);\=
SetSensor("port", SENSOR_COLORNONE);\=
| Sensor types
SetSensorType("port", "type");\=
SetSensorType("port", SENSOR_TYPE_TOUCH);\=
SetSensorType("port", SENSOR_TYPE_TEMPERATURE);\=
SetSensorType("port", SENSOR_TYPE_LIGHT);\=
SetSensorType("port", SENSOR_TYPE_ROTATION);\=
SetSensorType("port", SENSOR_TYPE_LIGHT_ACTIVE);\=
SetSensorType("port", SENSOR_TYPE_LIGHT_INACTIVE);\=
SetSensorType("port", SENSOR_TYPE_SOUND_DB);\=
SetSensorType("port", SENSOR_TYPE_SOUND_DBA);\=
SetSensorType("port", SENSOR_TYPE_LOWSPEED);\=
SetSensorType("port", SENSOR_TYPE_LOWSPEED_9V);\=
SetSensorType("port", SENSOR_TYPE_HISPEED);\=
SetSensorType("port", SENSOR_TYPE_CUSTOM);\=
SetSensorType("port", SENSOR_TYPE_COLORFULL);\=
SetSensorType("port", SENSOR_TYPE_COLORRED);\=
SetSensorType("port", SENSOR_TYPE_COLORGREEN);\=
SetSensorType("port", SENSOR_TYPE_COLORBLUE);\=
SetSensorType("port", SENSOR_TYPE_COLORNONE);\=
- Sensor modes
SetSensorMode("port", "mode");\=
SetSensorMode("port", SENSOR_MODE_RAW + "slope");\=
SetSensorMode("port", SENSOR_MODE_BOOL);\=
SetSensorMode("port", SENSOR_MODE_EDGE);\=
SetSensorMode("port", SENSOR_MODE_PULSE);\=
SetSensorMode("port", SENSOR_MODE_PERCENT);\=
SetSensorMode("port", SENSOR_MODE_CELSIUS);\=
SetSensorMode("port", SENSOR_MODE_FAHRENHEIT);\=
SetSensorMode("port", SENSOR_MODE_ROTATION);\=
- Sensor misc
ClearSensor("port");\=
ResetSensor("port");\=
Sensor("port")
SensorUS("port")
SensorTemperature("port")
SensorType("port")
SensorMode("port")
SensorRaw("port") 
SensorNormalized("port")
SensorScaled("port") 
SensorInvalid("port")
ReadSensorColorRaw("port", "rawValues");\=
ReadSensorColorEx("port", "colorVal", "raw", "norm", "scaled");\=
ReadSensorUSEx("port", "values");\=
ReadSensorEMeter("port", "vIn", "aIn", "vOut", "aOut", "joules", "wIn", "wOut");\=
- Digital Sensors
I2CStatus("port", "bready");\=
I2CCheckStatus("port");\=
I2CBytesReady("port");\=
I2CWrite("port", "retlen", "buffer");\=
I2CRead("port", "buflen", "buffer");\=
I2CBytes("port", "inbuf", "count", "outbuf");\=
I2CDeviceId("port", "i2caddr");\=
I2CDeviceInfo("port", "i2caddr", "info");\=
I2CSendCommand("port", "i2caddr", "cmd");\=
I2CVendorId("port", "i2caddr");\=
I2CVersion("port", "i2caddr");\=
ReadI2CRegister("port", "i2caddr", "reg", "out");\=
WriteI2CRegister("port", "i2caddr", "reg", "value");\=
- Multitasking
Precedes("task list");\=
Follows("task list");\=
Acquire("mutex");\=
Release("mutex");\=
ExitTo("task");\=
start "task";\=
stop "task";\=
Stop("stop?");\=
- Sounds
PlaySound("snd");\=
PlayTone("frequency", "duration");\=
PlayTones("tones");\=
PlayToneEx("frequency", "duration", "volume", "loop?");\=
PlayFile("filename");\=
PlayFileEx("filename", "volume", "loop?");\=
SoundState()
SoundFlags()
StopSound();\=
| Drawing
ClearScreen();\=
ClearLine("line");\=
ResetScreen();\=
TextOut("x", "line", "txt", "options");\=
NumOut("x", "line", "val", "options");\=
PointOut("x", "y", "options");\=
LineOut("x1", "y1", "x2", "y2", "options");\=
RectOut("x", "y", "width", "height", "options");\=
CircleOut("x", "y", "radius", "options");\=
GraphicOut("x", "y", "filename", "options");\=
GraphicOutEx("x", "y", "filename", "vars", "options");\=
GraphicArrayOut("x", "y", "data", "options");\=
GraphicArrayOutEx("x", "y", "data", "vars", "options");\=
EllipseOut("x", "y", "radius1", "radius1", "options");\=
FontNumOut("x", "y", "filename", "val", "options");\=
FontTextOut("x", "y", "filename", "txt", "options");\=
PolyOut("points", "options");\=
- Buttons
ButtonPressed("btn")
ButtonCount("btn")
ReadButtonEx("btn", "pressedvar", "countvar");\=
- Math
abs("expression")
sign("expression")
Random("expression")
Random()
rand()
srand();\=
sqrt("x")
sin("x")
cos("x")
asin("x")
acos("x")
tan("x")
atan("x")
ceil("x")
exp("x")
floor("x")
sinh("x")
cosh("x")
tanh("x")
log("x")
log10("x")
atan2("x", "y")
pow("x", "y")
trunc("x")
frac("x")
muldiv32("a", "b", "c")
sind("x")
cosd("x")
asind("x")
acosd("x")
tand("x")
atand("x")
sinhd("x")
coshd("x")
tanhd("x")
atan2d("x", "y")
atof("str")
atoi("str")
atol("str")
- Arrays
ArrayBuild("aout", "...")
ArrayLen("asrc")
ArrayInit("aout", "val", "cnt")
ArraySubset("aout", "asrc", "idx", "len")
ArraySum("src", "idx", "len")
ArrayMean("src", "idx", "len")
ArraySumSqr("src", "idx", "len")
ArrayStd("src", "idx", "len")
ArrayMin("src", "idx", "len")
ArrayMax("src", "idx", "len")
ArraySort("dest", "src", "idx", "len")
ArrayOp("op", "dest", "src", "idx", "len")
- Misc stuff
ResetSleepTimer();\=
PowerDown();\=
RebootInFirmwareMode();\=
BatteryLevel()
FreeMemory()
SizeOf("value")
- Strings
NumToStr("val")
FormatNum("fmt", "val")
strcat("dest", "src")
StrCat("str1", "str2", "strN")
SubStr("str", "idx", "len")
Flatten("val")
StrReplace("str", "idx", "strnew")
StrToNum("str")
strlen("str")
StrLen("str")
StrIndex("str", "idx")
strcmp("str1", "str2")
strcpy("dest", "src")
strncat("dest", "src", "num")
strncmp("str1", "str2", "num")
strncpy("dest", "src", "num")
strtod("str", "endptr")
strtol("str", "endptr", "base")
strtoul("str", "endptr", "base")
sprintf("str", "format", "value")
Pos("substr", "str")
- File IO
CreateFile("fname", "fsize", "handle");\=
CreateFileLinear("fname", "fsize", "handle");\=
CreateFileNonLinear("fname", "fsize", "handle");\=
OpenFileAppend("fname", "fsize", "handle");\=
OpenFileRead("fname", "fsize", "handle");\=
OpenFileReadLinear("fname", "fsize", "handle");\=
CloseFile("handle");\=
ResolveHandle("fname", "handle", "writeable");\=
RenameFile("oldname", "newname");\=
ResizeFile("fname", "newsize");\=
DeleteFile("fname");\=
FindFirstFile("name", "handle");\=
FindNextFile("name", "handle");\=
Read("handle", "n");\=
ReadLn("handle", "n");\=
ReadBytes("handle", "len", "buf");\=
ReadLnString("handle", "output");\=
Write("handle", "n");\=
WriteLn("handle", "n");\=
WriteString("handle", "str", "cnt");\=
WriteLnString("handle", "str", "cnt");\=
WriteBytes("handle", "buf", "cnt");\=
WriteBytesEx("handle", "len", "buf");\=
fopen("filename", "mode");\=
fclose(byte handle);\=
feof("handle");\=
fflush("handle");\=
fgetc("handle");\=
fgets("str", "num", "handle");\=
fprintf("handle", "format", "value");\=
fputc("ch", "handle");\=
fputs("str", "handle");\=
fseek("handle", "offset", "origin");\=
ftell("handle");\=
remove("filename");\=
rename("old", "new");\=
rewind("handle");\=
- Messaging
JoystickMessageRead("queue");\=
SendMessage("queue", "msg");\=
ReceiveMessage("queue", "clear", "msg");\=
ReceiveRemoteBool("queue", "clear", "bval");\=
ReceiveRemoteNumber("queue", "clear", "val");\=
ReceiveRemoteString("queue", "clear", "str");\=
ReceiveRemoteMessageEx("queue", "clear", "str", "val", "bval");\=
SendResponseBool("queue", "bval");\=
SendResponseNumber("queue", "val");\=
SendResponseString("queue", "msg");\=
BluetoothStatus("conn");\=
BluetoothWrite("conn", "buffer");\=
SendRemoteBool("conn", "queue", "bval");\=
SendRemoteNumber("conn", "queue", "val");\=
SendRemoteString("conn", "queue", "str");\=
RemoteBluetoothFactoryReset("conn");\=
RemoteCloseFile("conn", "handle");\=
RemoteConnectionIdle("conn");\=
RemoteConnectionWrite("conn", "buffer");\=
RemoteDatalogRead("conn", "remove", "cnt", "log");\=
RemoteDatalogSetTimes("conn", "synctime");\=
RemoteDeleteFile("conn", "filename");\=
RemoteDeleteUserFlash("conn");\=
RemoteFindFirstFile("conn", "mask", "handle", "name", "size");\=
RemoteFindNextFile("conn", "handle", "name", "size");\=
RemoteGetBatteryLevel("conn", "value");\=
RemoteGetBluetoothAddress("conn", "btaddr");\=
RemoteGetConnectionCount("conn", "cnt");\=
RemoteGetConnectionName("conn", "idx", "name");\=
RemoteGetContactCount("conn", "cnt");\=
RemoteGetContactName("conn", "idx", "name");\=
RemoteGetCurrentProgramName("conn", "name");\=
RemoteGetDeviceInfo("conn", "name", "btaddr", "btsignal", "freemem");\=
RemoteGetFirmwareVersion("conn", "pmin", "pmaj", "fmin", "fmaj");\=
RemoteGetInputValues("conn", "params");\=
RemoteGetOutputState("conn", "params");\=
RemoteGetProperty("conn", "property", "value");\=
RemoteIOMapRead("conn", "id", "offset", "numbytes", "data");\=
RemoteIOMapWriteBytes("conn", "id", "offset", "data");\=
RemoteIOMapWriteValue("conn", "id", "offset", "value");\=
RemoteLowspeedGetStatus("conn", "value");\=
RemoteLowspeedRead("conn", "port", "bread", "data");\=
RemoteLowspeedWrite("conn", "port", "txlen", "rxlen", "data");\=
RemoteOpenAppendData("conn", "filename", "handle", "size");\=
RemoteOpenRead("conn", "filename", "handle", "size");\=
RemoteOpenWrite("conn", "filename", "size", "handle");\=
RemoteOpenWriteData("conn", "filename", "size", "handle");\=
RemoteOpenWriteLinear("conn", "filename", "size", "handle");\=
RemotePollCommand("conn", "bufnum", "len", "data");\=
RemotePollCommandLength("conn", "bufnum", "length");\=
RemoteRead("conn", "handle", "numbytes", "data");\=
RemoteRenameFile("conn", "oldname", "newname");\=
RemoteResetTachoCount("conn", "port");\=
RemoteSetBrickName("conn", "name");\=
RemoteSetProperty("conn", "prop", "value");\=
RemoteWrite("conn", "handle", "numbytes", "data");\=
RemoteMessageRead("conn", "queue");\=
RemoteMessageWrite("conn", "queue", "msg");\=
RemoteStartProgram("conn", "filename");\=
RemoteStopProgram("conn");\=
RemotePlaySoundFile("conn", "filename", "bloop");\=
RemotePlayTone("conn", "frequency", "duration");\=
RemoteStopSound("conn");\=
RemoteKeepAlive("conn");\=
RemoteResetScaledValue("conn", "port");\=
RemoteResetMotorPosition("conn", "port", "brelative");\=
RemoteSetInputMode("conn", "port", "type", "mode");\=
RemoteSetOutputState("conn", "port", "speed", "mode", "regmode", "turnpct", "runstate", "tacholimit");\=
- Low-level System Calls
SysCall("func", "args");\=
SysColorSensorRead("args");\=
SysCommBTCheckStatus("args");\=
SysCommBTConnection("args");\=
SysCommBTOnOff("args");\=
SysCommBTWrite("args");\=
SysCommExecuteFunction("args");\=
SysCommHSCheckStatus("args");\=
SysCommHSControl("args");\=
SysCommHSRead("args");\=
SysCommHSWrite("args");\=
SysCommLSCheckStatus("args");\=
SysCommLSRead("args");\=
SysCommLSWrite("args");\=
SysCommLSWriteEx("args");\=
SysComputeCalibValue("args");\=
SysDatalogGetTimes("args");\=
SysDatalogWrite("args");\=
SysDisplayExecuteFunction("args");\=
SysDrawCircle("args");\=
SysDrawEllipse("args");\=
SysDrawFont("args");\=
SysDrawGraphic("args");\=
SysDrawGraphicArray("args");\=
SysDrawLine("args");\=
SysDrawPoint("args");\=
SysDrawPolygon("args");\=
SysDrawRect("args");\=
SysDrawText("args");\=
SysFileClose("args");\=
SysFileDelete("args");\=
SysFileFindFirst("args");\=
SysFileFindNext("args");\=
SysFileOpenAppend("args");\=
SysFileOpenRead("args");\=
SysFileOpenReadLinear("args");\=
SysFileOpenWrite("args");\=
SysFileOpenWriteLinear("args");\=
SysFileOpenWriteNonLinear("args");\=
SysFileRead("args");\=
SysFileRename("args");\=
SysFileResize("args");\=
SysFileResolveHandle("args");\=
SysFileSeek("args");\=
SysFileTell("args");\=
SysFileWrite("args");\=
SysGetStartTick("args");\=
SysIOMapRead("args");\=
SysIOMapReadByID("args");\=
SysIOMapWrite("args");\=
SysIOMapWriteByID("args");\=
SysKeepAlive("args");\=
SysListFiles("args");\=
SysLoaderExecuteFunction("args");\=
SysMemoryManager("args");\=
SysMessageRead("args");\=
SysMessageWrite("args");\=
SysRandomNumber("args");\=
SysRandomEx("args");\=
SysReadButton("args");\=
SysReadLastResponse("args");\=
SysReadSemData("args");\=
SysSetScreenMode("args");\=
SysSetSleepTimeout("args");\=
SysSoundGetState("args");\=
SysSoundPlayFile("args");\=
SysSoundPlayTone("args");\=
SysSoundSetState("args");\=
SysUpdateCalibCacheInfo("args");\=
SysWriteSemData("args");\=
- HiTechnic API functions
ReadSensorHTAccel("port", "x", "y", "z");\=
ReadSensorHTAngle("port", "Angle", "AccAngle", "RPM");\=
ReadSensorHTBarometric("port", "temp", "press");\=
ReadSensorHTColor("port", "ColorNum", "Red", "Green", "Blue");\=
ReadSensorHTColor2Active("port", "ColorNum", "Red", "Green", "Blue", "White");\=
ReadSensorHTIRReceiver("port", "pfdata");\=
ReadSensorHTIRReceiverEx("port", "offset", "pfchar");\=
ReadSensorHTIRSeeker("port", "dir", "s1", "s3", "s5", "s7", "s9");\=
ReadSensorHTIRSeeker2AC("port", "dir", "s1", "s3, "s5, "s7", "s9");\=
ReadSensorHTIRSeeker2DC("port", "dir", "s1", "s3, "s5, "s7", "s9", "avg");\=
ReadSensorHTNormalizedColor("port", "ColorIdx", "Red", "Green", "Blue");\=
ReadSensorHTNormalizedColor2Active("port", "ColorIdx", "Red", "Green", "Blue");\=
ReadSensorHTProtoAllAnalog("port", "a0", "a1", "a2", "a3", "a4");\=
ReadSensorHTRawColor("port", "Red", "Green", "Blue");\=
ReadSensorHTRawColor2("port", "Red", "Green", "Blue", "White");\=
ReadSensorHTSuperProAllAnalog("port", "a0", "a1", "a2", "a3");\=
ReadSensorHTSuperProAnalogOut("port", "dac", "mode", "freq", "volt");\=
ReadSensorHTTouchMultiplexer("port", "t1", "t2", "t3", "t4");\=
ResetSensorHTAngle("port", "mode");\=
ResetHTBarometricCalibration("port");\=
SensorHTColorNum("port");\=
SensorHTCompass("port");\=
SensorHTEOPD("port");\=
SensorHTGyro("port", "offset");\=
SensorHTIRSeeker2ACDir("port");\=
SensorHTIRSeeker2Addr("port", "reg");\=
SensorHTIRSeeker2DCDir("port");\=
SensorHTIRSeekerDir("port");\=
SensorHTMagnet("port", "offset");\=
SensorHTProtoAnalog("port", "input");\=
SensorHTProtoDigital("port");\=
SensorHTProtoDigitalControl("port");\=
SensorHTSuperProAnalog("port", "input");\=
SensorHTSuperProDigital("port");\=
SensorHTSuperProDigitalControl("port");\=
SensorHTSuperProLED("port");\=
SensorHTSuperProProgramControl("port");\=
SensorHTSuperProStrobe("port");\=
SetHTBarometricCalibration("port", "cal");\=
SetHTColor2Mode("port", "mode");\=
SetHTIRSeeker2Mode("port", "mode");\=
SetSensorHTProtoDigital("port", "value");\=
SetSensorHTProtoDigitalControl("port", "value");\=
SetSensorHTSuperProAnalogOut("port", "dac", "mode", "freq", "volt");\=
SetSensorHTSuperProDigital("port", "value");\=
SetSensorHTSuperProDigitalControl("port", "value");\=
SetSensorHTSuperProLED("port", "value");\=
SetSensorHTSuperProProgramControl("port", "value");\=
SetSensorHTSuperProStrobe("port", "value");\=
SetSensorHTEOPD("port", "bStandard");\=
SetSensorHTGyro("port");\=
SetSensorHTMagnet("port");\=
HTIRTrain("port", "channel", "func");\=
HTPFComboDirect("port", "channel", "outa", "outb");\=
HTPFComboPWM("port", "channel", "outa", "outb");\=
HTPFRawOutput("port", "nibble0", "nibble1", "nibble2");\=
HTPFRepeat("port", "count", "delay");\=
HTPFSingleOutputCST("port", "channel", "out", "func");\=
HTPFSingleOutputPWM("port", "channel", "out", "func");\=
HTPFSinglePin("port", "channel", "out", "pin", "func", "cont");\=
HTPFTrain("port", "channel", "func");\=
HTRCXAddToDatalog("src", "value");\=
HTRCXBatteryLevel();\=
HTRCXClearAllEvents();\=
HTRCXClearCounter("counter");\=
HTRCXClearMsg();\=
HTRCXClearSensor("port");\=
HTRCXClearSound();\=
HTRCXClearTimer("timer");\=
HTRCXCreateDatalog("size");\=
HTRCXDecCounter("counter");\=
HTRCXDeleteSub("subnum");\=
HTRCXDeleteSubs();\=
HTRCXDeleteTask("tasknum");\=
HTRCXDeleteTasks();\=
HTRCXDisableOutput("outputs");\=
HTRCXEnableOutput("outputs");\=
HTRCXEvent("src", "value");\=
HTRCXFloat("outputs");\=
HTRCXFwd("outputs");\=
HTRCXIncCounter("counter");\=
HTRCXInvertOutput("outputs");\=
HTRCXMuteSound();\=
HTRCXObvertOutput("outputs");\=
HTRCXOff("outputs");\=
HTRCXOn("outputs");\=
HTRCXOnFor("outputs", "ms");\=
HTRCXOnFwd("outputs");\=
HTRCXOnRev("outputs");\=
HTRCXPBTurnOff();\=
HTRCXPing();\=
HTRCXPlaySound("snd");\=
HTRCXPlayTone("freq", "duration");\=
HTRCXPlayToneVar("varnum", "duration");\=
HTRCXPoll("src", "value");\=
HTRCXPollMemory("address");\=
HTRCXRemote("cmd");\=
HTRCXRev("outputs");\=
HTRCXSelectDisplay("src", "value");\=
HTRCXSelectProgram("prog");\=
HTRCXSendSerial("first", "count");\=
HTRCXSetDirection("outputs", "dir");\=
HTRCXSetEvent("evt", "src", "type");\=
HTRCXSetGlobalDirection("outputs", "dir");\=
HTRCXSetGlobalOutput("outputs", "mode");\=
HTRCXSetIRLinkPort("port");\=
HTRCXSetMaxPower("outputs", "pwrsrc", "pwrval");\=
HTRCXSetMessage("msg");\=
HTRCXSetOutput("outputs", "mode");\=
HTRCXSetPower("outputs", "pwrsrc", "pwrval");\=
HTRCXSetPriority("port");\=
HTRCXSetSensorMode("port", "mode");\=
HTRCXSetSensorType("port", "type");\=
HTRCXSetSleepTime("time");\=
HTRCXSetTxPower("pwr");\=
HTRCXSetWatch("hours", "minutes");\=
HTRCXStartTask("tasknum");\=
HTRCXStopAllTasks();\=
HTRCXStopTask("tasknum");\=
HTRCXToggle("outputs");\=
HTRCXUnmuteSound();\=
HTScoutCalibrateSensor();\=
HTScoutMuteSound();\=
HTScoutSelectSounds("grp");\=
HTScoutSendVLL("src", "value");\=
HTScoutSetEventFeedback("src", "value");\=
HTScoutSetLight("x");\=
HTScoutSetScoutMode("mode");\=
HTScoutSetSensorClickTime("src", "value");\=
HTScoutSetSensorHysteresis("src", "value");\=
HTScoutSetSensorLowerLimit("src", "value");\=
HTScoutSetSensorUpperLimit("src", "value");\=
HTScoutUnmuteSound();\=
- Mindsensor API functions
ACCLNxCalibrateX("port", "i2caddr");\=
ACCLNxCalibrateXEnd("port", "i2caddr");\=
ACCLNxCalibrateY("port", "i2caddr");\=
ACCLNxCalibrateYEnd("port", "i2caddr");\=
ACCLNxCalibrateZ("port", "i2caddr");\=
ACCLNxCalibrateZEnd("port", "i2caddr");\=
ACCLNxResetCalibration("port", "i2caddr");\=
ACCLNxSensitivity("port", "i2caddr");\=
ACCLNxXOffset("port", "i2caddr")
ACCLNxXRange("port", "i2caddr")
ACCLNxYOffset("port", "i2caddr")
ACCLNxYRange("port", "i2caddr")
ACCLNxZOffset("port", "i2caddr")
ACCLNxZRange("port", "i2caddr")
DISTNxDistance("port", "i2caddr");\=
DISTNxEnergize("port", "i2caddr");\=
DISTNxGP2D12("port", "i2caddr");\=
DISTNxGP2D120("port", "i2caddr");\=
DISTNxGP2YA02("port", "i2caddr");\=
DISTNxGP2YA21("port", "i2caddr");\=
DISTNxMaxDistance("port", "i2caddr");\=
DISTNxMinDistance("port", "i2caddr");\=
DISTNxModuleType("port", "i2caddr");\=
DISTNxNumPoints("port", "i2caddr");\=
DISTNxVoltage("port", "i2caddr");\=
MSADPAOff("port", "i2caddr");\=
MSADPAOn("port", "i2caddr");\=
MSDeenergize("port", "i2caddr");\=
MSEnergize("port", "i2caddr");\=
MSIRTrain("port", "i2caddr", "channel", "func");\=
MSPFComboDirect("port", "i2caddr", "channel", "outa", "outb");\=
MSPFComboPWM("port", "i2caddr", "channel", "outa", "outb");\=
MSPFRawOutput("port", "i2caddr", "nibble0", "nibble1", "nibble2");\=
MSPFRepeat("port", "i2caddr", "count", "delay");\=
MSPFSingleOutputCST("port", "i2caddr", "channel", "out", "func");\=
MSPFSingleOutputPWM("port", "i2caddr", "channel", "out", "func");\=
MSPFSinglePin("port", "i2caddr", "channel", "out", "pin", "func", "cont");\=
MSPFTrain("port", "i2caddr", "channel", "func");\=
MSRCXAbsVar("varnum", "src", "value");\=
MSRCXAddToDatalog("src", "value");\=
MSRCXAndVar("varnum", "src", "value");\=
MSRCXBatteryLevel();\=
MSRCXBoot();\= 
MSRCXCalibrateEvent("evt", "low", "hi", "hyst");\=
MSRCXClearAllEvents();\=
MSRCXClearCounter("counter");\=
MSRCXClearMsg();\=
MSRCXClearSensor("port");\=
MSRCXClearSound();\=
MSRCXClearTimer("timer");\=
MSRCXCreateDatalog("size");\=
MSRCXDecCounter("counter");\=
MSRCXDeleteSub("subnum");\=
MSRCXDeleteSubs();\=
MSRCXDeleteTask("tasknum");\=
MSRCXDeleteTasks();\=
MSRCXDisableOutput("outputs");\=
MSRCXDivVar("varnum", "src", "value");\=
MSRCXEnableOutput("outputs");\=
MSRCXEvent("src", "value");\=
MSRCXFloat("outputs");\=
MSRCXFwd("outputs");\=
MSRCXIncCounter("counter");\=
MSRCXInvertOutput("outputs");\=
MSRCXMulVar("varnum", "src", "value");\=
MSRCXMuteSound();\=
MSRCXObvertOutput("outputs");\=
MSRCXOff("outputs");\=
MSRCXOn("outputs");\=
MSRCXOnFor("outputs", "ms");\=
MSRCXOnFwd("outputs");\=
MSRCXOnRev("outputs");\=
MSRCXOrVar("varnum", "src", "value");\= 
MSRCXPBTurnOff();\=
MSRCXPing();\=
MSRCXPlaySound("snd");\=
MSRCXPlayTone("freq", "duration");\=
MSRCXPlayToneVar("varnum", "duration");\=
MSRCXPoll("src", "value");\=
MSRCXPollMemory("address", "count");\=
MSRCXRemote("cmd");\=
MSRCXReset();\=
MSRCXRev("outputs");\=
MSRCXSelectDisplay("src", "value");\=
MSRCXSelectProgram("prog");\=
MSRCXSendSerial("first", "count");\=
MSRCXSet("dstsrc", "dstval", "src", "value");\=
MSRCXSetDirection("outputs", "dir");\=
MSRCXSetEvent("evt", "src", "type");\=
MSRCXSetGlobalDirection("outputs", "dir");\=
MSRCXSetGlobalOutput("outputs", "mode");\=
MSRCXSetMaxPower("outputs", "pwrsrc", "pwrval");\=
MSRCXSetMessage("msg");\=
MSRCXSetNRLinkPort("port", "i2caddr");\=
MSRCXSetOutput("outputs", "mode");\=
MSRCXSetPower("outputs", "pwrsrc", "pwrval");\=
MSRCXSetPriority("port");\=
MSRCXSetSensorMode("port", "mode");\=
MSRCXSetSensorType("port", "type");\=
MSRCXSetSleepTime("time");\=
MSRCXSetTxPower("pwr");\=
MSRCXSetUserDisplay("src", "value", "precision");\=
MSRCXSetVar("varnum", "src", "value");\=
MSRCXSetWatch("hours", "minutes");\=
MSRCXSgnVar("varnum", "src", "value");\=
MSRCXStartTask("tasknum");\=
MSRCXStopAllTasks();\=
MSRCXStopTask("tasknum");\=
MSRCXSubVar("varnum", "src", "value");\=
MSRCXSumVar("varnum", "src", "value");\=
MSRCXToggle("outputs");\=
MSRCXUnlock();\=
MSRCXUnmuteSound();\=
MSReadValue("port", "i2caddr", "reg", "numbytes");\=
MSScoutCalibrateSensor();\=
MSScoutMuteSound();\=
MSScoutSelectSounds("grp");\=
MSScoutSendVLL("src", "value");\=
MSScoutSetCounterLimit("ctr", "src", "value");\=
MSScoutSetEventFeedback("src", "value");\=
MSScoutSetLight("x");\=
MSScoutSetScoutMode("mode");\=
MSScoutSetScoutRules("m", "t", "l", "tm", "fx");\=
MSScoutSetSensorClickTime("src", "value");\=
MSScoutSetSensorHysteresis("src", "value");\=
MSScoutSetSensorLowerLimit("src", "value");\=
MSScoutSetSensorUpperLimit("src", "value");\=
MSScoutSetTimerLimit("tmr", "src", "value");\=
MSScoutUnmuteSound();\=
NRLink2400("port", "i2caddr");\=
NRLink4800("port", "i2caddr");\=
NRLinkFlush("port", "i2caddr");\=
NRLinkIRLong("port", "i2caddr");\=
NRLinkIRShort("port", "i2caddr");\=
NRLinkSetPF("port", "i2caddr");\=
NRLinkSetRCX("port", "i2caddr");\=
NRLinkSetTrain("port", "i2caddr");\=
NRLinkStatus("port", "i2caddr");\=
NRLinkTxRaw("port", "i2caddr");\=
NXTHIDAsciiMode("port", "i2caddr");\=
NXTHIDDirectMode("port", "i2caddr");\=
NXTHIDLoadCharacter("port", "i2caddr", "modifier", "character");\=
NXTHIDTransmit("port", "i2caddr");\=
NXTLineLeaderAverage("port", "i2caddr");\=
NXTLineLeaderCalibrateBlack("port", "i2caddr");\=
NXTLineLeaderCalibrateWhite("port", "i2caddr");\=
NXTLineLeaderInvert("port", "i2caddr");\=
NXTLineLeaderPowerDown("port", "i2caddr");\=
NXTLineLeaderPowerUp("port", "i2caddr");\=
NXTLineLeaderReset("port", "i2caddr");\=
NXTLineLeaderResult("port", "i2caddr");\=
NXTLineLeaderSnapshot("port", "i2caddr");\=
NXTLineLeaderSteering("port", "i2caddr");\=
NXTPowerMeterCapacityUsed("port", "i2caddr");\=
NXTPowerMeterElapsedTime("port", "i2caddr");\=
NXTPowerMeterErrorCount("port", "i2caddr");\=
NXTPowerMeterMaxCurrent("port", "i2caddr");\=
NXTPowerMeterMaxVoltage("port", "i2caddr");\=
NXTPowerMeterMinCurrent("port", "i2caddr");\=
NXTPowerMeterMinVoltage("port", "i2caddr");\=
NXTPowerMeterPresentCurrent("port", "i2caddr");\=
NXTPowerMeterPresentPower("port", "i2caddr");\=
NXTPowerMeterPresentVoltage("port", "i2caddr");\=
NXTPowerMeterResetCounters("port", "i2caddr");\=
NXTPowerMeterTotalPowerConsumed("port", "i2caddr");\=
NXTServoBatteryVoltage("port", "i2caddr");\=
NXTServoEditMacro("port", "i2caddr");\=
NXTServoGotoMacroAddress("port", "i2caddr", "macro");\=
NXTServoHaltMacro("port", "i2caddr");\=
NXTServoInit("port", "i2caddr", "servo");\=
NXTServoPauseMacro("port", "i2caddr");\=
NXTServoPosition("port", "i2caddr", "servo");\=
NXTServoQuitEdit("port");\=
NXTServoReset("port", "i2caddr");\=
NXTServoResumeMacro("port", "i2caddr");\=
NXTServoSpeed("port", "i2caddr", "servo");\=
PFMateSend("port", "i2caddr", "channel", "motors", "cmdA", "spdA", "cmdB", "spdB");\=
PFMateSendRaw("port", "i2caddr", "channel", "b1", "b2");\=
PSPNxAnalog("port", "i2caddr");\=
PSPNxDigital("port", "i2caddr");\=
ReadNRLinkBytes("port", "i2caddr", "bytes");\=
ReadSensorMSAccel("port", "i2caddr", "x", "y", "z");\=
ReadSensorMSPlayStation("port", "i2caddr", "b1", "b2", "xleft", "yleft", "xright", "yright");\=
ReadSensorMSRTClock("port", "sec", "min", "hrs", "dow", "date", "month", "year");\=
ReadSensorMSTilt("port", "i2caddr", "x", "y", "z");\=
RunNRLinkMacro("port", "i2caddr", "macro");\=
SensorMSCompass("port", "i2caddr");\=
SensorMSDROD("port");\=
SensorMSPressure("port");\=
SensorMSPressureRaw("port");\=
SensorNXTSumoEyes("port");\=
SensorNXTSumoEyesRaw("port");\=
SetACCLNxSensitivity("port", "i2caddr", "slevel");\=
SetNXTLineLeaderKdFactor("port", "i2caddr", "value");\=
SetNXTLineLeaderKdValue("port", "i2caddr", "value");\=
SetNXTLineLeaderKiFactor("port", "i2caddr", "value");\=
SetNXTLineLeaderKiValue("port", "i2caddr", "value");\=
SetNXTLineLeaderKpFactor("port", "i2caddr", "value");\=
SetNXTLineLeaderKpValue("port", "i2caddr", "value");\=
SetNXTLineLeaderSetpoint("port", "i2caddr", "value");\=
SetNXTServoPosition("port", "i2caddr", "servo", "pos");\=
SetNXTServoQuickPosition("port", "i2caddr", "servo", "qpos");\=
SetNXTServoSpeed("port", "i2caddr", "servo", "speed");\=
SetSensorMSDROD("port", "bActive");\=
SetSensorMSPressure("port");\=
SetSensorNXTSumoEyes("port", "bLong");\=
WriteNRLinkBytes("port", "i2caddr", "bytes");\=
- Codatex API functions
RFIDInit("port");\=
RFIDMode("port", "mode");\=
RFIDRead("port", "output");\=
RFIDReadContinuous("port", "output");\=
RFIDReadSingle("port", "output");\=
RFIDStatus("port");\=
RFIDStop("port");\=
- Dexter Industries API functions
ReadSensorDIAccl("port", "vector");\=
ReadSensorDIAccl8("port", "vector");\=
ReadSensorDIAccl8Raw("port", "vector");\=
ReadSensorDIAcclDrift("port", "x", "y", "z");\=
ReadSensorDIAcclRaw("port", "vector");\=
ReadSensorDIGyro("port", "vector");\=
ReadSensorDIGyroRaw("port", "vector");\=
SensorDIAcclStatus("port");\=
SensorDIGPSDistanceToWaypoint("port");\=
SensorDIGPSHeading("port");\=
SensorDIGPSHeadingToWaypoint("port");\=
SensorDIGPSLatitude("port");\=
SensorDIGPSLongitude("port");\=
SensorDIGPSRelativeHeading("port");\=
SensorDIGPSStatus("port");\=
SensorDIGPSTime("port");\=
SensorDIGPSVelocity("port");\=
SensorDIGyroStatus("port");\=
SensorDIGyroTemperature("port");\=
SetSensorDIAccl("port");\=
SetSensorDIAcclDrift("port", "x", "y", "z");\=
SetSensorDIAcclEx("port", "mode");\=
SetSensorDIGPSWaypoint("port", "latitude", "longitude");\=
SetSensorDIGyro("port");\=
SetSensorDIGyroEx("port", "scale, "odr", "bw");\=
- MicroInfinity API functions
ReadSensorMIXG1300L("port", "packet");\=
ResetMIXG1300L("port");\=
SensorMIXG1300LScale("port");\=
SetSensorMIXG1300LScale("port", "scale");\=
- RS485 functions
UseRS485();\=
RS485Disable();\=
RS485Enable();\=
RS485Initialize();\=
RS485Control("cmd", "baud", "mode");\=
RS485DataAvailable()
RS485Read("buffer");\=
RS485SendingData()
RS485Status("sendingData", "dataAvail");\=
RS485Uart("baud", "mode");\=
RS485Write("buffer");\=
SendRS485Bool("bval");\=
SendRS485Number("val");\=
SendRS485String("str");\=
HSDataMode()
HSFlags()
HSSpeed()
HSState()
HSMode()
SetHSDataMode("dataMode");\=
SetHSFlags("hsFlags");\=
SetHSMode("hsMode");\=
SetHSSpeed("hsSpeed");\=
SetHSState("hsState");\=
