(*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * Portions created by John Hansen are Copyright (C) 2011 John Hansen.
 * All Rights Reserved.
 *
 *)
unit uPSI_uGlobals;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uGlobals = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_uGlobals(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_uGlobals_Routines(S: TPSExec);

procedure Register;

implementation


uses
   uGlobals
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uGlobals]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_uGlobals(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('kRemoteKeysReleased','LongWord').SetUInt( $0000);
 CL.AddConstantN('kRemotePBMessage1','LongWord').SetUInt( $0100);
 CL.AddConstantN('kRemotePBMessage2','LongWord').SetUInt( $0200);
 CL.AddConstantN('kRemotePBMessage3','LongWord').SetUInt( $0400);
 CL.AddConstantN('kRemoteOutAForward','LongWord').SetUInt( $0800);
 CL.AddConstantN('kRemoteOutBForward','LongWord').SetUInt( $1000);
 CL.AddConstantN('kRemoteOutCForward','LongWord').SetUInt( $2000);
 CL.AddConstantN('kRemoteOutABackward','LongWord').SetUInt( $4000);
 CL.AddConstantN('kRemoteOutBBackward','LongWord').SetUInt( $8000);
 CL.AddConstantN('kRemoteOutCBackward','LongWord').SetUInt( $0001);
 CL.AddConstantN('kRemoteSelProgram1','LongWord').SetUInt( $0002);
 CL.AddConstantN('kRemoteSelProgram2','LongWord').SetUInt( $0004);
 CL.AddConstantN('kRemoteSelProgram3','LongWord').SetUInt( $0008);
 CL.AddConstantN('kRemoteSelProgram4','LongWord').SetUInt( $0010);
 CL.AddConstantN('kRemoteSelProgram5','LongWord').SetUInt( $0020);
 CL.AddConstantN('kRemoteStopOutOff','LongWord').SetUInt( $0040);
 CL.AddConstantN('kRemotePlayASound','LongWord').SetUInt( $0080);
 CL.AddConstantN('MB_ICONASTERISK','LongWord').SetUInt( $00000040);
 CL.AddConstantN('K_RCX','String').SetString( 'RCX');
 CL.AddConstantN('K_CYBER','String').SetString( 'CyberMaster');
 CL.AddConstantN('K_SCOUT','String').SetString( 'Scout');
 CL.AddConstantN('K_RCX2','String').SetString( 'RCX2');
 CL.AddConstantN('K_SPY','String').SetString( 'Spybot');
 CL.AddConstantN('K_SWAN','String').SetString( 'Swan');
 CL.AddConstantN('K_NXT','String').SetString( 'NXT');
 CL.AddConstantN('K_SPRO','String').SetString( 'SuperPro');
 CL.AddConstantN('rtRCX','LongInt').SetInt( 0);
 CL.AddConstantN('rtCybermaster','LongInt').SetInt( 1);
 CL.AddConstantN('rtScout','LongInt').SetInt( 2);
 CL.AddConstantN('rtRCX2','LongInt').SetInt( 3);
 CL.AddConstantN('rtSpy','LongInt').SetInt( 4);
 CL.AddConstantN('rtSwan','LongInt').SetInt( 5);
 CL.AddConstantN('rtNXT','LongInt').SetInt( 6);
 CL.AddConstantN('rtSPro','LongInt').SetInt( 7);
 CL.AddConstantN('SU_RCX','byte').SetUInt( rtRCX);
 CL.AddConstantN('SU_CYBERMASTER','byte').SetUInt( rtCybermaster);
 CL.AddConstantN('SU_SCOUT','byte').SetUInt( rtScout);
 CL.AddConstantN('SU_RCX2','byte').SetUInt( rtRCX2);
 CL.AddConstantN('SU_SPYBOTIC','byte').SetUInt( rtSpy);
 CL.AddConstantN('SU_SWAN','byte').SetUInt( rtSwan);
 CL.AddConstantN('SU_NXT','byte').SetUInt( rtNXT);
 CL.AddConstantN('SU_SPRO','byte').SetUInt( rtSPro);
 CL.AddDelphiFunction('Function IsNXT : boolean');
 CL.AddDelphiFunction('Function IsSwan : boolean');
 CL.AddDelphiFunction('Function IsRCX2 : boolean');
 CL.AddDelphiFunction('Function IsRCX : boolean');
 CL.AddDelphiFunction('Function IsScout : boolean');
 CL.AddDelphiFunction('Function IsSpybotic : boolean');
 CL.AddDelphiFunction('Function IsSuperPro : boolean');
{$IFNDEF FPC}
 CL.AddDelphiFunction('Function GetSpecialFolderPath( folder : integer) : string');
{$ENDIF}
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)

procedure RIRegister_uGlobals(CL: TPSRuntimeClassImporter);
begin
  // do nothing
end;

procedure RIRegister_uGlobals_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@IsNXT, 'IsNXT', cdRegister);
 S.RegisterDelphiFunction(@IsSwan, 'IsSwan', cdRegister);
 S.RegisterDelphiFunction(@IsRCX2, 'IsRCX2', cdRegister);
 S.RegisterDelphiFunction(@IsRCX, 'IsRCX', cdRegister);
 S.RegisterDelphiFunction(@IsScout, 'IsScout', cdRegister);
 S.RegisterDelphiFunction(@IsSpybotic, 'IsSpybotic', cdRegister);
 S.RegisterDelphiFunction(@IsSuperPro, 'IsSuperPro', cdRegister);
{$IFNDEF FPC}
 S.RegisterDelphiFunction(@GetSpecialFolderPath, 'GetSpecialFolderPath', cdRegister);
{$ENDIF}
end;



{ TPSImport_uGlobals }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uGlobals.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uGlobals(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uGlobals.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uGlobals(ri);
  RIRegister_uGlobals_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
